#pragma checksum "D:\WebSource\TestWebApp\WebApplication6\Pages\Faq.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "01f3d68e16b34393735501b236181d6e0942caae"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(TestWebApp.Pages.Pages_Faq), @"mvc.1.0.razor-page", @"/Pages/Faq.cshtml")]
namespace TestWebApp.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\WebSource\TestWebApp\WebApplication6\Pages\_ViewImports.cshtml"
using TestWebApp;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"01f3d68e16b34393735501b236181d6e0942caae", @"/Pages/Faq.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"943629611bff68fb78277b0347bdcd2df3dde5b3", @"/Pages/_ViewImports.cshtml")]
    #nullable restore
    public class Pages_Faq : global::Microsoft.AspNetCore.Mvc.RazorPages.Page
    #nullable disable
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("    \r\n");
#nullable restore
#line 3 "D:\WebSource\TestWebApp\WebApplication6\Pages\Faq.cshtml"
  
    ViewBag.Title = "Faq";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
<!-- Page Content-->
<section class=""py-5"">
    <div class=""container px-5 my-5"">
        <div class=""text-center mb-5"">
            <h1 class=""fw-bolder"">Frequently Asked Questions</h1>
            <p class=""lead fw-normal text-muted mb-0"">How can we help you?</p>
        </div>
        <div class=""row gx-5"">
            <div class=""col-xl-8"">
                <!-- FAQ Accordion 1-->
                <h2 class=""fw-bolder mb-3"">Account &amp; Billing</h2>
                <div class=""accordion mb-5"" id=""accordionExample"">
                    <div class=""accordion-item"">
                        <h3 class=""accordion-header"" id=""headingOne""><button class=""accordion-button"" type=""button"" data-bs-toggle=""collapse"" data-bs-target=""#collapseOne"" aria-expanded=""true"" aria-controls=""collapseOne"">Accordion Item #1</button></h3>
                        <div class=""accordion-collapse collapse show"" id=""collapseOne"" aria-labelledby=""headingOne"" data-bs-parent=""#accordionExample"">
                            <");
            WriteLiteral(@"div class=""accordion-body"">
                                <strong>This is the first item's accordion body.</strong>
                                It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the
                                <code>.accordion-body</code>
                                , though the transition does limit overflow.
                            </div>
                        </div>
                    </div>
                    <div class=""accordion-item"">
                        <h3 class=""accordion-header"" id=""headingTwo""><button class=""accordion-button collapsed"" type=""button"" data-bs-toggle=""collapse"" data-bs-target=""#collapseTwo"" aria-expanded=""false"" aria-controls=""colla");
            WriteLiteral(@"pseTwo"">Accordion Item #2</button></h3>
                        <div class=""accordion-collapse collapse"" id=""collapseTwo"" aria-labelledby=""headingTwo"" data-bs-parent=""#accordionExample"">
                            <div class=""accordion-body"">
                                <strong>This is the second item's accordion body.</strong>
                                It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the
                                <code>.accordion-body</code>
                                , though the transition does limit overflow.
                            </div>
                        </div>
                    </div>
                    <div class=""accordion-item"">
    ");
            WriteLiteral(@"                    <h3 class=""accordion-header"" id=""headingThree""><button class=""accordion-button collapsed"" type=""button"" data-bs-toggle=""collapse"" data-bs-target=""#collapseThree"" aria-expanded=""false"" aria-controls=""collapseThree"">Accordion Item #3</button></h3>
                        <div class=""accordion-collapse collapse"" id=""collapseThree"" aria-labelledby=""headingThree"" data-bs-parent=""#accordionExample"">
                            <div class=""accordion-body"">
                                <strong>This is the third item's accordion body.</strong>
                                It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the
                                <code>.accordion-body</code>");
            WriteLiteral(@"
                                , though the transition does limit overflow.
                            </div>
                        </div>
                    </div>
                </div>
                <!-- FAQ Accordion 2-->
                <h2 class=""fw-bolder mb-3"">Website Issues</h2>
                <div class=""accordion mb-5 mb-xl-0"" id=""accordionExample2"">
                    <div class=""accordion-item"">
                        <h3 class=""accordion-header"" id=""headingOne""><button class=""accordion-button"" type=""button"" data-bs-toggle=""collapse"" data-bs-target=""#collapseOne"" aria-expanded=""true"" aria-controls=""collapseOne"">Accordion Item #1</button></h3>
                        <div class=""accordion-collapse collapse show"" id=""collapseOne"" aria-labelledby=""headingOne"" data-bs-parent=""#accordionExample2"">
                            <div class=""accordion-body"">
                                <strong>This is the first item's accordion body.</strong>
                                It i");
            WriteLiteral(@"s shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the
                                <code>.accordion-body</code>
                                , though the transition does limit overflow.
                            </div>
                        </div>
                    </div>
                    <div class=""accordion-item"">
                        <h3 class=""accordion-header"" id=""headingTwo""><button class=""accordion-button collapsed"" type=""button"" data-bs-toggle=""collapse"" data-bs-target=""#collapseTwo"" aria-expanded=""false"" aria-controls=""collapseTwo"">Accordion Item #2</button></h3>
                        <div class=""accordion-collapse collapse"" id=""collapseTwo"" aria-labelledby=""headingTwo"" data");
            WriteLiteral(@"-bs-parent=""#accordionExample2"">
                            <div class=""accordion-body"">
                                <strong>This is the second item's accordion body.</strong>
                                It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the
                                <code>.accordion-body</code>
                                , though the transition does limit overflow.
                            </div>
                        </div>
                    </div>
                    <div class=""accordion-item"">
                        <h3 class=""accordion-header"" id=""headingThree""><button class=""accordion-button collapsed"" type=""button"" data-bs-toggle=""collapse"" data-");
            WriteLiteral(@"bs-target=""#collapseThree"" aria-expanded=""false"" aria-controls=""collapseThree"">Accordion Item #3</button></h3>
                        <div class=""accordion-collapse collapse"" id=""collapseThree"" aria-labelledby=""headingThree"" data-bs-parent=""#accordionExample2"">
                            <div class=""accordion-body"">
                                <strong>This is the third item's accordion body.</strong>
                                It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the
                                <code>.accordion-body</code>
                                , though the transition does limit overflow.
                            </div>
                        </div>
       ");
            WriteLiteral(@"             </div>
                </div>
            </div>
            <div class=""col-xl-4"">
                <div class=""card border-0 bg-light mt-xl-5"">
                    <div class=""card-body p-4 py-lg-5"">
                        <div class=""d-flex align-items-center justify-content-center"">
                            <div class=""text-center"">
                                <div class=""h6 fw-bolder"">Have more questions?</div>
                                <p class=""text-muted mb-4"">
                                    Contact us at
                                    <br />
                                    <a href=""#!"">support@domain.com</a>
                                </p>
                                <div class=""h6 fw-bolder"">Follow us</div>
                                <a class=""fs-5 px-2 link-dark"" href=""#!""><i class=""bi-twitter""></i></a>
                                <a class=""fs-5 px-2 link-dark"" href=""#!""><i class=""bi-facebook""></i></a>
                      ");
            WriteLiteral(@"          <a class=""fs-5 px-2 link-dark"" href=""#!""><i class=""bi-linkedin""></i></a>
                                <a class=""fs-5 px-2 link-dark"" href=""#!""><i class=""bi-youtube""></i></a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>
");
        }
        #pragma warning restore 1998
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<Pages_Faq> Html { get; private set; } = default!;
        #nullable disable
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<Pages_Faq> ViewData => (global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<Pages_Faq>)PageContext?.ViewData;
        public Pages_Faq Model => ViewData.Model;
    }
}
#pragma warning restore 1591
