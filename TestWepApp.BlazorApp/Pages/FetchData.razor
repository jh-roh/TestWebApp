@page "/fetchdata"
@using TestWepApp.BlazorApp.Components.Advanced
@using TestWepApp.BlazorApp.Data
@inject WeatherForecastService ForecastService

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>


    <h1>Grid Template Test</h1>
    <Grid Items="forecasts" TItem="WeatherForecast">
        <Header>
            <th>Date</th>
            <th>Temp. (C)</th>
            <th>Temp. (F)</th>
            <th>Summary</th>
        </Header>
        <Row>
            <td>@context.Date</td>
            <td>@context.TemperatureC</td>
            <td>@context.TemperatureF</td>
            <td>@context.Summary</td>
        </Row>
        <Footer>
            <td colspan="4">Spring is in the air!</td>
        </Footer>
    </Grid>


    <LIstView Items="forecasts">
        <ItemTemplate>
            @forcastTemplate(context)
        </ItemTemplate>
    </LIstView>
}

@code {
    private WeatherForecast[]? forecasts;

    private RenderFragment<WeatherForecast> forcastTemplate = (forcast) =>@<span>@forcast.Summary</span>;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await ForecastService.GetForecastAsync(DateOnly.FromDateTime(DateTime.Now));
    }
}
