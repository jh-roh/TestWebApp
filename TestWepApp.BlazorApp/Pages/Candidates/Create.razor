@page "/Candidates/Create"
@using TestWepApp.BlazorApp.Pages.Candidates.Components
@inject IDbContextFactory<CandidateAppDbContext> _ContextFactory

<PageTitle>Candidate Create</PageTitle>

<h1>Create</h1>

<h4>Candidate</h4>


@if(!String.IsNullOrEmpty(StatusMessage))
{
    var statusMessageClass = StatusMessage.StartsWith("Error") ? "danger" : "success";

    <div class="alert alert-@statusMessageClass alert-dismissible" role="alert">
        <button type="button" class="close" data-dismiss="alert" aria-label="Close" >
            <span aria-hidden="true">@StatusMessage</span>
        </button>
        
    </div>    
}

<hr />
<div class="row">
    <div class="col-md-4">
        <EditorForm Model="@Model" Busy="@Busy" OnSubmitCallback="@OnSubmitCallback"></EditorForm>
    </div>
</div>

<div>
    <a href="/Candidates">Back to List</a>
</div>

@code {

    public Candidate? Model { get; set; }

    public string? StatusMessage { get; set; }

    public bool Busy { get; set; }

    protected override void OnInitialized()
    {
        //Model = new Candidate { FirstName = "YJ", LastName = "Park", IsEnrollment = true};
        Model = new();
    }

    //유효성이 통과되었을때 처리기
    protected async Task FormSubmit()
    {
        if(Busy == true)
        {
            return;
        }

        Busy = true;

        try
        {
            if (Model is not null)
            {
                using var ctx = _ContextFactory.CreateDbContext();
                ctx.Candidates.Add(Model);
                await ctx.SaveChangesAsync();
                //await Task.Delay(5000);
                Model = new() { IsEnrollment = Model.IsEnrollment};

                StatusMessage = "Success";
            }
        }
        catch(Exception)
        {
            StatusMessage = "Error";

        }
        finally
        {
            Busy = false;
        }

    }

    //유효성 검사를 실패하였을때 호출됨
    protected void HandlerInvalidSubmit()
    {
        StatusMessage = "";
    }

    protected async Task OnSubmitCallback(bool isValid)
    {
        if(isValid)
        {
            await FormSubmit();
        }
        else
        {
            HandlerInvalidSubmit();
        }
    }
}
