@page "/Candidates/Create"
@inject IDbContextFactory<CandidateAppDbContext> _ContextFactory

<PageTitle>Candidate Create</PageTitle>

<h1>Create</h1>

<h4>Candidate</h4>


@if(!String.IsNullOrEmpty(StatusMessage))
{
    var statusMessageClass = StatusMessage.StartsWith("Error") ? "danger" : "success";

    <div class="alert alert-@statusMessageClass alert-dismissible" role="alert">
        <button type="button" class="close" data-dismiss="alert" aria-label="Close" >
            <span aria-hidden="true">@StatusMessage</span>
        </button>
        
    </div>    
}

<hr />
<div class="row">
    <div class="col-md-4">
        @if(Model is not null)
        {
            <EditForm Model="@Model" OnValidSubmit="FormSubmit" OnInvalidSubmit="@HandlerInvalidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="form-group">
                    <label class="control-label" for="FirstName">FirstName</label>
                    <InputText @bind-Value="Model.FirstName" id="FirstName" class="form-control" placeholder="Enter FirstName"/> 
                    @*<input class="form-control" type="text" data-val="true" data-val-length="The field FirstName must be a string with a maximum length of 50." data-val-length-max="50" data-val-required="The FirstName field is required." id="FirstName" maxlength="50" name="FirstName" value="" />*@
                    @*<span class="text-danger field-validation-valid" data-valmsg-for="FirstName" data-valmsg-replace="true"></span>*@
                
                    <ValidationMessage For="() => Model.FirstName" />
                
                
                </div>
                <div class="form-group">
                    <label class="control-label" for="LastName">LastName</label>
                    <InputText @bind-Value="Model.LastName" id="LastName" class="form-control" placeholder="Enter LastName"></InputText>
                    @*<input class="form-control" type="text" data-val="true" data-val-length="The field LastName must be a string with a maximum length of 50." data-val-length-max="50" data-val-required="The LastName field is required." id="LastName" maxlength="50" name="LastName" value="" />*@
                    @*<span class="text-danger field-validation-valid" data-valmsg-for="LastName" data-valmsg-replace="true"></span>*@
                    <ValidationMessage For="@(() => Model.LastName)" />
                </div>
                <div class="form-group form-check">
                    <label class="form-check-label" for="IsEnrollment" >
                        <InputCheckbox @bind-Value="Model.IsEnrollment" id="IsEnrollment" class="form-check-input"  />Is Enrollment
                        @*<input class="form-check-input" type="checkbox" data-val="true" data-val-required="The IsEnrollment field is required." id="IsEnrollment" name="IsEnrollment" value="true" /> IsEnrollment*@
                    </label>
                </div>
                <div class="form-group">
                    <input type="submit" value="Create" class="btn btn-primary" disabled="@Busy" />
                </div>
            </EditForm>
           
        }
    </div>
</div>

<div>
    <a href="/Candidates">Back to List</a>
</div>

@code {

    public Candidate? Model { get; set; }

    public string? StatusMessage { get; set; }

    public bool Busy { get; set; }

    protected override void OnInitialized()
    {
        //Model = new Candidate { FirstName = "YJ", LastName = "Park", IsEnrollment = true};
        Model = new();
    }


    protected async Task FormSubmit()
    {
        if(Busy == true)
        {
            return;
        }

        Busy = true;
        try
        {
            if (Model is not null)
            {
                using (var ctx = _ContextFactory.CreateDbContext())
                {
                    ctx.Candidates.Add(Model);
                    await ctx.SaveChangesAsync();

                    await Task.Delay(5000);

                    Model = new();
                }

                StatusMessage = "Success";
            }
        }
        catch(Exception)
        {
            StatusMessage = "Error";

        }
        finally
        {
            Busy = false;
        }

    }

    //유효성 검사를 실패하였을때 호출됨
    protected void HandlerInvalidSubmit()
    {
        StatusMessage = "";
    }
}
