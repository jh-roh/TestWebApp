<h3>EditorForm</h3>

@if (Model is not null)
{
    <EditForm Model="@Model" OnValidSubmit="FormSubmit" OnInvalidSubmit="@HandlerInvalidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label class="control-label" for="FirstName">FirstName</label>
            <InputText @bind-Value="Model.FirstName" id="FirstName" class="form-control" placeholder="Enter FirstName" />
            @*<input class="form-control" type="text" data-val="true" data-val-length="The field FirstName must be a string with a maximum length of 50." data-val-length-max="50" data-val-required="The FirstName field is required." id="FirstName" maxlength="50" name="FirstName" value="" />*@
            @*<span class="text-danger field-validation-valid" data-valmsg-for="FirstName" data-valmsg-replace="true"></span>*@

            <ValidationMessage For="() => Model.FirstName" />


        </div>
        <div class="form-group">
            <label class="control-label" for="LastName">LastName</label>
            <InputText @bind-Value="Model.LastName" id="LastName" class="form-control" placeholder="Enter LastName"></InputText>
            @*<input class="form-control" type="text" data-val="true" data-val-length="The field LastName must be a string with a maximum length of 50." data-val-length-max="50" data-val-required="The LastName field is required." id="LastName" maxlength="50" name="LastName" value="" />*@
            @*<span class="text-danger field-validation-valid" data-valmsg-for="LastName" data-valmsg-replace="true"></span>*@
            <ValidationMessage For="@(() => Model.LastName)" />
        </div>
        <div class="form-group form-check">
            <label class="form-check-label" for="IsEnrollment">
                <InputCheckbox @bind-Value="Model.IsEnrollment" id="IsEnrollment" class="form-check-input" />Is Enrollment
                @*<input class="form-check-input" type="checkbox" data-val="true" data-val-required="The IsEnrollment field is required." id="IsEnrollment" name="IsEnrollment" value="true" /> IsEnrollment*@
            </label>
        </div>
        <div class="form-group">
            @if(IsEdit)
            {
                <input type="button" value="Cancle" class="btn btn-primary" disabled="@Busy" @onclick="HandlerCancle" />
                <input type="submit" value="Edit" class="btn btn-primary" disabled="@Busy" />
            }
            else
            {
                <input type="submit" value="Create" class="btn btn-primary" disabled="@Busy" />
            }
        </div>
    </EditForm>
}
@code {
    [Parameter]
    public Candidate? Model { get; set; }

    [Parameter]
    public bool Busy { get; set; }

    [Parameter]
    public EventCallback<bool> OnSubmitCallback { get; set; }

    [Parameter]
    public bool IsEdit{ get; set; }

    [Parameter]
    public EventCallback OnCancleCallback{ get; set; }

    //유효성이 통과되었을때 처리기
    protected async Task FormSubmit()
    {
        if(OnSubmitCallback.HasDelegate)
        {
            await OnSubmitCallback.InvokeAsync(true);
        }
    }

    //유효성 검사를 실패하였을때 호출됨
    protected async Task HandlerInvalidSubmit()
    {
        if (OnSubmitCallback.HasDelegate)
        {
            await OnSubmitCallback.InvokeAsync(false);
        }
    }

    protected async Task HandlerCancle()
    {
        if (OnCancleCallback.HasDelegate)
        {
            await OnCancleCallback.InvokeAsync();
        }
    }
}
