@implements IDisposable

<h3>LifeCycleComponent</h3>

@code {
    private int counter;

    [Parameter]
    public int Counter
    {
        get => counter;
        set
        {
            counter = value;
            Console.WriteLine($"Counter set to {counter}");

        }
    }

    private bool firstParameterSet = true;
    DateTime created;

    DateTime lastUpdate;
    private bool shouldRender;

    /// <summary>
    /// 매개 변수 값이 설정되기전에 일부 코드를 실행해야 하는 경우
    ///
    /// ParameterView 인수에 값을 가진 [Parameter], [CascadingParameter] 를 설정
    /// base.SetParametersAsync를 호출하지 않으면 UI 가 업데이트 되지 않으므로
    /// 구성요소가 업데이트 되기를 원한다면 StateHasChanged를 호출해야함.
    /// </summary>
    /// <param name="parameters"></param>
    /// <returns></returns>
    public override Task SetParametersAsync(ParameterView parameters)
    {

        Console.WriteLine("SetParametersAsync called");
        if(parameters.TryGetValue(nameof(Counter), out int counter))
        {
            //ignore odd values
            if(counter % 2 == 0)
            {
                return base.SetParametersAsync(parameters);
            }

            if(firstParameterSet)
            {
                firstParameterSet = false;
                StateHasChanged(); // Force render
            }
        }
        return Task.CompletedTask;
    }

    /// <summary>
    /// The OnInitialized and OnInitializedAsync methods are the perfect place to load data from the database
    /// and assign it to properties used in the component’s template.
    /// 구성 요소는 상위 요소로부터 매개변수를 받은 후 초기화됩니다.이 시점에서 OnInitialized 및 OnInitializedAsync 메서드가 호출됩니다.
    /// 구성 요소가 생성된 후 추가 초기화를 수행하려면 이러한 메서드 중 하나를 재정의하세요. 
    /// 예를 들어, 이는 일반적으로 구성 요소에 대한 데이터를 얻기 위해 웹 API 서비스를 호출하는 지점입니다
    /// </summary>
    protected override void OnInitialized()
    {
        created = DateTime.Now;
        // forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("WeatherForecast");
        // hero = await heroService.GetHero(Id);
        Console.WriteLine("OnInitialized called");

    }
    /// <summary>
    /// 파라미터 변경 후 데이터 조회에 하나 이상의 파라미터가 필요한 경우
    /// 데이터 바인딩이 하나 이상의 파라미터를 업데이트 할때마다 이러한 메서드가 다시 호출되므로
    /// 계산된 속성, 필터링 등에 이상적
    /// </summary>
    protected override void OnParametersSet()
    {
        lastUpdate = DateTime.Now;
        Console.WriteLine("OnParametersSet called");
    }

    /// <summary>
    /// OnAfterRender 및 OnAfterRenderAsync 메서드는 구성 요소가 처음으로 렌디링 된 후
    /// 상태 변경의 결과로 다시 렌더링 되고 그에 따라 브라우저의 DOM이 업데이트 된 후에 호출
    /// 이 후크는 DOM 요소에 의존하는 JavaScript 리소스의 초기화를 수행하는데 이상적
    /// </summary>
    /// <param name="firstRender"></param>
    protected override void OnAfterRender(bool firstRender) 
    => Console.WriteLine($"OnAfterRender called with firstRender = {firstRender}");

    // @inject IJSRuntime JS
    // JSObjectReference module;
    // protected override void OnAfterRender(bool firstRender)
    // {
    //     if (firstRender)
    //     {
    //         module = await JS.InvokeAsync<JSObjectReference>("import", "./js/exampleJsInterop.js");
    //     }
    // }


    /// <summary>
    /// 구성 요소를 다시 렌더링 해야 하는 지 여부를 나타내는 부울 값을 반환
    /// 구성 요소는 여전히 한번 이상 렌더링
    /// 이 방법을 사용하여 UI 새로고침을 억제 할 수 있음
    /// </summary>
    /// <returns></returns>
    protected override bool ShouldRender()
    {
        Console.WriteLine($"ShouldRender called");

        shouldRender = true;
        return shouldRender;
    }

    public void Dispose() => Console.WriteLine("Disposed");
}
