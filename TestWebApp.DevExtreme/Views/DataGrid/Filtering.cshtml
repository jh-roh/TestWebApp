@using TestWebApp.DevExtreme.Models;
@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@*@(Html.DevExtreme().DataGrid<OrderWithDelivery>()
    .ID("gridContainer")
    .ShowBorders(true)
    .FilterRow(filterRow => filterRow
        .Visible(true)
        .ApplyFilter(GridApplyFilterMode.Auto)
    )
    .SearchPanel(searchPanel => searchPanel
        .Visible(true)
        .Width(240)
        .Placeholder("Search...")
    )
    .HeaderFilter(headerFilter => headerFilter.Visible(true))
    .Columns(columns =>
    {
        columns.AddFor(m => m.OrderNumber)
            .Width(140)
            .HeaderFilter(filter => filter.GroupInterval(10000));

        columns.AddFor(m => m.OrderDate)
            .Width(120)
            .Alignment(HorizontalAlignment.Right)
            .CalculateFilterExpression(@<text>
                function(value, selectedFilterOperations, target) {
                if(target === "headerFilter" && value === "weekends") {
                return [[getOrderDay, "=", 0], "or", [getOrderDay, "=", 6]];
                }
                return this.defaultCalculateFilterExpression.apply(this, arguments);
                }
            </text>)
            .HeaderFilter(filter => filter.DataSource(@<text>
                function(data) {
                data.dataSource.postProcess = function(results) {
                results.push({
                text: "Weekends",
                value: "weekends"
                });
                return results;
                };
                }
            </text>));

        columns.AddFor(m => m.DeliveryDate)
            .Width(180)
            .Alignment(HorizontalAlignment.Right)
            .Format("M/d/yyyy, HH:mm");

        columns.AddFor(m => m.SaleAmount)
            .Alignment(HorizontalAlignment.Right)
            .Format(Format.Currency)
            .EditorOptions(new { format = "currency", showClearButton = true })
            .HeaderFilter(filter => filter.DataSource(new[] {
                new {
                    text = "Less than $3000",
                    value = new object[] { "SaleAmount", "<", 3000 }
                },
                new {
                    text = "$3000 - $5000",
                    value = new object[] { new object[] { "SaleAmount", ">=", 3000 }, new object[] { "SaleAmount", "<", 5000 } }
                },
                new {
                    text = "$5000 - $10000",
                    value = new object[] { new object[] { "SaleAmount", ">=", 5000 }, new object[] { "SaleAmount", "<", 10000 } }
                },
                new {
                    text = "$10000 - $20000",
                    value = new object[] { new object[] { "SaleAmount", ">=", 10000}, new object[] { "SaleAmount", "<", 20000}}
                },
                new {
                    text = "Greater than $20000",
                    value = new object[] { "SaleAmount", ">=", 20000 }
                }
            }));

        columns.AddFor(m => m.Employee);

        columns.AddFor(m => m.CustomerStoreCity).HeaderFilter(hf => hf.AllowSearch(true));
    })
    .DataSource(d => d.Mvc().Controller("DataGridFiltering").LoadAction("Get").Key("ID"))
)*@


@(Html.DevExtreme().DataGrid<OrderWithDelivery>()
    .ID("gridContainer")
    .ShowBorders(true)
    .Columns(columns =>
    {
        columns.AddFor(m => m.OrderNumber)
            .Width(140)
            .HeaderFilter(filter => filter.GroupInterval(10000));

        columns.AddFor(m => m.OrderDate)
            .Width(120)
            .Alignment(HorizontalAlignment.Right)
            .CalculateFilterExpression(@<text>
    function(value, selectedFilterOperations, target) {
    if(target === "headerFilter" && value === "weekends") {
    return [[getOrderDay, "=", 0], "or", [getOrderDay, "=", 6]];
    }
    return this.defaultCalculateFilterExpression.apply(this, arguments);
    }
</text>)
            .HeaderFilter(filter => filter.DataSource(@<text>
    function(data) {
    data.dataSource.postProcess = function(results) {
    results.push({
    text: "Weekends",
    value: "weekends"
    });
    return results;
    };
    }
</text>));

        columns.AddFor(m => m.DeliveryDate)
            .Width(180)
            .Alignment(HorizontalAlignment.Right)
            .Format("M/d/yyyy, HH:mm");

        columns.AddFor(m => m.SaleAmount)
            .Alignment(HorizontalAlignment.Right)
            .Format(Format.Currency)
            .EditorOptions(new { format = "currency", showClearButton = true })
            .HeaderFilter(filter => filter.DataSource(new[] {
                new {
                    text = "Less than $3000",
                    value = new object[] { "SaleAmount", "<", 3000 }
                },
                new {
                    text = "$3000 - $5000",
                    value = new object[] { new object[] { "SaleAmount", ">=", 3000 }, new object[] { "SaleAmount", "<", 5000 } }
                },
                new {
                    text = "$5000 - $10000",
                    value = new object[] { new object[] { "SaleAmount", ">=", 5000 }, new object[] { "SaleAmount", "<", 10000 } }
                },
                new {
                    text = "$10000 - $20000",
                    value = new object[] { new object[] { "SaleAmount", ">=", 10000}, new object[] { "SaleAmount", "<", 20000}}
                },
                new {
                    text = "Greater than $20000",
                    value = new object[] { "SaleAmount", ">=", 20000 }
                }
            }));

        columns.AddFor(m => m.Employee);

        columns.AddFor(m => m.CustomerStoreCity).HeaderFilter(hf => hf.AllowSearch(true));
    })
    .DataSource(d => d.Mvc().Controller("DataGridFiltering").LoadAction("Get").Key("ID"))
    .SearchPanel(searchPanel => searchPanel
        .Visible(true)
        .Width(240)
        .Placeholder("Search...")
    )
    .OnContentReady("onContentReady")
)

<script>
    function onContentReady(e) {
        e.component.searchByText();
    }
</script>