@using System.Diagnostics
@using Microsoft.AspNetCore.Components.Web.Virtualization
@using TestWepApp.Components.Library.Data

@if(measurements is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Guid</th>
                <th>Min</th>
                <th>Avg</th>
                <th>Max</th>
            </tr>
        </thead>
        <tbody>
            <Virtualize ItemsProvider="@LoadMeasurements" ItemSize="25" Context="measurement">
                <ItemContent>
                    <tr>
                        <td>@measurement.Guid.ToString()</td>
                        <td>@measurement.Min</td>
                        <td>@measurement.Avg</td>
                        <td>@measurement.Max</td>
                    </tr>
                </ItemContent>

                <Placeholder>
                    <tr><td colspan="4">Loading...</td></tr>
                </Placeholder>
            </Virtualize>


            @* @foreach(var measurement in measurements)
            {
                <tr>
                    <td>@measurement.Guid.ToString()</td>
                    <td>@measurement.Min</td>
                    <td>@measurement.Avg</td>
                    <td>@measurement.Max</td>
                </tr>
            } *@
        </tbody>
    </table>
}

@code {
    private List<Measurement>? measurements;
    private Stopwatch timer = new Stopwatch();

    private async ValueTask<ItemsProviderResult<Measurement>>
        LoadMeasurements(ItemsProviderRequest request)
    {
        MeasurementsService measurementsService = new MeasurementsService();

        var (measurements, totalItemCount) = await measurementsService.GetMeasurementsPage(request.StartIndex, request.Count, request.CancellationToken);

        return new ItemsProviderResult<Measurement>(measurements, totalItemCount);
    }

    protected override async Task OnInitializedAsync()
    {
        MeasurementsService measurementsService = new MeasurementsService();

        measurements = await measurementsService.GetMeasurements();
        timer.Start();
    }


    protected override void OnAfterRender(bool firstRender)
    {
        timer.Stop();

        var elapsedMilliseconds = timer.ElapsedMilliseconds;
        Console.WriteLine($"Full rendering took {elapsedMilliseconds} ms.");
    }
}
