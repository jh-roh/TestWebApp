/**
* DevExpress HTML/JS Reporting (viewer\internal\_previewHandlersHelper.js)
* Version:  22.1.5
* Build date: Sep 5, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PreviewHandlersHelper = void 0;
var analytics_utils_1 = require("@devexpress/analytics-core/analytics-utils");
var settings_1 = require("../settings");
var PreviewHandlersHelper = (function () {
    function PreviewHandlersHelper(preview) {
        this._preview = preview;
    }
    PreviewHandlersHelper.prototype.doneStartExportHandler = function (deferred, inlineResult, response, exportOperationIdDeferred, startExportOperationId, useSameTab, printable) {
        var _this = this;
        if (useSameTab === void 0) { useSameTab = false; }
        if (printable === void 0) { printable = false; }
        try {
            if (!response) {
                exportOperationIdDeferred.reject();
                this._preview.progressBar.complete(startExportOperationId);
                return;
            }
            var exportOperationId = response;
            exportOperationIdDeferred.resolve(exportOperationId);
            var progress = 0;
            var doGetExportStatus = function (operationId) {
                var promise = _this._preview.exportHandler.getExportStatus(operationId);
                promise.done(function (result) {
                    if (result && result.requestAgain) {
                        if (progress < result.progress) {
                            progress = result.progress;
                            _this._preview.exportHandler.updateExportStatus(result.progress, operationId);
                        }
                        var doStatusRequest = function () { doGetExportStatus(operationId); };
                        settings_1.PollingDelay() ? setTimeout(doStatusRequest, settings_1.PollingDelay()) : doStatusRequest();
                    }
                    else {
                        _this._preview.progressBar.complete(operationId);
                        if (!result.requestAgain && result.completed && !_this._preview._cancelExportRequests[operationId]) {
                            _this._preview.exportHandler.updateExportStatus(result.progress, operationId);
                            _this._preview.exportHandler.getExportResult(operationId, inlineResult, useSameTab, result.token, printable, result.uri);
                        }
                    }
                });
            };
            doGetExportStatus(exportOperationId);
        }
        finally {
            deferred.resolve(true);
            this._preview._startBuildOperationId = '';
        }
    };
    PreviewHandlersHelper.prototype.errorStartExportHandler = function (deferred, startExportOperationId, error) {
        this._preview.progressBar.complete(startExportOperationId);
        deferred.reject();
    };
    PreviewHandlersHelper.prototype.doneExportStatusHandler = function (deferred, operationId, response) {
        try {
            if (!response) {
                deferred.resolve({ requestAgain: false });
                this._preview.progressBar.complete(operationId);
                return;
            }
            this._preview.progressBar && this._preview.progressBar.progress() < response.progress && this._preview.progressBar.progress(response.progress);
            deferred.resolve(response);
        }
        finally {
            if (!deferred.state || deferred.state() === 'pending') {
                deferred.resolve({ requestAgain: false });
            }
        }
    };
    PreviewHandlersHelper.prototype.errorExportStatusHandler = function (deferred, operationId, error) {
        this._preview.progressBar.complete(operationId);
        deferred.resolve({ requestAgain: false, completed: false });
    };
    PreviewHandlersHelper.prototype.doneStartBuildHandler = function (deferred, response, startBuildOperationId, doucmentIdDeferred) {
        var _this = this;
        try {
            var removeAllEmptyPages = function (all) {
                all && _this._preview.pages.removeAll();
                _this._preview.removeEmptyPages();
            };
            if (!response || !response.documentId) {
                doucmentIdDeferred.reject();
                this._preview.progressBar.complete(startBuildOperationId);
                removeAllEmptyPages();
                return;
            }
            var documentId = response.documentId;
            var stopBuildRequest = this._preview._stopBuildRequests[startBuildOperationId];
            var closeDocumentRequest = this._preview._closeDocumentRequests[startBuildOperationId];
            if (startBuildOperationId && (stopBuildRequest || closeDocumentRequest)) {
                if (closeDocumentRequest) {
                    closeDocumentRequest && this._preview.closeDocument(documentId);
                }
                else {
                    stopBuildRequest && this._preview.stopBuild(documentId);
                }
                doucmentIdDeferred.reject();
                this._preview.progressBar.complete(startBuildOperationId);
                removeAllEmptyPages();
                return;
            }
            this._preview._currentDocumentId(documentId);
            doucmentIdDeferred.resolve(documentId);
            var doGetBuildStatus = this._preview.getDoGetBuildStatusFunc();
            doGetBuildStatus(documentId);
        }
        finally {
            deferred.resolve(true);
        }
    };
    PreviewHandlersHelper.prototype.errorStartBuildHandler = function (deferred, startBuildOperationId, error) {
        this._preview.pageLoading(false);
        this._preview.errorMessage(analytics_utils_1.getLocalization('Document creation was cancelled due to server error', 'WebDocumentViewer_DocumentCreationCancelled'));
        this._preview.progressBar.complete(startBuildOperationId);
        deferred.resolve(true);
        this._preview.removeEmptyPages();
    };
    PreviewHandlersHelper.prototype.errorGetBuildStatusHandler = function (deferred, error, ignoreError) {
        deferred.resolve({ requestAgain: false, completed: false });
    };
    PreviewHandlersHelper.prototype.processPages = function (pageCount, stopProcessingPredicate) {
        var _this = this;
        var wereNoPagesAndNewOnesExist = this._preview.pageIndex() === -1 && pageCount > 0;
        if (wereNoPagesAndNewOnesExist) {
            this._preview.pageIndex(0);
        }
        for (var i = 0; i < pageCount && !stopProcessingPredicate(); i++) {
            var createNewPage = function (index) {
                return _this._preview.createPage(index, _this._preview.createBrickClickProcessor(index));
            };
            if (i < this._preview.pages().length) {
                var page = this._preview.pages()[i];
                if (!page || page.isEmpty) {
                    page = createNewPage(i);
                    this._preview.pages.splice(i, 1, page);
                }
                if (page.pageIndex === -1) {
                    page.pageIndex = i;
                    if (this._preview.pageIndex.peek() === i) {
                        page.isClientVisible(true);
                    }
                }
            }
            else {
                var newPage = createNewPage(i);
                this._preview.pages.push(newPage);
            }
        }
        this._preview._raiseOnSizeChanged();
        if (wereNoPagesAndNewOnesExist) {
            var pageIndex = this._preview.pages().length ? 0 : -1;
            this._preview.goToPage(pageIndex, true);
        }
    };
    PreviewHandlersHelper.prototype.doneGetBuildStatusHandler = function (deferred, documentId, response, stopProcessingPredicate) {
        try {
            if (!response) {
                deferred.resolve({ requestAgain: false });
                return;
            }
            this._preview.progressBar.progress() < response.progress && !this._preview._stopBuildRequests[documentId] && !stopProcessingPredicate()
                && this._preview.progressBar.progress(response.progress);
            this.processPages(response.pageCount, stopProcessingPredicate);
            deferred.resolve(response);
        }
        finally {
            if (deferred.state() === 'pending') {
                deferred.resolve({ requestAgain: false });
            }
        }
    };
    return PreviewHandlersHelper;
}());
exports.PreviewHandlersHelper = PreviewHandlersHelper;
