/**
* DevExpress HTML/JS Reporting (viewer\internal\_progressViewModel.js)
* Version:  22.1.5
* Build date: Sep 5, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProgressViewModel = void 0;
var analytics_internal_1 = require("@devexpress/analytics-core/analytics-internal");
var analytics_utils_1 = require("@devexpress/analytics-core/analytics-utils");
var $ = require("jquery");
var ko = require("knockout");
var ProgressViewModel = (function (_super) {
    __extends(ProgressViewModel, _super);
    function ProgressViewModel(enableKeyboardSupport) {
        var _this = _super.call(this) || this;
        _this.progress = ko.observable(0);
        _this._forceInvisible = ko.observable(false);
        _this._cancelExportRequests = {};
        _this.inProgress = ko.observable(false);
        _this.cancelText = ko.observable(analytics_utils_1.getLocalization('Cancel', 'AnalyticsCoreStringId.SearchDialog_Cancel'));
        _this.operationId = ko.observable();
        _this.text = ko.observable('');
        _this.cssClasses = ko.observable();
        _this.cancelVisible = ko.pureComputed(function () { return !!_this.operationId() && !_this.isCancelling(); });
        _this.isCancelling = ko.observable(false);
        _this.visible = ko.pureComputed({
            read: function () {
                if (_this._forceInvisible()) {
                    return false;
                }
                return _this.inProgress();
            },
            write: function (visibleState) {
                _this._forceInvisible(!visibleState);
            }
        });
        if (enableKeyboardSupport) {
            _this.progressBarAccessibility = new analytics_internal_1.ListKeyboardHelper();
            _this._disposables.push(_this.progressBarAccessibility);
        }
        _this._disposables.push(_this.cancelVisible, _this.visible);
        return _this;
    }
    ProgressViewModel.prototype.wasCancelRequested = function (id) {
        return !!(id && this._cancelExportRequests[id]);
    };
    ProgressViewModel.prototype.setPosition = function (position) {
        if (!position) {
            this.cssClasses({
                'dxrd-align-default': true
            });
        }
        else {
            this.cssClasses({
                'dxrd-align-bottom': position.bottom,
                'dxrd-align-top': position.top,
                'dxrd-align-left': position.left,
                'dxrd-align-right': position.right
            });
        }
    };
    ProgressViewModel.prototype.complete = function (completeOperationId) {
        if (completeOperationId === this.operationId() || this._startOperationId === completeOperationId || !completeOperationId) {
            this.inProgress(false);
            this.progress(0);
            this._startOperationId = null;
            this.operationId(null);
            this._lastOperationDeferred && this._lastOperationDeferred.resolve(completeOperationId);
            this.rejectLastOperationIdDeferred();
            this.isCancelling(false);
        }
    };
    ProgressViewModel.prototype.dispose = function () {
        this.rejectLastOperationIdDeferred();
        _super.prototype.dispose.call(this);
    };
    ProgressViewModel.prototype.rejectLastOperationIdDeferred = function () {
        this._lastOperationIdDeferred && this._lastOperationIdDeferred.reject();
    };
    ProgressViewModel.prototype.rejectLastOperationDeferred = function () {
        this._lastOperationDeferred && this._lastOperationDeferred.reject();
    };
    ProgressViewModel.prototype.startProgress = function (startOperationId, onStop, operationIdPromise) {
        var _this = this;
        if (this.inProgress()) {
            this.stop();
            this.rejectLastOperationDeferred();
            this.rejectLastOperationIdDeferred();
        }
        this._startOperationId = startOperationId;
        this.inProgress(true);
        this.progress(0);
        var newOperationDeferred = $.Deferred();
        var newOperationIdDeferred = $.Deferred();
        this._lastOperationDeferred = newOperationDeferred;
        this._lastOperationIdDeferred = newOperationIdDeferred;
        operationIdPromise
            .done(function (operationId) {
            newOperationIdDeferred.resolve(operationId);
        }).fail(function () {
            newOperationIdDeferred.reject();
            newOperationDeferred.reject();
            _this.complete(startOperationId);
        });
        newOperationIdDeferred.done(function (operationId) {
            _this.operationId(operationId);
        });
        this.stop = function () {
            _this.isCancelling(true);
            _this.text(analytics_utils_1.getLocalization('Cancelling...', 'ASPxReportsStringId.WebDocumentViewer_Cancelling'));
            var operationId = _this.operationId();
            var finalizeId = operationId || _this._startOperationId;
            try {
                $.isFunction(onStop) && onStop(finalizeId);
                if (operationId)
                    _this._cancelExportRequests[operationId] = true;
                if (_this._startOperationId)
                    _this._cancelExportRequests[_this._startOperationId] = true;
            }
            finally {
            }
        };
        return this._lastOperationDeferred.promise();
    };
    return ProgressViewModel;
}(analytics_utils_1.Disposable));
exports.ProgressViewModel = ProgressViewModel;
