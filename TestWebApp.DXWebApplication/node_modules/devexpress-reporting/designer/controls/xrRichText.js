/**
* DevExpress HTML/JS Reporting (designer\controls\xrRichText.js)
* Version:  22.1.5
* Build date: Sep 5, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.XRRichViewModel = exports.XRRichTextStreamType = void 0;
var $ = require("jquery");
var ko = require("knockout");
var richEdit_1 = require("./richEdit");
var xrControl_1 = require("./xrControl");
var xrRichTextSurface_1 = require("./xrRichTextSurface");
var XRRichTextStreamType;
(function (XRRichTextStreamType) {
    XRRichTextStreamType[XRRichTextStreamType["RtfText"] = 0] = "RtfText";
    XRRichTextStreamType[XRRichTextStreamType["PlainText"] = 1] = "PlainText";
    XRRichTextStreamType[XRRichTextStreamType["HtmlText"] = 2] = "HtmlText";
    XRRichTextStreamType[XRRichTextStreamType["XmlText"] = 3] = "XmlText";
})(XRRichTextStreamType = exports.XRRichTextStreamType || (exports.XRRichTextStreamType = {}));
var XRRichViewModel = (function (_super) {
    __extends(XRRichViewModel, _super);
    function XRRichViewModel(model, parent, serializer) {
        var _this = _super.call(this, model, parent, serializer) || this;
        _this.format = ko.observable(XRRichTextStreamType.RtfText);
        _this._newDocumentData = ko.observable(null);
        _this.textRtf = ko.observable('');
        _this._rtf = ko.observable('');
        var nameSubscribe = ko.computed(function () {
            var newVal = _this.name();
            if (!_this.textRtf() && newVal) {
                _this.textRtf(newVal);
                nameSubscribe && nameSubscribe.dispose();
            }
        }).extend({ rateLimit: { method: 'notifyWhenChangesStop', timeout: 1 } });
        _this._disposables.push(_this._newDocumentData.subscribe(function (newVal) {
            if (newVal)
                _this.format(_this._toStreamType(newVal.format));
            else
                _this.format(XRRichTextStreamType.RtfText);
        }));
        _this._disposables.push(nameSubscribe);
        return _this;
    }
    XRRichViewModel.prototype._toStreamType = function (extension) {
        switch (extension.toLowerCase()) {
            case 'txt':
                return XRRichTextStreamType.PlainText;
            case 'htm':
            case 'html':
                return XRRichTextStreamType.HtmlText;
            case 'docx':
                return XRRichTextStreamType.XmlText;
        }
        return XRRichTextStreamType.RtfText;
    };
    XRRichViewModel.prototype.getInfo = function () {
        var serializationInfo = $.extend(true, [], _super.prototype.getInfo.call(this));
        if (!(richEdit_1.getRichEditSurface()() instanceof xrRichTextSurface_1.XRRichSurface)) {
            serializationInfo.filter(function (x) { return XRRichViewModel._hiddenProperties.some(function (propertyName) { return propertyName === x.propertyName; }); })
                .forEach(function (x) { return x.visible = false; });
        }
        return serializationInfo;
    };
    Object.defineProperty(XRRichViewModel.prototype, "textEditableProperty", {
        get: function () { return this.textRtf; },
        enumerable: false,
        configurable: true
    });
    XRRichViewModel._hiddenProperties = ['_rtf', 'textRtf'];
    return XRRichViewModel;
}(xrControl_1.XRControlViewModel));
exports.XRRichViewModel = XRRichViewModel;
