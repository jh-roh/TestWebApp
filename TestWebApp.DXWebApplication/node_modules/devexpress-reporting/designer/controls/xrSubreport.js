/**
* DevExpress HTML/JS Reporting (designer\controls\xrSubreport.js)
* Version:  22.1.5
* Build date: Sep 5, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.XRSubreportSurface = exports.XRSubreportViewModel = void 0;
var analytics_internal_1 = require("@devexpress/analytics-core/analytics-internal");
var analytics_utils_1 = require("@devexpress/analytics-core/analytics-utils");
var $ = require("jquery");
var ko = require("knockout");
var _locker_1 = require("../../common/utils/_locker");
var _parameterUtils_1 = require("../dataObjects/metadata/_parameterUtils");
var reportStorageWeb_1 = require("../services/reportStorageWeb");
var subreportViewModel_1 = require("./subreportViewModel");
var xrControl_1 = require("./xrControl");
var xrReport_1 = require("./xrReport");
var xrSubreportParameterBinding_1 = require("./xrSubreportParameterBinding");
var XRSubreportViewModel = (function (_super) {
    __extends(XRSubreportViewModel, _super);
    function XRSubreportViewModel(model, parent, serializer) {
        var _this = _super.call(this, XRSubreportViewModel._patchModel(model), parent, serializer) || this;
        _this.needProcessLocation = false;
        _this.subreportParameters = ko.observableArray();
        var _width = ko.observable(_this.size.width());
        _this.size['_width'] = _width;
        _this._disposables.push(_this.key = ko.pureComputed(function () {
            var key = _this.parentModel() && _this.parentModel().root && _this.parentModel().root['key'];
            return (key ? (key() + '.') : '') + _this.name();
        }));
        _this._generateOwnPages = ko.observable(_this.generateOwnPages());
        var oldgenerateOwnPagesIsActive = _this._generateOwnPages();
        _this._disposables.push(_this.generateOwnPages = ko.pureComputed({
            read: function () {
                return _this._generateOwnPages();
            },
            write: function (newVal) {
                if (_this.isPropertyDisabled('generateOwnPages'))
                    return;
                var undo = analytics_utils_1.UndoEngine.tryGetUndoEngine(_this.parentModel());
                undo && undo.start();
                _this._generateOwnPages(newVal);
                undo && undo.end();
                oldgenerateOwnPagesIsActive = _this._getCurrentGenerateOwnPagesIsActive();
            }
        }), _this.generateOwnPagesIsActive = ko.computed(function () {
            return _this._getCurrentGenerateOwnPagesIsActive();
        }), _this.generateOwnPagesIsActive.subscribe(function (newVal) {
            _this._calculateSubreportPosition(newVal);
        }), _this.size.width = ko.computed({
            read: function () {
                if (_this.generateOwnPagesIsActive())
                    return _this.parentModel()['size'].width();
                return _width();
            },
            write: function (newVal) {
                _width(newVal);
            }
        }));
        _this._disposables.push(_this.parentModel.subscribe(function (newVal) {
            _this.needProcessLocation = oldgenerateOwnPagesIsActive !== _this._getCurrentGenerateOwnPagesIsActive() || (oldgenerateOwnPagesIsActive && _this._getCurrentGenerateOwnPagesIsActive());
            oldgenerateOwnPagesIsActive = _this._getCurrentGenerateOwnPagesIsActive();
        }));
        _this.size.isPropertyDisabled = function (propertyName) {
            if (propertyName === 'width')
                return _this.generateOwnPagesIsActive();
            return false;
        };
        var storageSubscription = null;
        if (_this.reportSource) {
            _this.reportSource.key = _this.key;
            if (parent) {
                parent.root['objectStorage'](__spreadArray(__spreadArray([], parent.root['objectStorage']()), _this.reportSource.objectStorage()));
                _this.reportSource.objectStorage(__spreadArray([], parent.root['objectStorage']()));
                storageSubscription = _this._subscribeStorages(_this.reportSource.objectStorage, parent.root['objectStorage']);
                _this._disposables.push(storageSubscription);
            }
            else {
                var subscribe = _this.parentModel.subscribe(function (newValue) {
                    if (newValue) {
                        subscribe.dispose();
                        _this.reportSource.objectStorage(__spreadArray([], newValue.root['objectStorage']()));
                        storageSubscription = _this._subscribeStorages(_this.reportSource.objectStorage, newValue.root['objectStorage']);
                        _this._disposables.push(storageSubscription);
                    }
                });
                _this._disposables.push(subscribe);
            }
        }
        _this.parameterBindings = analytics_utils_1.deserializeArray(model.ParameterBindings, function (item) {
            var binding = new xrSubreportParameterBinding_1.ParameterBinding(item, _this, serializer);
            _this._initParameter(binding);
            return binding;
        });
        _this.updateParameters();
        _this._disposables.push(_this.parameterBindings.subscribe(function (changes) {
            for (var index = 0; index < changes.length; index++) {
                if (changes[index].status === 'added') {
                    _this._initParameter(changes[index].value);
                }
            }
        }, null, 'arrayChange'));
        if ('parameters' in _this.root) {
            _this._disposables.push(_this.root['parameters'].subscribe(function (newParameters) {
                _this.parameterBindings().forEach(function (param) {
                    if (!_parameterUtils_1.collectAvailableParameters(newParameters).some(function (parameter) { return parameter === param.parameter(); })) {
                        param.parameter(null);
                    }
                });
            }));
        }
        _this._disposables.push(_this.reportSourceUrl.subscribe(function (newVal) {
            storageSubscription && storageSubscription.dispose();
            _this.reportSource && _this.reportSource.dispose();
            if (!newVal)
                _this.reportSource = new subreportViewModel_1.SubreportViewModel(subreportViewModel_1.SubreportViewModel.defaultReport, serializer);
            _this.updateParameters();
        }));
        return _this;
    }
    XRSubreportViewModel.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this.disposeObservableArray(this.parameterBindings);
        this.reportSource && this.reportSource.dispose();
        this.resetObservableArray(this.parameterBindings);
    };
    XRSubreportViewModel.prototype.getInfo = function () {
        var serializationInfo = $.extend(true, [], _super.prototype.getInfo.call(this));
        if (this.reportSourceUrl && this.reportSourceUrl()) {
            var property = serializationInfo.filter(function (item) { return item.propertyName === 'reportSource'; })[0];
            serializationInfo.splice(serializationInfo.indexOf(property), 1);
        }
        return serializationInfo;
    };
    XRSubreportViewModel._patchModel = function (model) {
        if (model['@ReportSourceUrl']) {
            delete model['ReportSource'];
        }
        return model;
    };
    XRSubreportViewModel.prototype._getCurrentGenerateOwnPagesIsActive = function () {
        return this.generateOwnPages() && !this.isPropertyDisabled('generateOwnPages');
    };
    XRSubreportViewModel.prototype._clearReportModel = function (reportModel) {
        var ignoreProperties = ['Parameters', 'ObjectStorage', 'ComponentStorage'];
        Object.keys(reportModel).forEach(function (x) {
            if (ignoreProperties.indexOf(x) === -1)
                delete reportModel[x];
        });
    };
    XRSubreportViewModel.prototype._assignParameters = function (parameters) {
        this.subreportParameters(_parameterUtils_1.collectAvailableParameters(parameters).map(function (x) { return x.name; }));
        this.refreshParameterBindings();
    };
    XRSubreportViewModel.prototype._calculateSubreportPosition = function (generateOwnPagesIsActive) {
        var offset = generateOwnPagesIsActive ? 0 : analytics_internal_1.pixelToUnits(5, this.root.measureUnit(), 1);
        this.size.width(this.parentModel()['size'].width() - offset * 2);
        this.location.x(offset);
    };
    XRSubreportViewModel.prototype._subscribeStorages = function (objectStorage1, objectStorage2) {
        var locker = new _locker_1.Locker();
        var subscriptions = [
            objectStorage1.subscribe(function (newVal) { return locker.lock(function () { return objectStorage2(newVal); }); }),
            objectStorage2.subscribe(function (newVal) { return locker.lock(function () { return objectStorage1(newVal); }); })
        ];
        return { dispose: function () { return subscriptions.forEach(function (x) { return x.dispose(); }); } };
    };
    XRSubreportViewModel.prototype._initParameter = function (parameter) {
        var _this = this;
        parameter.initReportDataSource(function () { return _this.root['dataSource'] && _this.root['dataSource']() || null; });
        parameter.initSubreportParameters(function () { return _this.subreportParameters(); });
    };
    XRSubreportViewModel.prototype.refreshParameterBindings = function () {
        this.parameterBindings().forEach(function (x) { return x.refresh(); });
    };
    XRSubreportViewModel.prototype.isPropertyDisabled = function (propertyName) {
        if (propertyName === 'generateOwnPages')
            return this.parentModel()
                && ['ReportHeaderBand', 'ReportFooterBand', 'GroupHeaderBand', 'GroupFooterBand', 'DetailBand'].indexOf(this.parentModel().controlType) === -1;
        return _super.prototype.isPropertyDisabled.call(this, propertyName);
    };
    XRSubreportViewModel.prototype.updateParameters = function () {
        var _this = this;
        if (this.reportSourceUrl()) {
            reportStorageWeb_1.ReportStorageWeb.getData(this.reportSourceUrl()).done(function (result) {
                var reportJSONModel = JSON.parse(result.reportLayout);
                _this._clearReportModel(reportJSONModel.XtraReportsLayoutSerializer);
                var report = new xrReport_1.ReportViewModel(reportJSONModel);
                _this._assignParameters(report.parameters());
            });
        }
        else if (this.reportSource) {
            this._assignParameters(this.reportSource.parameters());
        }
    };
    XRSubreportViewModel.prototype.cloneReportSource = function () {
        return this.reportSource && this.reportSource.clone();
    };
    Object.defineProperty(XRSubreportViewModel.prototype, "root", {
        get: function () {
            return this._getRoot();
        },
        enumerable: false,
        configurable: true
    });
    return XRSubreportViewModel;
}(xrControl_1.XRControlViewModel));
exports.XRSubreportViewModel = XRSubreportViewModel;
var XRSubreportSurface = (function (_super) {
    __extends(XRSubreportSurface, _super);
    function XRSubreportSurface(control, context) {
        var _this = _super.call(this, control, context) || this;
        _this.template = 'dxrd-subreport';
        _this.selectiontemplate = 'dxrd-subreport-selection';
        _this.displayText = function () { return control.name(); };
        return _this;
    }
    XRSubreportSurface.prototype.getAdornTemplate = function () {
        var result = '';
        result = xrControl_1.XRControlSurface._appendValue(result, 'dxrd-surface-hidden', !this._control['visible']());
        result = xrControl_1.XRControlSurface._appendValue(result, 'dxrd-intersect', this.isIntersect());
        return result;
    };
    XRSubreportSurface.prototype.getResizableOptions = function (resizeHandler) {
        return $.extend(true, {}, resizeHandler, {
            handles: this._control.generateOwnPagesIsActive() ? 's,n' : 'all'
        });
    };
    XRSubreportSurface.prototype.processLocation = function (location) {
        if (this._control.needProcessLocation) {
            this._control.needProcessLocation = false;
            return { top: location.top };
        }
        return location;
    };
    return XRSubreportSurface;
}(xrControl_1.XRControlSurface));
exports.XRSubreportSurface = XRSubreportSurface;
