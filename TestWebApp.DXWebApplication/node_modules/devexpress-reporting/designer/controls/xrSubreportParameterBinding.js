/**
* DevExpress HTML/JS Reporting (designer\controls\xrSubreportParameterBinding.js)
* Version:  22.1.5
* Build date: Sep 5, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ParameterBinding = void 0;
var analytics_internal_1 = require("@devexpress/analytics-core/analytics-internal");
var ko = require("knockout");
var dataBinding_1 = require("../dataObjects/dataBinding");
var xrSubreportParameterBinding_1 = require("./metadata/xrSubreportParameterBinding");
var ParameterBinding = (function (_super) {
    __extends(ParameterBinding, _super);
    function ParameterBinding(model, parent, serializer) {
        var _this = _super.call(this, model, serializer) || this;
        _this._dataSourceCallback = ko.observable(function () { return null; });
        _this._parametersCallback = ko.observable(function () { return []; });
        _this._reportDataSource = ko.computed(function () { return _this._dataSourceCallback()(); });
        _this.visible = ko.observable(true);
        _this.subreportParameters = ko.computed(function () { return _this._parametersCallback()(); });
        _this._disposables.push(_this._reportDataSource);
        _this._disposables.push(_this.subreportParameters);
        _this.fakeBinding = _this;
        var _dataSource = ko.observable(_this.dataSource());
        _this._disposables.push(_this.dataSource = ko.pureComputed({
            read: function () {
                return _dataSource() || _this._reportDataSource();
            },
            write: function (newValue) {
                _dataSource(newValue);
            }
        }));
        _this._disposables.push(_this.dataSource.subscribe(function (newValue) {
            if (!newValue) {
                _this.dataMember(null);
            }
        }));
        return _this;
    }
    ParameterBinding.createNew = function () {
        return new ParameterBinding({}, null);
    };
    ParameterBinding.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
    };
    ParameterBinding.prototype.getInfo = function () {
        if (this.subreportParameters && this.subreportParameters().length > 0) {
            var serializationInfo = analytics_internal_1.extend(true, [], xrSubreportParameterBinding_1.parameterBindingSerializationInfo);
            var parameterNameInfo = serializationInfo.filter(function (info) { return info.propertyName === 'parameterName'; })[0];
            parameterNameInfo.valuesArray = this.subreportParameters().map(function (parameter) { return { value: parameter, displayValue: parameter }; });
            var dataSourceInfo = serializationInfo.filter(function (info) { return info.propertyName === 'dataSource'; })[0];
            dataSourceInfo.defaultVal = this._reportDataSource();
            return serializationInfo;
        }
        return xrSubreportParameterBinding_1.parameterBindingSerializationInfo;
    };
    ParameterBinding.prototype.updateParameter = function (pathRequest, dataSources) {
        _super.prototype.updateParameter.call(this, pathRequest, dataSources);
        this.dataMember(null);
    };
    ParameterBinding.prototype.refresh = function () {
        var _this = this;
        if (!this.subreportParameters().some(function (parameter) { return parameter === _this.parameterName(); })) {
            this.parameterName('');
        }
    };
    ParameterBinding.prototype.initReportDataSource = function (dataSourceCallback) {
        this._dataSourceCallback(dataSourceCallback);
    };
    ParameterBinding.prototype.initSubreportParameters = function (parametersCallback) {
        this._parametersCallback(parametersCallback);
    };
    return ParameterBinding;
}(dataBinding_1.DataBindingBase));
exports.ParameterBinding = ParameterBinding;
