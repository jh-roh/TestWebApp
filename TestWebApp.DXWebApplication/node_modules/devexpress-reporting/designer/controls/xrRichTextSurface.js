/**
* DevExpress HTML/JS Reporting (designer\controls\xrRichTextSurface.js)
* Version:  22.1.5
* Build date: Sep 5, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.XRRichSurface = void 0;
var analytics_internal_1 = require("@devexpress/analytics-core/analytics-internal");
var ko = require("knockout");
var _reportRenderingService_1 = require("../services/_reportRenderingService");
var xrControl_1 = require("./xrControl");
var XRRichSurface = (function (_super) {
    __extends(XRRichSurface, _super);
    function XRRichSurface(control, context) {
        var _this = _super.call(this, control, context) || this;
        _this._lastRequest = ko.observable(null);
        _this._innerUpdate = ko.observable(false);
        _this.imageSrc = ko.observable('');
        _this.isLoading = ko.observable(false);
        _this.template = 'dxrd-shape';
        _this.contenttemplate = 'dxrd-shape-content';
        _this._sendCallback();
        _this._disposables.push(control._newDocumentData.subscribe(function (newVal) {
            control.serializableRtfString(newVal && newVal.content);
        }));
        _this._disposables.push(control.textRtf.subscribe(function (newVal) { _this._sendCallback('textRtf'); }));
        _this._disposables.push(control._rtf.subscribe(function () { _this._sendCallback('rtf'); }));
        _this._disposables.push(control.font.subscribe(function () { _this._sendCallback('font'); }));
        _this._disposables.push(control.foreColor.subscribe(function () { _this._sendCallback('foreColor'); }));
        _this._disposables.push(_this['position']['width'].subscribe(function (newValue) { _this._sendCallback('width'); }));
        _this._disposables.push(_this['position']['height'].subscribe(function (newValue) { _this._sendCallback('height'); }));
        _this._disposables.push(control.serializableRtfString.subscribe(function (newVal) { _this._sendCallback(newVal ? 'base64rtf' : undefined); }));
        return _this;
    }
    XRRichSurface.prototype._sendCallback = function (propertyName) {
        if (propertyName === void 0) { propertyName = null; }
        if (!this._innerUpdate()) {
            this._lastRequest(propertyName);
            var self = this;
            var selfControl = this._control;
            this.isLoading(true);
            _reportRenderingService_1.ReportRenderingService.getRichImage(this, propertyName).done(function (result) {
                self.isLoading(false);
                if (propertyName === self._lastRequest()) {
                    selfControl.root && selfControl.root['_update'] && selfControl.root['_update'](true);
                    if (propertyName !== 'height' && propertyName !== 'width') {
                        self._innerUpdate(true);
                        if (propertyName !== 'textRtf') {
                            selfControl.textRtf(result.Text);
                        }
                        selfControl._rtf(result.Rtf);
                        selfControl.serializableRtfString(result.SerializableRtfString);
                        self._innerUpdate(false);
                    }
                    self.imageSrc('data:image/x;base64,' + result.Img);
                    selfControl.root && selfControl.root['_update'] && selfControl.root['_update'](false);
                }
            }).fail(function (jqXHR) {
                self.isLoading(false);
                analytics_internal_1.NotifyAboutWarning('It is impossible to get richText');
            });
        }
    };
    return XRRichSurface;
}(xrControl_1.XRControlSurface));
exports.XRRichSurface = XRRichSurface;
