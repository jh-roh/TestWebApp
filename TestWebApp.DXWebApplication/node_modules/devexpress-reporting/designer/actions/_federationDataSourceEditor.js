/**
* DevExpress HTML/JS Reporting (designer\actions\_federationDataSourceEditor.js)
* Version:  22.1.5
* Build date: Sep 5, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.FederationDataSourceEditor = void 0;
var analytics_data_1 = require("@devexpress/analytics-core/analytics-data");
var analytics_internal_1 = require("@devexpress/analytics-core/analytics-internal");
var analytics_utils_1 = require("@devexpress/analytics-core/analytics-utils");
var analytics_wizard_1 = require("@devexpress/analytics-core/analytics-wizard");
var analytics_wizard_internal_1 = require("@devexpress/analytics-core/analytics-wizard-internal");
var queryBuilder_utils_1 = require("@devexpress/analytics-core/queryBuilder-utils");
var queryBuilder_widgets_internal_1 = require("@devexpress/analytics-core/queryBuilder-widgets-internal");
var $ = require("jquery");
var ko = require("knockout");
var dataFederation_1 = require("../dataObjects/dataFederation");
var _dataUtils_1 = require("../internal/_dataUtils");
var _reportDataSourceService_1 = require("../services/_reportDataSourceService");
var _qBRequestWrapper_1 = require("../tools/generator/_qBRequestWrapper");
var _sqlDataSourceEditor_1 = require("./_sqlDataSourceEditor");
var FederationDataSourceEditor = (function (_super) {
    __extends(FederationDataSourceEditor, _super);
    function FederationDataSourceEditor(dsHelper, wizard, reportViewModel, undoEngine, itemsProvider, _rtl, _callbacks) {
        var _this = _super.call(this, dsHelper, wizard, reportViewModel, undoEngine, itemsProvider) || this;
        _this._rtl = _rtl;
        _this._callbacks = _callbacks;
        _this.addAction = {
            clickAction: function (item) {
                _this.openManageQueriesEditor(item.data.name);
            },
            imageClassName: 'dxrd-image-add-query',
            imageTemplateName: 'dxrd-svg-operations-add_query',
            text: analytics_internal_1.getLocalization('Manage Queries...', 'DataAccessUIStringId.FederationDataSourceDesignerVerbManageQueries')
        };
        _this.editAction = {
            clickAction: function (item) {
                var dataSourceInfo = _this._findDataSource(item.path.split('.')[0]);
                _this.getFederationDataSourceByInfo(dataSourceInfo).done(function (federationDataSource) {
                    var query = federationDataSource.queries().filter(function (x) { return x.alias() === item.name; })[0];
                    _this.queriesPopupHelper(new queryBuilder_widgets_internal_1.FederatedQueriesHelper(federationDataSource, federationDataSource.queries, {
                        onSave: function () { return _this.saveDataSourceInfo(federationDataSource, dataSourceInfo); },
                        onClose: function () { return _this.queriesPopupHelper().dispose(); }
                    }, _this._rtl));
                    _this.queriesPopupHelper().editQuery(queryBuilder_utils_1.FederationQueryType[query.queryType()], query.alias());
                });
            },
            position: 0,
            imageClassName: 'dx-image-edit',
            imageTemplateName: 'dxrd-svg-operations-edit',
            text: analytics_internal_1.getLocalization('Edit query', 'AnalyticsCoreStringId.SqlDSWizard_EditQuery')
        };
        _this.editRelationsAction = {
            clickAction: function (item) {
                _this.editMasterDetailRelations(item.data.name);
            },
            position: 0,
            imageClassName: 'dx-image-edit',
            imageTemplateName: 'dxrd-svg-operations-edit',
            text: analytics_internal_1.getLocalization('Edit Master-Detail Relations', 'ASPxReportsStringId.ReportDesigner_FieldListActions_EditMasterDetailRelations')
        };
        _this.removeAction = {
            clickAction: function (item) {
                var dataSourceInfo = _this._findDataSource(item.path.split('.')[0]);
                _this.getFederationDataSourceByInfo(dataSourceInfo).done(function (federationDataSource) {
                    var query = federationDataSource.queries().filter(function (x) { return x.alias() === item.name; })[0];
                    federationDataSource.queries.remove(query);
                    _this.saveDataSourceInfo(federationDataSource, dataSourceInfo);
                });
            },
            position: 50,
            imageClassName: 'dxrd-image-recycle-bin',
            imageTemplateName: 'dxrd-svg-operations-recycle_bin',
            text: analytics_internal_1.getLocalization('Remove query', 'AnalyticsCoreStringId.SqlDSWizard_RemoveQuery')
        };
        _this.relationsEditor = ko.observable();
        _this.manageQueriesEditor = ko.observable();
        _this.queriesPopupHelper = ko.observable();
        return _this;
    }
    FederationDataSourceEditor.prototype._applyFederationDataSourceWizardChanges = function (federationDataSource, dataSourceInfo) {
        var _this = this;
        return this.createFederationDataSourceInfo(federationDataSource, this._collectDependentDataSources(federationDataSource))
            .done(function (result) {
            if (dataSourceInfo) {
                dataSourceInfo.data['base64'](result.base64());
            }
            else {
                result.data = new dataFederation_1.DataFederationDataSource(result.data, _this._dsHelper(), new analytics_utils_1.ModelSerializer());
                result.data.serializableSourceMap(federationDataSource.serializableSourceMap());
                _dataUtils_1.addDataSourceToReport(_this._dsHelper(), _this._reportViewModel(), _this._undoEngine(), _this._itemsProvider(), result);
            }
        });
    };
    FederationDataSourceEditor.prototype._collectDependentDataSources = function (federationDataSource) {
        var serializableModel = federationDataSource.getSerializableModel();
        return serializableModel.getSerializableFederationDataSourceInfo().dataSources;
    };
    FederationDataSourceEditor.prototype.applyFederationDataSourceWizardChanges = function (dataSourceWizardModel) {
        var federationDataSource = analytics_wizard_1._restoreFederationDataSourceFromState(dataSourceWizardModel.federationDataSourceWizard, this._dsHelper().usedDataSources, dataSourceWizardModel.dataSourceId);
        return this._applyFederationDataSourceWizardChanges(federationDataSource);
    };
    FederationDataSourceEditor.prototype.createFederationDataSourceInfo = function (dataSource, dependentDataSources) {
        var deferred = $.Deferred();
        _reportDataSourceService_1.ReportDataSourceService.getFederationDataSourceBase64(dataSource, dependentDataSources)
            .done(function (result) {
            deferred.resolve({
                name: 'federationDataSource',
                id: dataSource.id,
                data: {
                    '@ObjectType': 'DevExpress.DataAccess.DataFederation.FederationDataSource',
                    '@Base64': result
                },
                isFederationDataSource: true,
                isListType: false,
                isSupportQueries: true,
                base64: function () { return result; }
            });
        })
            .fail(function (result) { _sqlDataSourceEditor_1.DataSourceEditorBase._onFail(result, deferred); });
        return deferred.promise();
    };
    FederationDataSourceEditor.prototype.getFederationDataSourceByInfo = function (dataSourceInfo) {
        var _this = this;
        var deferred = $.Deferred();
        var rootManageQueriesDataSources = ko.observableArray(this._dsHelper().usedDataSources().filter(function (x) { return x !== dataSourceInfo; }));
        _reportDataSourceService_1.ReportDataSourceService.federationDataSourceFromBase64(dataSourceInfo.data['base64'](), this._collectDependentDataSources(dataSourceInfo.data)).done(function (result) {
            var fieldListProvider = new analytics_internal_1.FieldListProvider(_this._callbacks.fieldListsCallback, rootManageQueriesDataSources, [new analytics_wizard_internal_1.FederationDataSourceItemsExtender(rootManageQueriesDataSources)], true);
            var federationDataSource = new analytics_data_1.FederationDataSource(JSON.parse(result.federationDataSourceJSON), rootManageQueriesDataSources, fieldListProvider);
            federationDataSource.name(dataSourceInfo.name);
            deferred.resolve(federationDataSource);
        });
        return deferred;
    };
    FederationDataSourceEditor.prototype.editMasterDetailRelations = function (dataSourceID) {
        var _this = this;
        var dataSourceInfo = this._findDataSource(dataSourceID);
        this.getFederationDataSourceByInfo(dataSourceInfo).done(function (federationDataSource) {
            if (federationDataSource.queries().length < 2) {
                analytics_internal_1.ShowMessage(analytics_internal_1.getLocalization('At least two queries are required to create a master-detail relation.', 'DataAccessUIStringId.MessageLessThanTwoQueries'), 'warning', 10000);
                return;
            }
            _qBRequestWrapper_1.QBRequestWrapper().getFederationResultSchema(federationDataSource).done(function (schemaResult) {
                _this.relationsEditor(new queryBuilder_widgets_internal_1.MasterDetailEditor(federationDataSource.relations, new analytics_data_1.ResultSet(JSON.parse(schemaResult.resultSchemaJSON)), function () {
                    federationDataSource.relations(federationDataSource.relations().map(function (x) { return analytics_data_1.FederationMasterDetailRelation.create(x); }));
                    return _this._applyFederationDataSourceWizardChanges(federationDataSource, dataSourceInfo);
                }));
                _this.relationsEditor().popupVisible(true);
            });
        });
    };
    FederationDataSourceEditor.prototype.saveDataSourceInfo = function (federationDataSource, dataSourceInfo) {
        var _this = this;
        this._undoEngine().start();
        federationDataSource.updateSerializableModel();
        dataSourceInfo.data.serializableSourceMap(federationDataSource.serializableSourceMap());
        this._applyFederationDataSourceWizardChanges(federationDataSource, dataSourceInfo).always(function () {
            _this._undoEngine().end();
        });
    };
    FederationDataSourceEditor.prototype.openManageQueriesEditor = function (dataSourceID) {
        var _this = this;
        var dataSourceInfo = this._findDataSource(dataSourceID);
        this.getFederationDataSourceByInfo(dataSourceInfo).done(function (federationDataSource) {
            _this.manageQueriesEditor() && _this.manageQueriesEditor().dispose();
            _this.manageQueriesEditor(new queryBuilder_widgets_internal_1.ManageFederatedQueriesEditor(federationDataSource, function () { return _this.saveDataSourceInfo(federationDataSource, dataSourceInfo); }, _this._rtl));
            _this.manageQueriesEditor().popupVisible(true);
        });
    };
    FederationDataSourceEditor.prototype.getActions = function (context) {
        var result = [];
        if (!context.data)
            return result;
        if (context.data['canAddFederatedQuery']) {
            result.push(this.addAction);
            result.push(this.editRelationsAction);
        }
        if (context.data['canEditFederatedQuery']) {
            result.push(this.editAction);
            result.push(this.removeAction);
        }
        return result;
    };
    return FederationDataSourceEditor;
}(_sqlDataSourceEditor_1.DataSourceEditorBase));
exports.FederationDataSourceEditor = FederationDataSourceEditor;
