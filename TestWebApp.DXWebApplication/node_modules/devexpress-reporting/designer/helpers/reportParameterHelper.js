/**
* DevExpress HTML/JS Reporting (designer\helpers\reportParameterHelper.js)
* Version:  22.1.5
* Build date: Sep 5, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReportParameterHelper = void 0;
var analytics_internal_1 = require("@devexpress/analytics-core/analytics-internal");
var parameterHelper_1 = require("../../viewer/parameters/parameterHelper");
var layoutItems_1 = require("../dataObjects/parameters/layoutItems");
var ReportParameterHelper = (function (_super) {
    __extends(ReportParameterHelper, _super);
    function ReportParameterHelper(container) {
        var _this = _super.call(this) || this;
        _this.container = container;
        _this.allLayoutItems = [];
        return _this;
    }
    Object.defineProperty(ReportParameterHelper.prototype, "parameters", {
        get: function () {
            return this.container.parameters;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ReportParameterHelper.prototype, "parameterPanelLayoutItems", {
        get: function () {
            return this.container.parameterPanelLayoutItems;
        },
        enumerable: false,
        configurable: true
    });
    ReportParameterHelper.prototype.addParameterPanelLayoutItem = function (item) {
        this.allLayoutItems.push(item);
        if (item instanceof layoutItems_1.GroupLayoutItem && !item.title()) {
            var newName = analytics_internal_1.getUniqueNameForNamedObjectsArray(this.allLayoutItems.filter(function (x) { return x instanceof layoutItems_1.GroupLayoutItem; }), 'Group');
            item.title(newName);
        }
    };
    ReportParameterHelper.prototype.removeParameterPanelLayoutItem = function (item) {
        this.allLayoutItems.splice(this.allLayoutItems.indexOf(item), 1);
    };
    ReportParameterHelper.prototype.startEditing = function () {
        this.parameters().forEach(function (parameter) {
            parameter._isEditing(true);
            parameter._showLayoutProperties(true);
        });
    };
    ReportParameterHelper.prototype.endEditing = function () {
        this.parameters().forEach(function (parameter) {
            parameter._isEditing(false);
            parameter._showLayoutProperties(false);
        });
    };
    ReportParameterHelper.prototype.updateParameterLayoutItems = function () {
        var _this = this;
        this.parameters().forEach(function (parameter) {
            var parameterLayoutItem = _this.getParameterLayoutItem(parameter);
            if (!parameterLayoutItem) {
                var newItem = new layoutItems_1.ParameterLayoutItem({}, _this.container, undefined, parameter);
                _this.parameterPanelLayoutItems.push(newItem);
            }
        });
    };
    ReportParameterHelper.prototype.clearLayoutItems = function () {
        var _this = this;
        var toRemove = [];
        this.parameterPanelLayoutItems().forEach(function (item) {
            if (item instanceof layoutItems_1.ParameterLayoutItem) {
                var isModify = item.getInfo().some(function (x) { return !!x.editor && item.isPropertyModified(x.propertyName); });
                if (!isModify) {
                    toRemove.push(item);
                }
            }
        });
        toRemove.forEach(function (x) { return _this.parameterPanelLayoutItems.remove(x); });
    };
    ReportParameterHelper.prototype.getParameterLayoutItem = function (parameter) {
        return this.allLayoutItems.filter(function (x) { return x['parameter'] && x['parameter']() === parameter; })[0];
    };
    ReportParameterHelper.prototype.removeParameterModel = function (parameter) {
        for (var _i = 0, _a = this.allLayoutItems; _i < _a.length; _i++) {
            var parameterLayoutItem = _a[_i];
            if (parameterLayoutItem['parameter'] && parameterLayoutItem['parameter']() === parameter) {
                parameterLayoutItem.delete();
            }
        }
    };
    return ReportParameterHelper;
}(parameterHelper_1.ParameterHelper));
exports.ReportParameterHelper = ReportParameterHelper;
