/**
* DevExpress HTML/JS Reporting (designer\internal\errorPanel\_errorPanelViewModel.js)
* Version:  22.1.5
* Build date: Sep 5, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ErrorPanelViewModel = void 0;
var analytics_internal_1 = require("@devexpress/analytics-core/analytics-internal");
var analytics_utils_1 = require("@devexpress/analytics-core/analytics-utils");
var data_source_1 = require("devextreme/data/data_source");
var button_group_1 = require("devextreme/ui/button_group");
var data_grid_1 = require("devextreme/ui/data_grid");
var $ = require("jquery");
var ko = require("knockout");
var xrBand_1 = require("../../bands/xrBand");
var xrCrossband_1 = require("../../controls/xrCrossband");
var _types_1 = require("./_types");
var ErrorPanelViewModel = (function (_super) {
    __extends(ErrorPanelViewModel, _super);
    function ErrorPanelViewModel(options) {
        var _a;
        var _this = _super.call(this) || this;
        _this._offset = 20;
        _this._height = ko.observable(210);
        _this._errorSource = ko.observableArray([]);
        _this._choosenTypes = ko.observableArray([]);
        _this._filterValue = ko.observable();
        _this._getUndoEngine = null;
        _this._onClick = function () { return void 0; };
        _this._latestChangeSet = ko.observable(analytics_utils_1._LatestChangeSet.Empty());
        _this.collapsed = ko.observable(true);
        _this.position = ko.observable(null);
        _this._suppressedErrorCodes = ko.observableArray();
        _this._errorList = ko.observableArray([]);
        _this._providers = [];
        _this._subscriptions = [];
        _this._initOptions = options || {};
        _this._editableObject = options.editableObject;
        _this._resizableOptions = {
            starting: $.noop,
            handles: 'n',
            stop: function (ev) {
                ev.target.style.top = 'unset';
            },
            resize: function (event, ui) {
                _this._height(ui.size.height);
            },
            disabled: _this.collapsed,
            zoom: 1,
            minimumHeight: 210,
            maxHeight: 420
        };
        _this._getUndoEngine = function () { return options.undoEngine && options.undoEngine(); };
        _this._onClick = options.onClick;
        _this._disposables.push({
            dispose: function () {
                _this._getUndoEngine = null;
                _this._latestChangeSet(analytics_utils_1._LatestChangeSet.Empty());
            }
        });
        data_grid_1.default.length;
        button_group_1.default.length;
        if (options.position) {
            _this._position = {
                left: ko.computed(function () { return _this.collapsed() ? 'auto' : (options.position.left() + _this._offset + 'px'); }),
                right: ko.computed(function () { return options.position.right() + _this._offset + 'px'; }),
                height: ko.computed(function () { return (!_this.collapsed() ? _this._height() : 42) + 'px'; })
            };
            _this._disposables.push(_this._position.height);
            _this._disposables.push(_this._position.left);
            _this._disposables.push(_this._position.right);
        }
        _this._disposables.push(_this._collectErrorButtonDisabled = ko.computed(function () {
            return options.undoEngine && options.undoEngine() && options.undoEngine().getCurrentChangeSet().equal(_this._latestChangeSet());
        }));
        _this._selection = options.selection;
        _this._controlsHelper = options.controlsHelper;
        _this._controlScrollingTool = options.controlScrollingTool;
        _this.createDataGridOptions(options.undoEngine);
        _this._initDefaultFilter();
        _this._assignFilter();
        _this._disposables.push(_this._errorMessage, _this._warningMessage, _this._informationMessage);
        (_a = _this._disposables).push.apply(_a, ([_this._errorSource, _this._choosenTypes].map(function (x) {
            return x.subscribe(function () { return _this._assignFilter(); }, undefined, undefined);
        })));
        _this._disposables.push(_this._filteredErrorList = ko.computed(function () {
            return _this._errorList().filter(function (x) {
                return _this._errorSource().indexOf(x.errorSource) !== -1 &&
                    (_this._suppressedErrorCodes() || []).indexOf(x.code) === -1;
            });
        }), _this._errorMessage = ko.computed(function () { return _this._createMessage(_this._filteredErrorList().filter(function (x) { return x.errorType == _types_1.ErrorType.Error; }).length, analytics_utils_1.getLocalization('{0} Error|{0} Errors', 'ReportStringId.ReportDesignAnalyzer_Error')); }), _this._warningMessage = ko.computed(function () { return _this._createMessage(_this._filteredErrorList().filter(function (x) { return x.errorType == _types_1.ErrorType.Warning; }).length, analytics_utils_1.getLocalization('{0} Warning|{0} Warnings', 'ReportStringId.ReportDesignAnalyzer_Warning')); }), _this._informationMessage = ko.computed(function () { return _this._createMessage(_this._filteredErrorList().filter(function (x) { return x.errorType == _types_1.ErrorType.Information; }).length, analytics_utils_1.getLocalization('{0} Message|{0} Messages', 'ReportStringId.ReportDesignAnalyzer_Message')); }));
        return _this;
    }
    Object.defineProperty(ErrorPanelViewModel, "allErrorSources", {
        get: function () {
            return Object.keys(_types_1.ErrorSource).filter(function (key) { return isNaN(parseFloat(key)); });
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ErrorPanelViewModel, "allErrorTypes", {
        get: function () {
            return Object.keys(_types_1.ErrorType).filter(function (key) { return isNaN(parseFloat(key)); });
        },
        enumerable: false,
        configurable: true
    });
    ErrorPanelViewModel.prototype._createMessage = function (count, localizationFormat) {
        var formats = localizationFormat.split('|');
        if (count === 1)
            return analytics_internal_1.formatUnicorn(formats[0], count);
        return analytics_internal_1.formatUnicorn(formats[1], count);
    };
    ErrorPanelViewModel.prototype._createAvailableSourcesArray = function () {
        var _a, _b, _c, _d;
        var dataSource = [];
        if ((_a = this._initOptions) === null || _a === void 0 ? void 0 : _a.showReportCreationErrorSource)
            dataSource.push({ value: _types_1.ErrorSource.ReportCreation, displayValue: analytics_utils_1.getLocalization('Report Creation', 'DevExpress.XtraReports.Diagnostics.ErrorSource.Creation') });
        if ((_b = this._initOptions) === null || _b === void 0 ? void 0 : _b.showReportLayoutErrorSource)
            dataSource.push({ value: _types_1.ErrorSource.ReportLayout, displayValue: analytics_utils_1.getLocalization('Report Layout', 'DevExpress.XtraReports.Diagnostics.ErrorSource.Layout') });
        if ((_c = this._initOptions) === null || _c === void 0 ? void 0 : _c.showReportScriptsErrorSource)
            dataSource.push({ value: _types_1.ErrorSource.ReportScripts, displayValue: analytics_utils_1.getLocalization('Report Scripts', 'DevExpress.XtraReports.Diagnostics.ErrorSource.Scripts') });
        if ((_d = this._initOptions) === null || _d === void 0 ? void 0 : _d.showReportExportErrorSource)
            dataSource.push({ value: _types_1.ErrorSource.ReportExport, displayValue: analytics_utils_1.getLocalization('Report Export', 'DevExpress.XtraReports.Diagnostics.ErrorSource.Export') });
        return dataSource;
    };
    ErrorPanelViewModel.prototype._expandParentBands = function (root) {
        while (root) {
            var surface = root.surface;
            if (surface instanceof xrBand_1.BandSurface) {
                surface.collapsed(false);
            }
            else if (surface instanceof xrCrossband_1.XRCrossBandSurface) {
                var rect = surface['_unitAbsoluteRect'];
                var expandedBands = [];
                surface.parent.getChildrenCollection()().forEach(function (band) {
                    if (surface.isThereIntersection(rect, band.absoluteRect())) {
                        band.collapsed(false);
                        expandedBands.push(band);
                    }
                });
                var expandChildBands = function (bands) {
                    bands && bands.forEach(function (band) {
                        band.collapsed(false);
                        expandChildBands(band.bandsHolder.bands());
                    });
                };
                expandChildBands(expandedBands);
                return;
            }
            root = root.parentModel();
        }
    };
    ErrorPanelViewModel.prototype.clear = function () {
        this._providers = [];
        this._subscriptions.forEach(function (x) { return x.dispose(); });
        this._subscriptions = [];
        this._errorList([]);
    };
    ErrorPanelViewModel.prototype.navigateToItem = function (name) {
        this._onClick && this._onClick();
        var control = this._controlsHelper.getControlByName(name);
        if (!control)
            return;
        if (control['surface']) {
            this._expandParentBands(control);
            this._selection.focused(control['surface']);
            this._controlScrollingTool.scrollToControl(control['surface']);
        }
        else {
            this._editableObject(control);
        }
    };
    ErrorPanelViewModel.prototype.getNotificationTemplate = function () {
        return this._errorList().length > 0 ? 'dxrd-svg-errorPanel-notification' : 'dxrd-svg-errorPanel-notification_empty';
    };
    ErrorPanelViewModel.prototype.getTitleMessage = function () {
        return [this._errorMessage(), this._warningMessage(), this._informationMessage()].join('\n');
    };
    ErrorPanelViewModel.prototype.assignErrors = function () {
        var _this = this;
        var errors = this._errorList();
        errors.splice(0);
        for (var i = 0; i < this._providers.length; i++) {
            this._providers[i].errors().forEach(function (x) {
                var _a;
                x.link = 'https://docs.devexpress.com/XtraReports/403060#' + x.code.toLowerCase();
                x.showLink = (_a = _this._initOptions) === null || _a === void 0 ? void 0 : _a.enableErrorCodeLinks;
            });
            errors.push.apply(errors, this._providers[i].errors());
        }
        this._errorList.valueHasMutated();
    };
    ErrorPanelViewModel.prototype.subscribeProvider = function (provider) {
        var _this = this;
        this._providers.push(provider);
        this._subscriptions.push(provider.errors.subscribe(function (errors) {
            _this.assignErrors();
        }));
        this.assignErrors();
    };
    ErrorPanelViewModel.prototype.collectErrors = function () {
        var undo = this._getUndoEngine();
        var latestChanges = undo && undo.getCurrentChangeSet();
        if (!undo || !latestChanges.equal(this._latestChangeSet())) {
            this._latestChangeSet(latestChanges);
            for (var i = 0; i < this._providers.length; i++) {
                this._providers[i].collectErrors();
            }
        }
    };
    ErrorPanelViewModel.prototype.toggleCollapsed = function () {
        if (this.collapsed())
            this.collectErrors();
        this.collapsed(!this.collapsed());
    };
    ErrorPanelViewModel.prototype.createDataGridOptions = function (undoEngine) {
        var _this = this;
        var ds = ko.observable(new data_source_1.default(this._errorList()));
        this._disposables.push(this._errorList.subscribe(function (newVal) {
            ds().dispose();
            ds(new data_source_1.default(_this._errorList()));
        }));
        this._suppressedErrorCodes(this._initOptions.suppressedErrorCodes || []);
        this._dataGridOptions = {
            dataSource: ds,
            showColumnLines: false,
            showRowLines: true,
            showBorders: false,
            headerFilter: {
                visible: true
            },
            filterValue: this._filterValue,
            noDataText: analytics_utils_1.getLocalization('No errors', 'ASPxReportsStringId.ReportDesigner_ErrorPanel_NoErrors'),
            columns: [{
                    caption: ' ',
                    width: '30px',
                    dataField: 'errorType',
                    alignment: 'left',
                    allowHeaderFiltering: false,
                    cellTemplate: 'dxrd-errorType-column',
                    dataType: 'number'
                }, {
                    dataField: 'code',
                    caption: analytics_utils_1.getLocalization('Code', 'ReportStringId.ReportDesignAnalyzer_GridColumn_Code'),
                    cellTemplate: 'dxrd-code-column',
                    filterType: 'exclude',
                    filterValues: this._suppressedErrorCodes(),
                    dataType: 'string'
                }, {
                    dataField: 'errorSource',
                    visible: false,
                    dataType: 'number'
                }, {
                    dataField: 'description',
                    visible: false,
                    dataType: 'string'
                },
                {
                    dataField: 'message',
                    allowFiltering: false,
                    caption: analytics_utils_1.getLocalization('Description', 'ReportStringId.ReportDesignAnalyzer_GridColumn_Description'),
                    dataType: 'string'
                },
                {
                    dataField: 'controlName',
                    allowFiltering: false,
                    caption: analytics_utils_1.getLocalization('Source', 'ReportStringId.ReportDesignAnalyzer_GridColumn_Source'),
                    cellTemplate: 'dxrd-source-column',
                    dataType: 'string'
                }],
            searchPanel: {
                visible: true
            },
            masterDetail: {
                enabled: true,
                template: 'detail'
            },
            onOptionChanged: function (e) {
                if (/columns\[[0-9]+\].filterValues/i.test(e.fullName)) {
                    _this._suppressedErrorCodes(e.value || []);
                }
            },
            toolbar: {
                items: [
                    {
                        template: 'dxrd-error-source-filter',
                        data: {
                            value: this._errorSource,
                            dataSource: this._createAvailableSourcesArray(),
                            getContainer: analytics_internal_1.getParentContainer
                        },
                        location: 'before'
                    },
                    {
                        template: 'dxrd-error-type-filter',
                        data: {
                            selectedItemKeys: this._choosenTypes,
                            items: [
                                { template: 'dxrd-error-type-filter-item', text: function () { return _this._errorMessage(); }, icon: _types_1.ErrorType.Error },
                                { template: 'dxrd-error-type-filter-item', text: function () { return _this._warningMessage(); }, icon: _types_1.ErrorType.Warning },
                                { template: 'dxrd-error-type-filter-item', text: function () { return _this._informationMessage(); }, icon: _types_1.ErrorType.Information }
                            ],
                            keyExpr: 'icon', selectionMode: 'multiple', stylingMode: 'outlined'
                        },
                        location: 'before'
                    }, {
                        widget: 'dxButtonWithTemplate',
                        cssClass: 'dxrd-collect-errors-button',
                        options: {
                            icon: 'dxrd-svg-errorPanel-collectErrors',
                            text: analytics_utils_1.getLocalization('Collect Errors', 'ASPxReportsStringId.ReportDesigner_Analyzer_CollectErrors'),
                            onClick: function () { return _this.collectErrors(); },
                            disabled: this._collectErrorButtonDisabled
                        },
                        location: 'before'
                    },
                    'searchPanel'
                ]
            }
        };
    };
    ErrorPanelViewModel.prototype._initDefaultFilter = function () {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
        if (((_a = this._initOptions) === null || _a === void 0 ? void 0 : _a.enableReportCreationErrorSource) && ((_b = this._initOptions) === null || _b === void 0 ? void 0 : _b.showReportCreationErrorSource))
            this._errorSource.push(_types_1.ErrorSource.ReportCreation);
        if (((_c = this._initOptions) === null || _c === void 0 ? void 0 : _c.enableReportLayoutErrorSource) && ((_d = this._initOptions) === null || _d === void 0 ? void 0 : _d.showReportLayoutErrorSource))
            this._errorSource.push(_types_1.ErrorSource.ReportLayout);
        if (((_e = this._initOptions) === null || _e === void 0 ? void 0 : _e.enableReportScriptsErrorSource) && ((_f = this._initOptions) === null || _f === void 0 ? void 0 : _f.showReportScriptsErrorSource))
            this._errorSource.push(_types_1.ErrorSource.ReportScripts);
        if (((_g = this._initOptions) === null || _g === void 0 ? void 0 : _g.enableReportExportErrorSource) && ((_h = this._initOptions) === null || _h === void 0 ? void 0 : _h.showReportExportErrorSource))
            this._errorSource.push(_types_1.ErrorSource.ReportExport);
        if ((_j = this._initOptions) === null || _j === void 0 ? void 0 : _j.showErrors)
            this._choosenTypes.push(_types_1.ErrorType.Error);
        if ((_k = this._initOptions) === null || _k === void 0 ? void 0 : _k.showWarnings)
            this._choosenTypes.push(_types_1.ErrorType.Warning);
        if ((_l = this._initOptions) === null || _l === void 0 ? void 0 : _l.showInformation)
            this._choosenTypes.push(_types_1.ErrorType.Information);
    };
    ErrorPanelViewModel.prototype._assignFilter = function () {
        var _this = this;
        var filter = [];
        var uncheckedTypes = ErrorPanelViewModel.allErrorTypes.map(function (x) { return _types_1.ErrorType[x]; }).filter(function (x) { return _this._choosenTypes().indexOf(x) === -1; });
        var uncheckedSources = ErrorPanelViewModel.allErrorSources.map(function (x) { return _types_1.ErrorSource[x]; }).filter(function (x) { return _this._errorSource().indexOf(x) === -1; });
        if (uncheckedTypes.length) {
            filter.push(['errorType', 'noneof', uncheckedTypes]);
        }
        if (uncheckedSources.length) {
            filter.push(['errorSource', 'noneof', uncheckedSources]);
        }
        this._filterValue(filter.reduce(function (res, val) {
            if (!res.length)
                res.push(val);
            else
                res.push('and', val);
            return res;
        }, []));
    };
    ErrorPanelViewModel.prototype.getIconTemplateName = function (errorType) {
        return 'dxrd-svg-errorPanel-' + _types_1.ErrorType[errorType].toLowerCase();
    };
    return ErrorPanelViewModel;
}(analytics_utils_1.Disposable));
exports.ErrorPanelViewModel = ErrorPanelViewModel;
