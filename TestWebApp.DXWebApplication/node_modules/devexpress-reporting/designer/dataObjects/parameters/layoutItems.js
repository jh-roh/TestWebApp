/**
* DevExpress HTML/JS Reporting (designer\dataObjects\parameters\layoutItems.js)
* Version:  22.1.5
* Build date: Sep 5, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ParameterPanelMapper = exports.ParameterLayoutItem = exports.SeparatorLayoutItem = exports.GroupLayoutItem = exports.ParameterPanelLayoutItem = void 0;
var analytics_elements_1 = require("@devexpress/analytics-core/analytics-elements");
var analytics_utils_1 = require("@devexpress/analytics-core/analytics-utils");
var ko = require("knockout");
var settings_1 = require("../../utils/settings");
var layoutItems_1 = require("../metadata/parameters/layoutItems");
var ParameterPanelLayoutItemTypes;
(function (ParameterPanelLayoutItemTypes) {
    ParameterPanelLayoutItemTypes[ParameterPanelLayoutItemTypes["Parameter"] = 0] = "Parameter";
    ParameterPanelLayoutItemTypes[ParameterPanelLayoutItemTypes["Group"] = 1] = "Group";
    ParameterPanelLayoutItemTypes[ParameterPanelLayoutItemTypes["Separator"] = 2] = "Separator";
})(ParameterPanelLayoutItemTypes || (ParameterPanelLayoutItemTypes = {}));
var ParameterPanelLayoutItem = (function (_super) {
    __extends(ParameterPanelLayoutItem, _super);
    function ParameterPanelLayoutItem(model, parent, serializer) {
        var _this = _super.call(this, model, parent, serializer) || this;
        _this.name = ko.observable(null);
        var parameterHelper = _this.root.parameterHelper;
        parameterHelper && parameterHelper.addParameterPanelLayoutItem(_this);
        return _this;
    }
    ParameterPanelLayoutItem.createLayoutItem = function (model, parent, serializer) {
        return new exports.ParameterPanelMapper[model['@LayoutItemType']](model, parent, serializer);
    };
    ParameterPanelLayoutItem.prototype.delete = function () {
        this.parentModel().parameterPanelLayoutItems.remove(this);
        this.root.parameterHelper.removeParameterPanelLayoutItem(this);
    };
    ParameterPanelLayoutItem.prototype.getControlFactory = function () {
        return settings_1.controlsFactory();
    };
    ParameterPanelLayoutItem.prototype.className = function () {
        return '';
    };
    return ParameterPanelLayoutItem;
}(analytics_elements_1.ElementViewModel));
exports.ParameterPanelLayoutItem = ParameterPanelLayoutItem;
var GroupLayoutItem = (function (_super) {
    __extends(GroupLayoutItem, _super);
    function GroupLayoutItem(model, parent, serializer) {
        var _this = _super.call(this, model, parent, serializer) || this;
        _this.layoutItemType(ParameterPanelLayoutItemTypes[ParameterPanelLayoutItemTypes.Group]);
        _this.name = _this.title;
        _this.parameterPanelLayoutItems = analytics_utils_1.deserializeArray(model.Items, function (item) { return ParameterPanelLayoutItem.createLayoutItem(item, _this, serializer); });
        return _this;
    }
    GroupLayoutItem.prototype.getInfo = function () {
        return layoutItems_1.groupLayoutItemInfo;
    };
    GroupLayoutItem.prototype.className = function () {
        return 'parametergroup';
    };
    GroupLayoutItem.prototype.isPropertyDisabled = function (name) {
        return name === 'expanded' && !this.showExpandButton();
    };
    return GroupLayoutItem;
}(ParameterPanelLayoutItem));
exports.GroupLayoutItem = GroupLayoutItem;
var SeparatorLayoutItem = (function (_super) {
    __extends(SeparatorLayoutItem, _super);
    function SeparatorLayoutItem() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.layoutItemType = ko.observable(ParameterPanelLayoutItemTypes[ParameterPanelLayoutItemTypes.Separator]);
        _this.name = ko.observable(_this.layoutItemType());
        return _this;
    }
    SeparatorLayoutItem.prototype.getInfo = function () {
        return layoutItems_1.separatorLayoutItemInfo;
    };
    SeparatorLayoutItem.prototype.className = function () {
        return 'parameterseparator';
    };
    return SeparatorLayoutItem;
}(ParameterPanelLayoutItem));
exports.SeparatorLayoutItem = SeparatorLayoutItem;
var ParameterLayoutItem = (function (_super) {
    __extends(ParameterLayoutItem, _super);
    function ParameterLayoutItem(model, parent, serializer, parameter) {
        var _this = _super.call(this, model, parent, serializer) || this;
        _this.layoutItemType(ParameterPanelLayoutItemTypes[ParameterPanelLayoutItemTypes.Parameter]);
        parameter = parameter || _this.parameter();
        if (model['@Name']) {
            parameter = _this.root.parameters().filter(function (x) { return x.name === model['@Name']; })[0];
        }
        if (parameter) {
            _this.parameter(parameter);
            _this.name = parameter.parameterName;
            parameter.labelOrientation() === 'Vertical' && _this.labelOrientation('Vertical');
            parameter.labelOrientation = _this.labelOrientation;
        }
        return _this;
    }
    ParameterLayoutItem.prototype.className = function () {
        return this.parameter() && this.parameter().specifics;
    };
    ParameterLayoutItem.prototype.getInfo = function () {
        return layoutItems_1.parameterLayoutItemInfo;
    };
    return ParameterLayoutItem;
}(ParameterPanelLayoutItem));
exports.ParameterLayoutItem = ParameterLayoutItem;
exports.ParameterPanelMapper = {
    Group: GroupLayoutItem,
    Separator: SeparatorLayoutItem,
    Parameter: ParameterLayoutItem
};
