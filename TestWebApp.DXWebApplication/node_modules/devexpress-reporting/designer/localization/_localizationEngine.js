/**
* DevExpress HTML/JS Reporting (designer\localization\_localizationEngine.js)
* Version:  22.1.5
* Build date: Sep 5, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReportLocalizationEngine = void 0;
var analytics_internal_1 = require("@devexpress/analytics-core/analytics-internal");
var analytics_utils_1 = require("@devexpress/analytics-core/analytics-utils");
var ko = require("knockout");
var metadata_1 = require("../../common/metadata");
var _localization_1 = require("./_localization");
var ReportLocalizationEngine = (function (_super) {
    __extends(ReportLocalizationEngine, _super);
    function ReportLocalizationEngine(report) {
        var _this = _super.call(this) || this;
        _this.report = report;
        _this.items = new _localization_1.LocalizationDictionary();
        _this.add = function (cultureCode, component, propertyName, value) {
            var node = _this.items.get(cultureCode);
            if (!node) {
                _this.items.add(cultureCode).setValue(component, propertyName, value);
            }
            else
                node.setValue(component, propertyName, value);
        };
        _this.save = function (cultureCode) {
            if (cultureCode === void 0) { cultureCode = _this.report.language(); }
            _this.report.enumerateComponents().forEach(function (control) {
                if (control.getLocalizationProperties) {
                    control.getLocalizationProperties().forEach(function (item) {
                        return _this.add(cultureCode, control, item.propertyName, item.value);
                    });
                }
            });
        };
        _this.apply = function (cultureCode) {
            var localizationItem = _this.items.get(cultureCode);
            if (!localizationItem) {
                _this.items.add(cultureCode);
                _this.apply(cultureCode);
            }
            else {
                var needUpdate = !_this.report['_update']();
                needUpdate && _this.report['_update'](true);
                localizationItem.getInheritedProperties().forEach(function (localizationPropertyInfo) {
                    localizationPropertyInfo.component.applyLocalization(localizationPropertyInfo.propertyName, localizationPropertyInfo.value);
                });
                needUpdate && _this.report['_update'](false);
            }
        };
        _this.serialize = function () {
            var outArray = [];
            var _avalibleComponents = _this.report.enumerateComponents();
            var _avalibleComponentsDictionary = {};
            var _getUniqueName = function (component) {
                return analytics_internal_1.replaceInvalidSymbols(component.controlType + ko.unwrap(component.name));
            };
            _avalibleComponents.forEach(function (component) {
                _avalibleComponentsDictionary[_getUniqueName(component)] = component;
            });
            var canSerialize = function (component) {
                var item = _avalibleComponentsDictionary[_getUniqueName(component)];
                return item && component === item;
            };
            _this.items.keys().forEach(function (key) {
                outArray.push.apply(outArray, _this.items.get(key).serialize(canSerialize));
            });
            return outArray;
        };
        report._localizationItems().forEach(function (item) {
            item.component() && _this.add(item.culture(), item.component(), item.propertyName(), item.propertyValue);
        });
        return _this;
    }
    ReportLocalizationEngine.prototype.recalculateUnits = function (coef) {
        var _this = this;
        this.items.keys().forEach(function (key) {
            key !== _this.report.language() && _this.items.get(key).properties.forEach(function (x) { return x.recalculate && x.recalculate(coef); });
        });
    };
    ReportLocalizationEngine.prototype.hasCulture = function (cultureCode) {
        var item = this.items.get(cultureCode);
        return item && item.isLocalized();
    };
    ReportLocalizationEngine.prototype.isLocalized = function () {
        var _this = this;
        return this.items.keys().some(function (key) {
            return key !== metadata_1.defaultCulture && _this.items.get(key).properties.length > 0;
        });
    };
    return ReportLocalizationEngine;
}(analytics_utils_1.Disposable));
exports.ReportLocalizationEngine = ReportLocalizationEngine;
