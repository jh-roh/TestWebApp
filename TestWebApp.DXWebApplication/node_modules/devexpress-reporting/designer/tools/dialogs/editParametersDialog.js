/**
* DevExpress HTML/JS Reporting (designer\tools\dialogs\editParametersDialog.js)
* Version:  22.1.5
* Build date: Sep 5, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.EditParametersDialog = void 0;
var analytics_internal_1 = require("@devexpress/analytics-core/analytics-internal");
var ko = require("knockout");
var layoutItems_1 = require("../../dataObjects/parameters/layoutItems");
var _parametersLayoutItemsProvider_1 = require("../../internal/parameterLayout/_parametersLayoutItemsProvider");
var _parametersLayoutTreeListController_1 = require("../../internal/parameterLayout/_parametersLayoutTreeListController");
var parametersDialogs_1 = require("./parametersDialogs");
var EditParametersDialog = (function (_super) {
    __extends(EditParametersDialog, _super);
    function EditParametersDialog(report) {
        var _this = _super.call(this, report) || this;
        _this.buttonMap = {
            'addGroup': { text: 'Add Group', localizationId: 'ReportStringId.ParameterCollectionEditorForm_AddGroup' },
            'addParameter': { text: 'Add Parameter', localizationId: 'ReportStringId.ParameterCollectionEditorForm_AddParameter' },
            'addSeparator': { text: 'Add Separator', localizationId: 'ReportStringId.ParameterCollectionEditorForm_AddSeparator' },
            'down': { text: 'Move Down', localizationId: 'AnalyticsCoreStringId.Cmd_MoveDown' },
            'up': { text: 'Move Up', localizationId: 'AnalyticsCoreStringId.Cmd_MoveUp' }
        };
        _this.width = 'auto';
        _this.height = 726;
        _this.popupCss = 'dxrd-parameters-edit-dialog';
        _this.title = analytics_internal_1.getLocalization('Edit Parameters', 'ASPxReportsStringId.ReportDesigner_ParametersDialog_EditParameters');
        _this.contentEmptyAreaPlaceHolder = analytics_internal_1.getLocalization('Add items to configure report parameters and parameter panel layout', 'ReportStringId.ParameterCollectionEditorForm_EmptyViewPlaceHolder');
        _this.contentNoPropertiesPlaceHolder = analytics_internal_1.getLocalization('This item has no configurable properties', 'ReportStringId.ParameterCollectionEditorForm_SeparatorViewPlaceHolder');
        _this.contentTemplate = 'dxrd-parameters-content';
        _this.selectedPath = ko.observable('');
        _this._disposables.push(_this.contentVisible = ko.computed(function () {
            return _this._currentReport.parameterPanelLayoutItems().length > 0 && !!_this._selectedItem();
        }), _this.hasNoEditableProperties = ko.pureComputed(function () {
            return _this._selectedItem() && _this._selectedItem() instanceof layoutItems_1.SeparatorLayoutItem;
        }));
        _this._disposables.push(_this.itemsProvider = new _parametersLayoutItemsProvider_1.ParametersLayoutItemsProvider(_this._currentReport, _this._selectedItem));
        _this._disposables.push(_this.treeListController = new _parametersLayoutTreeListController_1.ParametersLayoutTreeListController(_this._currentReport, _this._selectedItem));
        _this.fieldListModel = {
            itemsProvider: _this.itemsProvider,
            treeListController: _this.treeListController,
            selectedPath: _this.itemsProvider.selectedPath,
            expandRootItems: true,
            onItemsChanged: function (items) {
                items.forEach(function (item) {
                    item.parent.collapsed(false);
                });
            }
        };
        return _this;
    }
    EditParametersDialog.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this.fieldListModel = null;
    };
    EditParametersDialog.prototype.getDisplayTextButton = function (key) {
        return analytics_internal_1.getLocalization(this.buttonMap[key].text, this.buttonMap[key].localizationId);
    };
    EditParametersDialog.prototype.up = function () {
        this.treeListController.move(true);
    };
    EditParametersDialog.prototype.down = function () {
        this.treeListController.move(false);
    };
    EditParametersDialog.prototype.addGroup = function () {
        this.treeListController.addItem(new layoutItems_1.GroupLayoutItem({}, this._currentReport, null));
    };
    EditParametersDialog.prototype.addSeparator = function () {
        this.treeListController.addItem(new layoutItems_1.SeparatorLayoutItem({}, this._currentReport, null));
    };
    EditParametersDialog.prototype.addParameter = function () {
        var parameterItem = this._createParameter();
        this.treeListController.addItem(parameterItem);
        this._currentReport.parameters.push(parameterItem.parameter());
    };
    EditParametersDialog.prototype.isDisabledButton = function (buttonName) {
        if (buttonName === 'up' || buttonName === 'down')
            return !this.contentVisible();
        return false;
    };
    EditParametersDialog.prototype.onSubmit = function () { };
    return EditParametersDialog;
}(parametersDialogs_1.ParametersDialogBase));
exports.EditParametersDialog = EditParametersDialog;
