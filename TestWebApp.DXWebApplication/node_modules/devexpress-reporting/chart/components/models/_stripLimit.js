/**
* DevExpress HTML/JS Reporting (chart\components\models\_stripLimit.js)
* Version:  22.1.5
* Build date: Sep 5, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.stripMaxLimitInfo = exports.stripMinLimitInfo = exports.stripLimitSerializationsInfo = exports.StripLimitViewModel = void 0;
var analytics_elements_1 = require("@devexpress/analytics-core/analytics-elements");
var analytics_internal_1 = require("@devexpress/analytics-core/analytics-internal");
var analytics_utils_1 = require("@devexpress/analytics-core/analytics-utils");
var analytics_widgets_1 = require("@devexpress/analytics-core/analytics-widgets");
var ko = require("knockout");
var _axis_1 = require("../../internal/meta/_axis");
var _common_1 = require("../../internal/meta/_common");
var StripLimitViewModel = (function (_super) {
    __extends(StripLimitViewModel, _super);
    function StripLimitViewModel(model, serializer, info) {
        var _this = _super.call(this, model, serializer, info || exports.stripLimitSerializationsInfo) || this;
        _this.axisValue = ko.observable(_this._axisValue());
        _this.getInfo = function () {
            if (!_this.enabled()) {
                var newInfo = analytics_internal_1.extend(true, [], exports.stripLimitSerializationsInfo);
                var axisValueProperty = newInfo.filter(function (info) { return info.propertyName === 'axisValue'; })[0];
                axisValueProperty.visible = false;
                return newInfo;
            }
            return exports.stripLimitSerializationsInfo;
        };
        return _this;
    }
    StripLimitViewModel.from = function (model, serializer) {
        return new StripLimitViewModel(model || {}, serializer);
    };
    StripLimitViewModel.toJson = function (value, serializer, refs) {
        value._axisValue(value.enabled() ? value.axisValue() : null);
        return serializer.serialize(value, undefined, refs);
    };
    return StripLimitViewModel;
}(analytics_elements_1.SerializableModel));
exports.StripLimitViewModel = StripLimitViewModel;
var stripLimitEnable = { propertyName: 'enabled', modelName: '@Enabled', displayName: 'Enabled', defaultVal: true, editor: analytics_widgets_1.editorTemplates.getEditor('bool'), from: analytics_utils_1.parseBool, localizationId: 'DevExpress.XtraCharts.StripLimit.Enabled' };
exports.stripLimitSerializationsInfo = [_axis_1.axisValueSerializable, _axis_1.axisValue, stripLimitEnable, _common_1.tag];
exports.stripMinLimitInfo = { propertyName: 'minLimit', modelName: 'MinLimit', displayName: 'Min Limit', from: StripLimitViewModel.from, toJsonObject: StripLimitViewModel.toJson, editor: analytics_widgets_1.editorTemplates.getEditor('objecteditor'), localizationId: 'DevExpress.XtraCharts.Strip.MinLimit' }, exports.stripMaxLimitInfo = { propertyName: 'maxLimit', modelName: 'MaxLimit', displayName: 'Max Limit', from: StripLimitViewModel.from, toJsonObject: StripLimitViewModel.toJson, editor: analytics_widgets_1.editorTemplates.getEditor('objecteditor'), localizationId: 'DevExpress.XtraCharts.Strip.MaxLimit' };
