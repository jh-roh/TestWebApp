"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChangeCharacterPropertiesCommandBase = void 0;
var tslib_1 = require("tslib");
var control_1 = require("../../../core/model/options/control");
var sub_document_1 = require("../../../core/model/sub-document");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var list_1 = require("@devexpress/utils/lib/utils/list");
var command_base_1 = require("../command-base");
var command_states_1 = require("../command-states");
var ChangeCharacterPropertiesCommandBase = (function (_super) {
    tslib_1.__extends(ChangeCharacterPropertiesCommandBase, _super);
    function ChangeCharacterPropertiesCommandBase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ChangeCharacterPropertiesCommandBase.prototype.getState = function (options) {
        if (options === void 0) { options = this.convertToCommandOptions(undefined); }
        this._options = options;
        var state = new command_states_1.IntervalCommandStateEx(this.isEnabled(), list_1.ListUtils.deepCopy(options.intervalsInfo.intervals), this.getValueForState(this.getCurrentValue()));
        state.denyUpdateValue = this.isLockUpdateValue();
        return state;
    };
    ChangeCharacterPropertiesCommandBase.prototype.isEnabled = function () {
        return _super.prototype.isEnabled.call(this) && control_1.ControlOptions.isEnabled(this.control.modelManager.richOptions.control.characterFormatting);
    };
    ChangeCharacterPropertiesCommandBase.prototype.lockInputPositionUpdating = function () {
        return true;
    };
    ChangeCharacterPropertiesCommandBase.prototype.getIntervalsForModifying = function () {
        return this.getApplyToIntervals(this._options);
    };
    ChangeCharacterPropertiesCommandBase.prototype.getApplyToIntervals = function (options) {
        var _this = this;
        if (options.intervalsInfo.isCollapsed) {
            var pos = options.intervalsInfo.position;
            var paragraph = options.subDocument.getParagraphByPosition(pos);
            var interval = void 0;
            if (pos + 1 == paragraph.getEndPosition() && !paragraph.isInList())
                interval = new fixed_1.FixedInterval(paragraph.getEndPosition() - 1, 1);
            else
                interval = options.subDocument.getWholeWordInterval(pos);
            var intervals = [interval];
            if (options.subDocument.isEditable(intervals))
                return intervals;
            return options.intervalsInfo.intervals;
        }
        else
            return list_1.ListUtils.map(options.intervalsInfo.intervals, function (interval) {
                if (_this._areParagraphContentInterval(interval))
                    interval.length++;
                return interval;
            });
    };
    ChangeCharacterPropertiesCommandBase.prototype._areParagraphContentInterval = function (interval) {
        var paragraphInterval = this.selection.activeSubDocument.getParagraphByPosition(interval.start).interval;
        return interval.start == paragraphInterval.start && interval.end == paragraphInterval.end - 1;
    };
    ChangeCharacterPropertiesCommandBase.prototype.executeCore = function (_state, options) {
        var desc = this.getDescriptor();
        var newValue = options.param;
        var applyToIntervals = this.getApplyToIntervals(options);
        if (this.getCurrentValue() !== newValue) {
            var history_1 = this.history;
            history_1.beginTransaction();
            this.applyToInputPosition(desc, newValue);
            for (var _i = 0, applyToIntervals_1 = applyToIntervals; _i < applyToIntervals_1.length; _i++) {
                var interval = applyToIntervals_1[_i];
                if (interval.length > 0)
                    history_1.addAndRedo(new (desc.getHistoryItemConstructor())(this.modelManipulator, new sub_document_1.SubDocumentInterval(options.subDocument, interval), newValue, true));
            }
            history_1.endTransaction();
        }
        return true;
    };
    ChangeCharacterPropertiesCommandBase.prototype.applyToInputPosition = function (desc, newValue) {
        desc.setProp(this.inputPosition.getMaskedCharacterProperties(), newValue);
        desc.setProp(this.inputPosition.getMergedCharacterPropertiesFull(), newValue);
        desc.setProp(this.inputPosition.getMergedCharacterPropertiesRaw(), newValue);
        this.inputPosition.getMaskedCharacterProperties().setUseValue(desc.maskValue(), true);
    };
    ChangeCharacterPropertiesCommandBase.prototype.isLockUpdateValue = function () {
        return false;
    };
    ChangeCharacterPropertiesCommandBase.prototype.getCurrentValue = function () {
        return this.getDescriptor().getProp(this.inputPosition.getMergedCharacterPropertiesRaw());
    };
    ChangeCharacterPropertiesCommandBase.prototype.getValueForState = function (val) {
        return val;
    };
    ChangeCharacterPropertiesCommandBase.prototype.convertBooleanParameterToEnumType = function (parameter, ifTrue, ifFalse) {
        if (typeof parameter === 'boolean')
            return parameter ? ifTrue : ifFalse;
        return this.getCurrentValue() == ifTrue ? ifFalse : ifTrue;
    };
    return ChangeCharacterPropertiesCommandBase;
}(command_base_1.CommandBase));
exports.ChangeCharacterPropertiesCommandBase = ChangeCharacterPropertiesCommandBase;
