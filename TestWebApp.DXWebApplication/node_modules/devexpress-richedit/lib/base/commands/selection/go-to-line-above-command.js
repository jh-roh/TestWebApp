"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExtendGoToLineAboveCommand = exports.GoToLineAboveCommand = void 0;
var tslib_1 = require("tslib");
var document_layout_details_level_1 = require("../../../core/layout/document-layout-details-level");
var search_1 = require("@devexpress/utils/lib/utils/search");
var go_to_line_vertically_command_base_1 = require("./go-to-line-vertically-command-base");
var GoToLineAboveCommand = (function (_super) {
    tslib_1.__extends(GoToLineAboveCommand, _super);
    function GoToLineAboveCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GoToLineAboveCommand.prototype.extendSelection = function () {
        return false;
    };
    GoToLineAboveCommand.prototype.getPositionForEdgeLine = function (_layoutPosition) {
        var lastInterval = this.selection.lastSelectedInterval;
        return lastInterval.start;
    };
    GoToLineAboveCommand.prototype.canAdvanceToNextRow = function (cellIterator) {
        return cellIterator.tryAdvanceToAboveRow();
    };
    GoToLineAboveCommand.prototype.getNewLayoutPositionRowLevel = function (oldLayoutPosition) {
        var newLayoutPosition = oldLayoutPosition.clone();
        if (newLayoutPosition.advanceToPrevRow(this.control.layout))
            return newLayoutPosition;
        else
            return null;
    };
    GoToLineAboveCommand.prototype.getInitialSelectionEndPosition = function () {
        if (this.extendSelection() && this.selection.forwardDirection)
            return this.selection.lastSelectedInterval.end;
        else
            return this.selection.lastSelectedInterval.start;
    };
    GoToLineAboveCommand.prototype.isForwardDirection = function () {
        return false;
    };
    return GoToLineAboveCommand;
}(go_to_line_vertically_command_base_1.GoToLineVerticallyCommandBase));
exports.GoToLineAboveCommand = GoToLineAboveCommand;
var ExtendGoToLineAboveCommand = (function (_super) {
    tslib_1.__extends(ExtendGoToLineAboveCommand, _super);
    function ExtendGoToLineAboveCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ExtendGoToLineAboveCommand.prototype.extendSelection = function () {
        return true;
    };
    ExtendGoToLineAboveCommand.prototype.getPositionForEdgeLine = function (layoutPosition) {
        return layoutPosition.getLogPosition(document_layout_details_level_1.DocumentLayoutDetailsLevel.Row);
    };
    ExtendGoToLineAboveCommand.prototype.canAdvanceToNextRow = function (_cellIterator) {
        return false;
    };
    ExtendGoToLineAboveCommand.prototype.canGoToNextTableRow = function (cellIterator) {
        return cellIterator.canAdvanceToAboveRow();
    };
    ExtendGoToLineAboveCommand.prototype.getCurrentTableRow = function (selectedCells) {
        var isForward = this.selection.forwardDirection;
        return isForward ? selectedCells[selectedCells.length - 1][selectedCells[selectedCells.length - 1].length - 1].parentRow : selectedCells[0][0].parentRow;
    };
    ExtendGoToLineAboveCommand.prototype.checkTableRowIndex = function (rowIndex, _length) {
        if (_length === void 0) { _length = 0; }
        return rowIndex > -1 && rowIndex != 0;
    };
    ExtendGoToLineAboveCommand.prototype.getNextTableRow = function (table, rowIndex) {
        return table.rows[rowIndex - 1];
    };
    ExtendGoToLineAboveCommand.prototype.performSelectionOnTheLastTableRow = function (isForward, selectedCells) {
        if (!isForward) {
            var table = selectedCells[0][0].parentRow.parentTable;
            var lastSelectedCell_1 = selectedCells[selectedCells.length - 1][selectedCells[selectedCells.length - 1].length - 1];
            var firstRowIndex = search_1.SearchUtils.binaryIndexOf(table.rows, function (row) { return row.getStartPosition() - lastSelectedCell_1.parentRow.getStartPosition(); });
            var lastRowIndex = 0;
            this.selectTableCellsRange({
                firstCell: table.rows[firstRowIndex].cells[table.rows[firstRowIndex].cells.length - 1],
                lastCell: table.rows[lastRowIndex].cells[0]
            });
        }
    };
    return ExtendGoToLineAboveCommand;
}(GoToLineAboveCommand));
exports.ExtendGoToLineAboveCommand = ExtendGoToLineAboveCommand;
