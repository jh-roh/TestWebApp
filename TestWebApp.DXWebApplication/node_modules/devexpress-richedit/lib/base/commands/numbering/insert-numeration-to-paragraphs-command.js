"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InsertNumerationToParagraphsCommand = void 0;
var tslib_1 = require("tslib");
var numbering_list_1 = require("../../../core/model/numbering-lists/numbering-list");
var list_1 = require("@devexpress/utils/lib/utils/list");
var command_states_1 = require("../command-states");
var numbering_list_command_base_1 = require("./numbering-list-command-base");
var InsertNumerationToParagraphsCommand = (function (_super) {
    tslib_1.__extends(InsertNumerationToParagraphsCommand, _super);
    function InsertNumerationToParagraphsCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    InsertNumerationToParagraphsCommand.prototype.getState = function (options) {
        if (options === void 0) { options = this.convertToCommandOptions(undefined); }
        return new command_states_1.IntervalCommandStateEx(this.isEnabled(), list_1.ListUtils.deepCopy(options.intervalsInfo.intervals));
    };
    InsertNumerationToParagraphsCommand.prototype.executeCore = function (_state, options) {
        this.abstractNumberingList = options.param;
        var paragraphIndices = options.subDocument.getParagraphIndicesByIntervals(options.intervalsInfo.intervals);
        this.history.beginTransaction();
        this.insertNumeration(options.param, options.subDocument, paragraphIndices);
        this.history.endTransaction();
        return true;
    };
    InsertNumerationToParagraphsCommand.prototype.insertNumeration = function (numberingList, subDocument, paragraphIndices) {
        var paragraphsLayoutPositions = this.getParagraphsLayoutPositions(paragraphIndices, subDocument);
        var targetListIndex;
        if (numberingList instanceof numbering_list_1.AbstractNumberingList) {
            if (numberingList.getListType() == numbering_list_1.NumberingType.MultiLevel) {
                this.changeNumberingList(paragraphIndices, subDocument);
                return;
            }
            else {
                targetListIndex = this.createNewList(numberingList);
            }
        }
        else
            targetListIndex = this.control.modelManager.model.numberingLists.indexOf(numberingList);
        var paragraphsLevelIndices = this.getParagraphsLevelIndices(paragraphIndices, paragraphsLayoutPositions, false, targetListIndex, -1, subDocument);
        this.insertNumberingListCore(paragraphIndices, targetListIndex, paragraphsLevelIndices, paragraphsLayoutPositions, subDocument);
    };
    InsertNumerationToParagraphsCommand.prototype.getNumberingListType = function () {
        return this.abstractNumberingList.getListType();
    };
    return InsertNumerationToParagraphsCommand;
}(numbering_list_command_base_1.NumberingListCommandBaseBase));
exports.InsertNumerationToParagraphsCommand = InsertNumerationToParagraphsCommand;
