"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TxtImporter = void 0;
var document_importer_errors_1 = require("../core/formats/document-importer-errors");
var images_import_1 = require("../core/formats/utils/images-import");
var creator_1 = require("../core/model/creator/creator");
var options_1 = require("../core/model/creator/options");
var check_all_1 = require("../core/model/model-checks/check-all");
var paragraph_1 = require("../core/model/paragraph/paragraph");
var rich_utils_1 = require("../core/model/rich-utils");
var simple_runs_1 = require("../core/model/runs/simple-runs");
var text_run_1 = require("../core/model/runs/text-run");
var properties_bundle_1 = require("../core/rich-utils/properties-bundle");
var list_1 = require("@devexpress/utils/lib/utils/list");
var TxtImporter = (function () {
    function TxtImporter() {
    }
    TxtImporter.prototype.importFromFile = function (blob, modelOptions, callback, reject) {
        var _this = this;
        this.reject = reject;
        this.createModel(modelOptions);
        var reader = new FileReader();
        reader.onload = function () {
            _this.importFromString(reader.result, modelOptions, callback, reject);
        };
        reader.onerror = function (_ev) {
            _this.reject(document_importer_errors_1.DocumentImporterErrors.TxtFileReaderError);
        };
        reader.readAsText(blob);
    };
    TxtImporter.prototype.importFromString = function (text, modelOptions, callback, reject, charPropsBundle, parPropsBundle) {
        this.createModel(modelOptions);
        try {
            this.fillModel(this.model, text, charPropsBundle, parPropsBundle);
            if (!new check_all_1.ModelChecker(this.model).checkAll())
                throw new Error();
        }
        catch (err) {
            reject(document_importer_errors_1.DocumentImporterErrors.TxtImportError);
            return;
        }
        callback(this.model, this.formatImagesImporter);
    };
    TxtImporter.prototype.createModel = function (modelOptions) {
        var options = new options_1.ModelCreatorOptions();
        options.addParagraph = false;
        this.formatImagesImporter = new images_import_1.FormatImagesImporter();
        this.model = new creator_1.ModelCreator(options).createModel(modelOptions).fillModel();
    };
    TxtImporter.splitByLines = function (text) {
        return text ? text.split(/\r\n|\r|\n/) : [''];
    };
    TxtImporter.prototype.fillModel = function (model, text, charPropsBundle, parPropsBundle) {
        var lines = TxtImporter.splitByLines(text);
        var sd = model.mainSubDocument;
        var runs = sd.chunks[0].textRuns;
        var defCharStyle = this.model.stylesManager.getDefaultCharacterStyle();
        var defParStyle = this.model.stylesManager.getDefaultParagraphStyle();
        var defCharProps = model.cache.maskedCharacterPropertiesCache.getItem(creator_1.ModelCreator.createTemplateCharProps(model));
        var defParProps = model.cache.maskedParagraphPropertiesCache.getItem(creator_1.ModelCreator.createTemplateParProps());
        if (charPropsBundle) {
            defCharStyle = charPropsBundle.style;
            defCharProps = charPropsBundle.props;
        }
        else {
            defCharStyle = this.model.stylesManager.getDefaultCharacterStyle();
            defCharProps = model.cache.maskedCharacterPropertiesCache.getItem(creator_1.ModelCreator.createTemplateCharProps(model));
        }
        if (parPropsBundle) {
            defParStyle = parPropsBundle.style;
            defParProps = parPropsBundle.props;
        }
        else {
            defParStyle = this.model.stylesManager.getDefaultParagraphStyle();
            defParProps = model.cache.maskedParagraphPropertiesCache.getItem(creator_1.ModelCreator.createTemplateParProps());
        }
        var parStartPos = 0;
        lines.forEach(function (line) {
            var par = new paragraph_1.Paragraph(sd, sd.positionManager.registerPosition(parStartPos), 0, defParStyle, defParProps);
            sd.paragraphs.push(par);
            var textLen = line.length;
            if (textLen)
                runs.push(new text_run_1.TextRun(parStartPos, textLen, par, new properties_bundle_1.MaskedCharacterPropertiesBundle(defCharProps, defCharStyle)));
            runs.push(new simple_runs_1.ParagraphRun(parStartPos + textLen, par, new properties_bundle_1.MaskedCharacterPropertiesBundle(defCharProps, defCharStyle)));
            par.length = 1 + textLen;
            parStartPos += par.length;
        });
        sd.chunks[0].textBuffer = lines.join(rich_utils_1.RichUtils.specialCharacters.ParagraphMark) + rich_utils_1.RichUtils.specialCharacters.ParagraphMark;
        model.sections[0].setLength(sd, list_1.ListUtils.last(sd.paragraphs).getEndPosition());
    };
    return TxtImporter;
}());
exports.TxtImporter = TxtImporter;
