"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KeyCode = exports.PrintMode = exports.FieldName = exports.SubDocumentBase = exports.DocumentProcessorBase = exports.DocumentProcessor = exports.SpellCheckerOptions = exports.RangePermissionOptions = exports.AuthenticationOptions = exports.MailMergeOptions = exports.LoadingPanel = exports.Font = exports.DocumentFormat = exports.TableRow = exports.TableCell = exports.Hyperlink = exports.UpdateFieldsOptions = exports.Field = exports.BookmarkCollectionBase = exports.RichEdit = exports.RichEditDocumentBase = exports.ShortcutOptions = exports.SubDocumentCollectionBase = exports.Section = exports.Table = exports.PaperSize = exports.BookmarkBase = exports.Bookmark = exports.SubDocument = exports.SectionBreakType = exports.HeaderFooterType = exports.SubDocumentType = exports.Size = exports.Margins = exports.Paragraph = exports.ParagraphProperties = exports.ParagraphFirstLineIndent = exports.ParagraphLineSpacingType = exports.ParagraphAlignment = exports.List = exports.ListLevelSettings = exports.ListLevelFormat = exports.ListLevelNumberAlignment = exports.ListType = exports.Interval = exports.HyperlinkInfo = exports.CharacterPropertiesScript = exports.CharacterProperties = exports.MergeMode = exports.ViewType = void 0;
exports.Characters = exports.Utils = exports.ContextMenuItem = exports.ImageIterator = exports.Images = exports.Image = exports.InlineImage = exports.FloatingImage = exports.VerticalRelativePosition = exports.VerticalAlignedPosition = exports.VerticalAbsolutePosition = exports.HorizontalRelativePosition = exports.HorizontalAlignedPosition = exports.HorizontalAbsolutePosition = exports.FloatingObjectVerticalPositionType = exports.FloatingObjectVerticalAlignment = exports.FloatingObjectVerticalAnchorElement = exports.FloatingObjectHorizontalPositionType = exports.FloatingObjectHorizontalAnchorElement = exports.FloatingObjectHorizontalAlignment = exports.WrapSide = exports.WrapType = exports.ContextMenuCommandId = exports.FloatingObjectsFormatTabCommandId = exports.TableLayoutTabCommandId = exports.TableDesignTabCommandId = exports.HeaderAndFooterTabCommandId = exports.ViewTabCommandId = exports.MailMergeTabCommandId = exports.ReferencesTabCommandId = exports.PageLayoutTabCommandId = exports.InsertTabCommandId = exports.HomeTabCommandId = exports.FileTabCommandId = exports.Paddings = exports.RangePermission = exports.Events = void 0;
var tslib_1 = require("tslib");
var document_1 = require("../../base-api/document");
var history_1 = require("../../base-api/history");
var key_code_1 = require("../../base-api/key-code");
Object.defineProperty(exports, "KeyCode", { enumerable: true, get: function () { return key_code_1.KeyCode; } });
var layout_api_1 = require("../../base-api/layout-api");
var loading_panel_1 = require("../../base-api/loading-panel");
Object.defineProperty(exports, "LoadingPanel", { enumerable: true, get: function () { return loading_panel_1.LoadingPanelApi; } });
var selection_api_1 = require("../../base-api/selection-api");
var sub_document_1 = require("../../base-api/sub-document");
Object.defineProperty(exports, "SubDocumentBase", { enumerable: true, get: function () { return sub_document_1.SubDocumentBaseApi; } });
var utils_1 = require("../../base-utils/utils");
var client_command_1 = require("../../base/commands/client-command");
var assign_shortcut_command_1 = require("../../base/commands/shortcuts/assign-shortcut-command");
var i_rich_edit_core_1 = require("../../base/interfaces/i-rich-edit-core");
var document_format_1 = require("../../core/document-format");
var base64_1 = require("@devexpress/utils/lib/utils/base64");
var common_1 = require("@devexpress/utils/lib/utils/common");
var file_1 = require("@devexpress/utils/lib/utils/file");
var key_1 = require("@devexpress/utils/lib/utils/key");
var mime_type_1 = require("@devexpress/utils/lib/utils/mime-type");
var docvar_args_1 = require("../../document-processor/docvar-args");
var processor_1 = require("../../document-processor/public/processor");
Object.defineProperty(exports, "DocumentProcessorBase", { enumerable: true, get: function () { return processor_1.DocumentProcessorBaseApi; } });
var field_1 = require("../../model-api/field");
Object.defineProperty(exports, "FieldName", { enumerable: true, get: function () { return field_1.FieldNameApi; } });
var model_font_1 = require("../../model-api/fonts/model-font");
Object.defineProperty(exports, "Font", { enumerable: true, get: function () { return model_font_1.ModelFontApi; } });
var enum_1 = require("../../model-api/formats/enum");
Object.defineProperty(exports, "DocumentFormat", { enumerable: true, get: function () { return enum_1.DocumentFormatApi; } });
var exporter_1 = require("../../model-api/formats/exporter");
var range_permission_1 = require("../../model-api/range-permission");
Object.defineProperty(exports, "RangePermission", { enumerable: true, get: function () { return range_permission_1.RangePermissionApi; } });
var unit_converter_1 = require("../../model-api/unit-converter");
var pdf_1 = require("../../pdf/api/pdf");
var client_rich_edit_1 = require("../client-rich-edit");
var download_document_command_1 = require("../commands/download-document-command");
var export_document_command_1 = require("../commands/export-document-command");
var mail_merge_command_1 = require("../commands/mail-merge-command");
var open_document_command_1 = require("../commands/open-document-command");
var authentication_options_1 = require("./api/authentication-options");
Object.defineProperty(exports, "AuthenticationOptions", { enumerable: true, get: function () { return authentication_options_1.AuthenticationOptionsApi; } });
var mail_merge_options_1 = require("./api/mail-merge-options");
Object.defineProperty(exports, "MailMergeOptions", { enumerable: true, get: function () { return mail_merge_options_1.MailMergeOptionsApi; } });
var range_permission_options_1 = require("./api/range-permission-options");
Object.defineProperty(exports, "RangePermissionOptions", { enumerable: true, get: function () { return range_permission_options_1.RangePermissionOptionsApi; } });
var simple_view_1 = require("./api/simple-view");
Object.defineProperty(exports, "Paddings", { enumerable: true, get: function () { return simple_view_1.Paddings; } });
var spell_checker_options_1 = require("./api/spell-checker-options");
Object.defineProperty(exports, "SpellCheckerOptions", { enumerable: true, get: function () { return spell_checker_options_1.SpellCheckerOptionsApi; } });
var client_events_1 = require("./client-events");
Object.defineProperty(exports, "Events", { enumerable: true, get: function () { return client_events_1.Events; } });
var commands_1 = require("./commands/commands");
var enum_2 = require("./commands/enum");
Object.defineProperty(exports, "ContextMenuCommandId", { enumerable: true, get: function () { return enum_2.ContextMenuCommandId; } });
Object.defineProperty(exports, "FileTabCommandId", { enumerable: true, get: function () { return enum_2.FileTabCommandId; } });
Object.defineProperty(exports, "FloatingObjectsFormatTabCommandId", { enumerable: true, get: function () { return enum_2.FloatingObjectsFormatTabCommandId; } });
Object.defineProperty(exports, "HeaderAndFooterTabCommandId", { enumerable: true, get: function () { return enum_2.HeaderAndFooterTabCommandId; } });
Object.defineProperty(exports, "HomeTabCommandId", { enumerable: true, get: function () { return enum_2.HomeTabCommandId; } });
Object.defineProperty(exports, "InsertTabCommandId", { enumerable: true, get: function () { return enum_2.InsertTabCommandId; } });
Object.defineProperty(exports, "MailMergeTabCommandId", { enumerable: true, get: function () { return enum_2.MailMergeTabCommandId; } });
Object.defineProperty(exports, "PageLayoutTabCommandId", { enumerable: true, get: function () { return enum_2.PageLayoutTabCommandId; } });
Object.defineProperty(exports, "ReferencesTabCommandId", { enumerable: true, get: function () { return enum_2.ReferencesTabCommandId; } });
Object.defineProperty(exports, "TableDesignTabCommandId", { enumerable: true, get: function () { return enum_2.TableDesignTabCommandId; } });
Object.defineProperty(exports, "TableLayoutTabCommandId", { enumerable: true, get: function () { return enum_2.TableLayoutTabCommandId; } });
Object.defineProperty(exports, "ViewTabCommandId", { enumerable: true, get: function () { return enum_2.ViewTabCommandId; } });
var menu_1 = require("./context-menu/menu");
var document_processor_1 = require("./document-processor");
Object.defineProperty(exports, "DocumentProcessor", { enumerable: true, get: function () { return document_processor_1.DocumentProcessorApi; } });
var settings_1 = require("./nusa/settings");
var utils_2 = require("./utils");
var RichEditPublic = (function () {
    function RichEditPublic(htmlElement, options) {
        var _this = this;
        this._native = new client_rich_edit_1.ClientRichEdit(htmlElement, options, this);
        this.document = new document_1.RichEditDocumentBaseApi(this._native.core);
        this.selection = new selection_api_1.RichEditSelectionApi(this._native.core);
        this.layout = new layout_api_1.RichEditLayoutApi(this._native.core);
        this.history = new history_1.HistoryApi(this._native.core);
        this.unitConverter = new unit_converter_1.UnitConverterApi();
        this.mailMergeOptions = new mail_merge_options_1.MailMergeOptionsApi(this._native);
        this.authenticationOptions = new authentication_options_1.AuthenticationOptionsApi(this._native);
        this.simpleViewSettings = new simple_view_1.SimpleViewSettings(this._native);
        this.contextMenu = new menu_1.ContextMenuRuntime(this._native);
        this.rangePermissionOptions = new range_permission_options_1.RangePermissionOptionsApi(this._native);
        this.nusaSettings = new settings_1.NusaSettings(this._native);
        this.spellCheckerOptions = new spell_checker_options_1.SpellCheckerOptionsApi(this._native.core);
        this._native.allowDocumentLoadedEventCall = false;
        var initialDoc = this._native.document;
        var afterDocumentOpened = function (openDocCallback) {
            if (_this.isDisposed)
                return;
            if (_this._native.onInit) {
                var initFunc = common_1.isString(_this._native.onInit) ? utils_1.convertToFunction(_this._native.onInit) : _this._native.onInit;
                initFunc(_this, new docvar_args_1.EventArgs());
            }
            openDocCallback();
            _this._native.allowDocumentLoadedEventCall = true;
            if (!_this._native.core.activeDocumentImporter)
                _this._native.raiseDocumentLoaded();
            _this._native.activeContextTabManager.forbidChangeActiveTabIndex = false;
        };
        if (initialDoc && common_1.isDefined(initialDoc.content)) {
            var onDocumentLoaded_1 = common_1.isDefined(initialDoc.onLoaded) ?
                (common_1.isString(initialDoc.onLoaded) ? utils_1.convertToFunction(initialDoc.onLoaded) : initialDoc.onLoaded) :
                function () { };
            this.openDocument(initialDoc.content, initialDoc.name, initialDoc.format, function (success) {
                afterDocumentOpened(function () { return onDocumentLoaded_1(success); });
            });
        }
        else {
            this.newDocument();
            afterDocumentOpened(function () { });
        }
    }
    Object.defineProperty(RichEditPublic.prototype, "events", {
        get: function () { return this._native.events; },
        enumerable: false,
        configurable: true
    });
    RichEditPublic.prototype.exportToBase64 = function (callback, documentFormat) {
        var format = common_1.isDefined(documentFormat) ? documentFormat : this._native.core.getExportDocumentFormat();
        exporter_1.exportModelToBase64(this._native.core.modelManager.modelManipulator, format, callback);
    };
    RichEditPublic.prototype.exportToBlob = function (callback, documentFormat) {
        var format = common_1.isDefined(documentFormat) ? documentFormat : this._native.core.getExportDocumentFormat();
        exporter_1.exportModelToBlob(this._native.core.modelManager.modelManipulator, format, callback);
    };
    RichEditPublic.prototype.exportToArrayBuffer = function (callback, documentFormat) {
        this.exportToBlob(function (blob) {
            var reader = new FileReader();
            reader.onloadend = function () { return callback(reader.result); };
            reader.readAsArrayBuffer(blob);
        }, documentFormat);
    };
    RichEditPublic.prototype.exportToFile = function (callback, documentFormat) {
        var format = common_1.isDefined(documentFormat) ? documentFormat : this._native.core.getExportDocumentFormat();
        var mimeType = '';
        switch (format) {
            case document_format_1.DocumentFormat.Rtf:
                mimeType = mime_type_1.RtfMimeType;
                break;
            case document_format_1.DocumentFormat.OpenXml:
                mimeType = mime_type_1.OpenXmlMimeType;
                break;
            case document_format_1.DocumentFormat.PlainText:
                mimeType = mime_type_1.PlainTextMimeType;
                break;
        }
        var fileName = open_document_command_1.OpenDocumentCommand.getFileNameWithoutExtension(this.documentName, format);
        var extension = utils_2.Utils.documentFormatToExtension(format);
        exporter_1.exportModelToBlob(this._native.core.modelManager.modelManipulator, format, function (blob) {
            return callback(file_1.FileUtils.createFile([blob], fileName + extension, { type: mimeType }));
        });
    };
    RichEditPublic.prototype.exportToPdf = function (documentName, options) {
        var _this = this;
        var core = this._native.core;
        pdf_1.pdfExport(core, function (blob, stream) {
            base64_1.Base64Utils.fromBlobAsArrayBuffer(blob, function (base64) {
                var handled = _this._native.raisePdfExporting(base64, blob, stream, false);
                var exportUrl = core.modelManager.richOptions.pdf.exportUrl;
                if (!handled && exportUrl)
                    _this._native.sendExportPdfRequest(base64, _this._native.core.documentInfo.getFileNameForDownload(documentName), exportUrl);
            });
        }, options);
    };
    RichEditPublic.prototype.downloadPdf = function (documentName, options) {
        pdf_1.downloadPdf(this._native.core, this._native.core.documentInfo.getFileNameForDownload(documentName), options);
    };
    RichEditPublic.prototype.adjust = function () {
        this._native.adjustControl();
    };
    Object.defineProperty(RichEditPublic.prototype, "isDocumentImported", {
        get: function () {
            return !this._native.core.activeDocumentImporter;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RichEditPublic.prototype, "fullScreen", {
        get: function () {
            return this._native.isInFullScreenMode;
        },
        set: function (value) {
            var command = this._native.core.commandManager.getCommand(client_command_1.RichEditClientCommand.FullScreen);
            command.execute(true, value);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RichEditPublic.prototype, "viewType", {
        get: function () {
            return this._native.core.innerClientProperties.viewsSettings.viewType;
        },
        set: function (type) {
            var command = this._native.core.commandManager.getCommand(client_command_1.RichEditClientCommand.ChangeViewType);
            command.execute(true, type);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RichEditPublic.prototype, "readOnly", {
        get: function () {
            return this._native.core.readOnly == i_rich_edit_core_1.ReadOnlyMode.Persistent;
        },
        set: function (value) {
            if (this.readOnly != value) {
                this._native.core.readOnly = value ? i_rich_edit_core_1.ReadOnlyMode.Persistent : i_rich_edit_core_1.ReadOnlyMode.None;
                this._native.core.barHolder.updateItemsState();
                this._native.core.horizontalRulerControl.update();
                this._native.core.beginUpdate();
                var currState = this._native.core.innerClientProperties.showHiddenSymbols;
                var cmd = this._native.core.commandManager.getCommand(client_command_1.RichEditClientCommand.ToggleShowWhitespace);
                cmd.execute(this._native.core.commandManager.isPublicApiCall, !currState);
                cmd.execute(this._native.core.commandManager.isPublicApiCall, currState);
                this._native.core.endUpdate();
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RichEditPublic.prototype, "isDisposed", {
        get: function () {
            return !this._native.core;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RichEditPublic.prototype, "showHorizontalRuler", {
        get: function () {
            return this._native.core.horizontalRulerControl.getVisible();
        },
        set: function (value) {
            var command = this._native.core.commandManager.getCommand(client_command_1.RichEditClientCommand.ToggleShowHorizontalRuler);
            command.execute(true, value);
        },
        enumerable: false,
        configurable: true
    });
    RichEditPublic.prototype.focus = function () {
        this._native.core.focusManager.captureFocus();
    };
    Object.defineProperty(RichEditPublic.prototype, "fileName", {
        get: function () {
            return this._native.core.documentInfo.fileName;
        },
        set: function (name) {
            this._native.core.documentInfo.fileName = name;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RichEditPublic.prototype, "documentSaveFormat", {
        get: function () {
            return this._native.core.saveDocumentFormat;
        },
        set: function (format) {
            this._native.core.saveDocumentFormat = format;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RichEditPublic.prototype, "documentName", {
        get: function () {
            return this._native.core.documentInfo.fileName;
        },
        set: function (name) {
            this._native.core.documentInfo.fileName = name;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RichEditPublic.prototype, "documentFormat", {
        get: function () {
            return this._native.core.documentInfo.documentFormat;
        },
        set: function (format) {
            this._native.core.documentInfo.documentFormat = format;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RichEditPublic.prototype, "documentExtension", {
        get: function () {
            return utils_2.Utils.documentFormatToExtension(this._native.core.documentInfo.documentFormat);
        },
        set: function (filePath) {
            var docFormat = utils_2.Utils.getDocumentFormat(filePath);
            if (docFormat === null)
                console.warn("Error: unknown extension. richEdit.documentExtension = \"" + filePath + "\"");
            else
                this._native.core.documentInfo.documentFormat = docFormat;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RichEditPublic.prototype, "hasUnsavedChanges", {
        get: function () { return !this._native.documentSaved; },
        set: function (value) { this._native.documentSaved = !value; },
        enumerable: false,
        configurable: true
    });
    RichEditPublic.prototype.newDocument = function () {
        this._native.core.commandManager.getCommand(client_command_1.RichEditClientCommand.CreateNewDocumentLocally)
            .execute(true);
    };
    RichEditPublic.prototype.openDocument = function (fileContent, documentName, documentFormat, callback) {
        var fileInfo = common_1.isDefined(fileContent) ?
            new open_document_command_1.FileInfo(callback ? (function (success, _reason) { return callback(success); }) : null, fileContent, documentName, documentFormat) :
            null;
        this._native.core.commandManager.getCommand(client_command_1.RichEditClientCommand.OpenDocumentLocally)
            .execute(true, fileInfo);
    };
    RichEditPublic.prototype.saveDocument = function (documentFormat, reason, documentName) {
        var oldReadonly = this._native.core.readOnly;
        this._native.core.readOnly = i_rich_edit_core_1.ReadOnlyMode.None;
        this._native.core.commandManager.getCommand(client_command_1.RichEditClientCommand.ExportDocument)
            .execute(true, new export_document_command_1.ExportDocumentCommandOptions(documentFormat, reason, documentName));
        this._native.core.readOnly = oldReadonly;
    };
    RichEditPublic.prototype.mailMerge = function (callback, mergeMode, documentFormat, exportFrom, exportRecordsCount) {
        if (mergeMode === void 0) { mergeMode = MergeMode.NewParagraph; }
        if (documentFormat === void 0) { documentFormat = enum_1.DocumentFormatApi.OpenXml; }
        if (!this._native.rawDataSource) {
            console.warn('No data source');
            return;
        }
        var params = new mail_merge_command_1.MailMergeCommandParameters(callback, mergeMode, documentFormat, exportFrom, exportRecordsCount);
        this._native.core.commandManager.getCommand(client_command_1.RichEditClientCommand.MailMergeOnClient)
            .execute(true, params);
    };
    RichEditPublic.prototype.downloadDocument = function (documentFormat, documentName) {
        if (documentFormat === void 0) { documentFormat = enum_1.DocumentFormatApi.OpenXml; }
        this._native.core.commandManager.getCommand(client_command_1.RichEditClientCommand.DownloadDocumentLocally)
            .execute(true, new download_document_command_1.DownloadDocumentParameters(documentFormat, documentName));
    };
    RichEditPublic.prototype.printDocument = function (mode) {
        this._native.core.commandManager.getCommand(client_command_1.RichEditClientCommand.PrintDocumentOnClient).execute(true, mode);
    };
    RichEditPublic.prototype.assignShortcut = function (shortcut, callback) {
        this._native.core.commandManager.getCommand(client_command_1.RichEditClientCommand.AssignShortcut)
            .execute(true, new assign_shortcut_command_1.AssignShortcutCommandOptions(this._native.core, key_1.KeyUtils.getShortcutCode(shortcut.keyCode, shortcut.ctrl, shortcut.shift, shortcut.alt, shortcut.meta), callback));
    };
    Object.defineProperty(RichEditPublic.prototype, "printMode", {
        get: function () { return this._native.core.modelManager.richOptions.printing.mode; },
        set: function (val) { this._native.core.modelManager.richOptions.printing.mode = val; },
        enumerable: false,
        configurable: true
    });
    RichEditPublic.prototype.updateRibbon = function (callback) {
        var oldRibbon = this._native.lastRibbonSettings;
        var oldRibbonBar = this._native.barHolder.ribbon;
        if (oldRibbonBar)
            oldRibbon.activeTabIndex = oldRibbonBar.getActiveTabIndex();
        callback(oldRibbon);
        this._native.core.beginUpdate();
        this._native.initRibbon(oldRibbon, this._native.core.modelManager.richOptions.fonts);
        this.adjust();
        this._native.core.endUpdate();
        this._native.core.barHolder.updateItemsState();
    };
    RichEditPublic.prototype.beginUpdate = function () {
        this._native.core.beginUpdate();
    };
    RichEditPublic.prototype.endUpdate = function () {
        this._native.core.endUpdate();
    };
    Object.defineProperty(RichEditPublic.prototype, "loadingPanel", {
        get: function () {
            return new loading_panel_1.LoadingPanelApi(this._native.core);
        },
        enumerable: false,
        configurable: true
    });
    RichEditPublic.prototype.createDocumentProcessor = function (options) {
        if (options === void 0) { options = {}; }
        var modelManager = this._native.core.modelManager;
        var procOptions = modelManager.richOptions.clone();
        procOptions.spellChecker.isEnabled = false;
        var proc = new document_processor_1.DocumentProcessorApi(procOptions);
        if (options.cloneCurrentModel)
            proc._importInnerDocument(modelManager.model.clone());
        else
            proc._initByEmptyModel();
        return proc;
    };
    RichEditPublic.prototype.dispose = function () {
        this._native.dispose();
        this.nusaSettings.unregister();
    };
    RichEditPublic.prototype.executeCommand = function (commandId, parameter) {
        return commands_1.executeApiCommand(this._native.core.commandManager, commandId, parameter);
    };
    RichEditPublic.prototype.getCommandState = function (commandId) {
        var _a;
        return (_a = commands_1.getApiCommandState(this._native.core.commandManager, commandId)) !== null && _a !== void 0 ? _a : new commands_1.CommandState(false, false);
    };
    RichEditPublic.prototype.setCommandEnabled = function (command, enabled) {
        var coreCommandId = command;
        this._native.core.commandManager.setCommandEnabled(coreCommandId, enabled);
        this._native.core.barHolder.forceUpdate();
    };
    return RichEditPublic;
}());
exports.RichEdit = RichEditPublic;
var ViewType;
(function (ViewType) {
    ViewType[ViewType["Simple"] = 0] = "Simple";
    ViewType[ViewType["PrintLayout"] = 1] = "PrintLayout";
})(ViewType = exports.ViewType || (exports.ViewType = {}));
var MergeMode;
(function (MergeMode) {
    MergeMode[MergeMode["NewParagraph"] = 0] = "NewParagraph";
    MergeMode[MergeMode["NewSection"] = 1] = "NewSection";
})(MergeMode = exports.MergeMode || (exports.MergeMode = {}));
var PrintModeApi;
(function (PrintModeApi) {
    PrintModeApi[PrintModeApi["Html"] = 1] = "Html";
    PrintModeApi[PrintModeApi["Pdf"] = 2] = "Pdf";
})(PrintModeApi || (PrintModeApi = {}));
exports.PrintMode = PrintModeApi;
var character_properties_1 = require("../../model-api/character-properties");
Object.defineProperty(exports, "CharacterProperties", { enumerable: true, get: function () { return character_properties_1.CharacterPropertiesApi; } });
Object.defineProperty(exports, "CharacterPropertiesScript", { enumerable: true, get: function () { return character_properties_1.CharacterPropertiesScriptApi; } });
var field_2 = require("../../model-api/field");
Object.defineProperty(exports, "HyperlinkInfo", { enumerable: true, get: function () { return field_2.HyperlinkInfoApi; } });
var interval_1 = require("../../model-api/interval");
Object.defineProperty(exports, "Interval", { enumerable: true, get: function () { return interval_1.IntervalApi; } });
var enums_1 = require("../../model-api/lists/enums");
Object.defineProperty(exports, "ListType", { enumerable: true, get: function () { return enums_1.ListTypeApi; } });
Object.defineProperty(exports, "ListLevelNumberAlignment", { enumerable: true, get: function () { return enums_1.ListLevelNumberAlignmentApi; } });
Object.defineProperty(exports, "ListLevelFormat", { enumerable: true, get: function () { return enums_1.ListLevelFormatApi; } });
var list_level_settings_1 = require("../../model-api/lists/list-level-settings");
Object.defineProperty(exports, "ListLevelSettings", { enumerable: true, get: function () { return list_level_settings_1.ListLevelSettingsApi; } });
var lists_1 = require("../../model-api/lists/lists");
Object.defineProperty(exports, "List", { enumerable: true, get: function () { return lists_1.ListApi; } });
var paragraph_1 = require("../../model-api/paragraph");
Object.defineProperty(exports, "ParagraphAlignment", { enumerable: true, get: function () { return paragraph_1.ParagraphAlignmentApi; } });
Object.defineProperty(exports, "ParagraphLineSpacingType", { enumerable: true, get: function () { return paragraph_1.ParagraphLineSpacingTypeApi; } });
Object.defineProperty(exports, "ParagraphFirstLineIndent", { enumerable: true, get: function () { return paragraph_1.ParagraphFirstLineIndentApi; } });
Object.defineProperty(exports, "ParagraphProperties", { enumerable: true, get: function () { return paragraph_1.ParagraphPropertiesApi; } });
Object.defineProperty(exports, "Paragraph", { enumerable: true, get: function () { return paragraph_1.ParagraphApi; } });
var size_1 = require("../../model-api/size");
Object.defineProperty(exports, "Margins", { enumerable: true, get: function () { return size_1.MarginsApi; } });
Object.defineProperty(exports, "Size", { enumerable: true, get: function () { return size_1.SizeApi; } });
var sub_document_2 = require("../../model-api/sub-document");
Object.defineProperty(exports, "SubDocumentType", { enumerable: true, get: function () { return sub_document_2.SubDocumentTypeApi; } });
Object.defineProperty(exports, "HeaderFooterType", { enumerable: true, get: function () { return sub_document_2.HeaderFooterTypeApi; } });
Object.defineProperty(exports, "SectionBreakType", { enumerable: true, get: function () { return sub_document_2.SectionBreakTypeApi; } });
Object.defineProperty(exports, "SubDocument", { enumerable: true, get: function () { return sub_document_2.SubDocumentApi; } });
var bookmark_1 = require("../../model-api/bookmark");
Object.defineProperty(exports, "Bookmark", { enumerable: true, get: function () { return bookmark_1.BookmarkApi; } });
var bookmark_2 = require("../../base-api/bookmark");
Object.defineProperty(exports, "BookmarkBase", { enumerable: true, get: function () { return bookmark_2.BookmarkBaseApi; } });
var section_1 = require("../../model-api/section");
Object.defineProperty(exports, "PaperSize", { enumerable: true, get: function () { return section_1.PaperSizeApi; } });
var table_1 = require("../../model-api/table/table");
Object.defineProperty(exports, "Table", { enumerable: true, get: function () { return table_1.TableApi; } });
var section_2 = require("../../model-api/section");
Object.defineProperty(exports, "Section", { enumerable: true, get: function () { return section_2.SectionApi; } });
var sub_documents_collection_1 = require("../../base-api/collections/sub-documents-collection");
Object.defineProperty(exports, "SubDocumentCollectionBase", { enumerable: true, get: function () { return sub_documents_collection_1.SubDocumentCollectionBaseApi; } });
var key_code_2 = require("../../base-api/key-code");
Object.defineProperty(exports, "ShortcutOptions", { enumerable: true, get: function () { return key_code_2.ShortcutOptions; } });
var document_2 = require("../../model-api/document");
Object.defineProperty(exports, "RichEditDocumentBase", { enumerable: true, get: function () { return document_2.RichEditDocumentApi; } });
var bookmark_collection_1 = require("../../base-api/collections/bookmark-collection");
Object.defineProperty(exports, "BookmarkCollectionBase", { enumerable: true, get: function () { return bookmark_collection_1.BookmarkCollectionBaseApi; } });
var field_3 = require("../../model-api/field");
Object.defineProperty(exports, "Field", { enumerable: true, get: function () { return field_3.FieldApi; } });
var field_collection_1 = require("../../model-api/collections/field-collection");
Object.defineProperty(exports, "UpdateFieldsOptions", { enumerable: true, get: function () { return field_collection_1.UpdateFieldsOptionsApi; } });
var field_4 = require("../../model-api/field");
Object.defineProperty(exports, "Hyperlink", { enumerable: true, get: function () { return field_4.HyperlinkApi; } });
var table_cell_1 = require("../../model-api/table/table-cell");
Object.defineProperty(exports, "TableCell", { enumerable: true, get: function () { return table_cell_1.TableCellApi; } });
var table_row_1 = require("../../model-api/table/table-row");
Object.defineProperty(exports, "TableRow", { enumerable: true, get: function () { return table_row_1.TableRowApi; } });
var image_enums_1 = require("../../model-api/images/image-enums");
Object.defineProperty(exports, "WrapType", { enumerable: true, get: function () { return image_enums_1.WrapTypeApi; } });
Object.defineProperty(exports, "WrapSide", { enumerable: true, get: function () { return image_enums_1.WrapSideApi; } });
Object.defineProperty(exports, "FloatingObjectHorizontalAlignment", { enumerable: true, get: function () { return image_enums_1.FloatingObjectHorizontalAlignmentApi; } });
Object.defineProperty(exports, "FloatingObjectHorizontalAnchorElement", { enumerable: true, get: function () { return image_enums_1.FloatingObjectHorizontalAnchorElementApi; } });
Object.defineProperty(exports, "FloatingObjectHorizontalPositionType", { enumerable: true, get: function () { return image_enums_1.FloatingObjectHorizontalPositionTypeApi; } });
Object.defineProperty(exports, "FloatingObjectVerticalAnchorElement", { enumerable: true, get: function () { return image_enums_1.FloatingObjectVerticalAnchorElementApi; } });
Object.defineProperty(exports, "FloatingObjectVerticalAlignment", { enumerable: true, get: function () { return image_enums_1.FloatingObjectVerticalAlignmentApi; } });
Object.defineProperty(exports, "FloatingObjectVerticalPositionType", { enumerable: true, get: function () { return image_enums_1.FloatingObjectVerticalPositionTypeApi; } });
var image_interfaces_1 = require("../../model-api/images/image-interfaces");
Object.defineProperty(exports, "HorizontalAbsolutePosition", { enumerable: true, get: function () { return image_interfaces_1.HorizontalAbsolutePositionApi; } });
Object.defineProperty(exports, "HorizontalAlignedPosition", { enumerable: true, get: function () { return image_interfaces_1.HorizontalAlignedPositionApi; } });
Object.defineProperty(exports, "HorizontalRelativePosition", { enumerable: true, get: function () { return image_interfaces_1.HorizontalRelativePositionApi; } });
Object.defineProperty(exports, "VerticalAbsolutePosition", { enumerable: true, get: function () { return image_interfaces_1.VerticalAbsolutePositionApi; } });
Object.defineProperty(exports, "VerticalAlignedPosition", { enumerable: true, get: function () { return image_interfaces_1.VerticalAlignedPositionApi; } });
Object.defineProperty(exports, "VerticalRelativePosition", { enumerable: true, get: function () { return image_interfaces_1.VerticalRelativePositionApi; } });
var floating_image_1 = require("../../model-api/images/floating-image");
Object.defineProperty(exports, "FloatingImage", { enumerable: true, get: function () { return floating_image_1.FloatingImageApi; } });
var inline_image_1 = require("../../model-api/images/inline-image");
Object.defineProperty(exports, "InlineImage", { enumerable: true, get: function () { return inline_image_1.InlineImageApi; } });
var image_1 = require("../../model-api/images/image");
Object.defineProperty(exports, "Image", { enumerable: true, get: function () { return image_1.ImageApi; } });
var images_1 = require("../../model-api/images/images");
Object.defineProperty(exports, "Images", { enumerable: true, get: function () { return images_1.ImagesApi; } });
var image_iterator_1 = require("../../model-api/images/image-iterator");
Object.defineProperty(exports, "ImageIterator", { enumerable: true, get: function () { return image_iterator_1.ImageIteratorApi; } });
var item_1 = require("./context-menu/item");
Object.defineProperty(exports, "ContextMenuItem", { enumerable: true, get: function () { return item_1.ContextMenuItem; } });
var utils_3 = require("./utils");
Object.defineProperty(exports, "Utils", { enumerable: true, get: function () { return utils_3.Utils; } });
var characters_1 = require("./characters");
Object.defineProperty(exports, "Characters", { enumerable: true, get: function () { return characters_1.Characters; } });
tslib_1.__exportStar(require("./commands/enum"), exports);
