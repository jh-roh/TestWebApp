"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FullScreenHelper = void 0;
var attribute_utils_1 = require("../../base/rich-utils/attribute-utils");
var browser_1 = require("@devexpress/utils/lib/browser");
var attr_1 = require("@devexpress/utils/lib/utils/attr");
var dom_1 = require("@devexpress/utils/lib/utils/dom");
var FullScreenHelper = (function () {
    function FullScreenHelper(element) {
        this.fullScreenTempVars = {};
        this.zIndex = '1001';
        this.element = element;
    }
    Object.defineProperty(FullScreenHelper.prototype, "shouldChangeNativeFullscreen", {
        get: function () {
            return window.self !== window.top;
        },
        enumerable: false,
        configurable: true
    });
    FullScreenHelper.prototype.prepareFullScreenMode = function () {
        var mainElement = this.getMainElement();
        attribute_utils_1.AttributeUtils.changeElementStyleAttribute(mainElement, browser_1.Browser.IE ? "borderTopWidth" : "border-top-width", "0px");
        attribute_utils_1.AttributeUtils.changeElementStyleAttribute(mainElement, browser_1.Browser.IE ? "borderLeftWidth" : "border-left-width", "0px");
        attribute_utils_1.AttributeUtils.changeElementStyleAttribute(mainElement, browser_1.Browser.IE ? "borderRightWidth" : "border-right-width", "0px");
        attribute_utils_1.AttributeUtils.changeElementStyleAttribute(mainElement, browser_1.Browser.IE ? "borderBottomWidth" : "border-bottom-width", "0px");
        this.fullScreenTempVars.scrollTop = dom_1.DomUtils.getDocumentScrollTop();
        this.fullScreenTempVars.scrollLeft = dom_1.DomUtils.getDocumentScrollLeft();
        attribute_utils_1.AttributeUtils.changeElementStyleAttribute(mainElement, "position", "fixed");
        attribute_utils_1.AttributeUtils.changeElementStyleAttribute(mainElement, "top", "0px");
        attribute_utils_1.AttributeUtils.changeElementStyleAttribute(mainElement, "left", "0px");
        attribute_utils_1.AttributeUtils.changeElementStyleAttribute(mainElement, browser_1.Browser.IE ? "zIndex" : "z-index", this.zIndex);
        attribute_utils_1.AttributeUtils.changeElementStyleAttribute(document.documentElement, "position", "static");
        attribute_utils_1.AttributeUtils.changeElementStyleAttribute(document.documentElement, "overflow", "hidden");
        this.fullScreenTempVars.bodyMargin = document.body.style.margin;
        document.body.style.margin = "0";
        this.fullScreenTempVars.width = mainElement.style.width;
        this.fullScreenTempVars.height = mainElement.style.height;
        if (this.shouldChangeNativeFullscreen)
            this.requestFullScreen(document.body);
    };
    FullScreenHelper.prototype.setNormalMode = function () {
        if (this.shouldChangeNativeFullscreen)
            this.cancelFullScreen(document);
        var mainElement = this.getMainElement();
        attr_1.AttrUtils.restoreElementStyleAttribute(mainElement, "left");
        attr_1.AttrUtils.restoreElementStyleAttribute(mainElement, "top");
        attr_1.AttrUtils.restoreElementStyleAttribute(document.documentElement, "overflow");
        attr_1.AttrUtils.restoreElementStyleAttribute(document.documentElement, "position");
        attr_1.AttrUtils.restoreElementStyleAttribute(mainElement, browser_1.Browser.IE ? "zIndex" : "z-index");
        document.body.style.margin = this.fullScreenTempVars.bodyMargin;
        attr_1.AttrUtils.restoreElementStyleAttribute(mainElement, "position");
        attr_1.AttrUtils.restoreElementStyleAttribute(mainElement, browser_1.Browser.IE ? "borderTopWidth" : "border-top-width");
        attr_1.AttrUtils.restoreElementStyleAttribute(mainElement, browser_1.Browser.IE ? "borderLeftWidth" : "border-left-width");
        attr_1.AttrUtils.restoreElementStyleAttribute(mainElement, browser_1.Browser.IE ? "borderRightWidth" : "border-right-width");
        attr_1.AttrUtils.restoreElementStyleAttribute(mainElement, browser_1.Browser.IE ? "borderBottomWidth" : "border-bottom-width");
        this.setHeight(this.fullScreenTempVars.height);
        this.setWidth(this.fullScreenTempVars.width);
        document.documentElement.scrollTop = this.fullScreenTempVars.scrollTop;
        document.documentElement.scrollLeft = this.fullScreenTempVars.scrollLeft;
    };
    FullScreenHelper.prototype.getMainElement = function () {
        return this.element;
    };
    FullScreenHelper.prototype.setWidth = function (width) {
        var mainElement = this.getMainElement();
        var isNumber = !isNaN(parseFloat(width)) && isFinite(width);
        mainElement.style.width = isNumber ? width + "px" : width;
    };
    FullScreenHelper.prototype.setHeight = function (height) {
        var mainElement = this.getMainElement();
        var isNumber = !isNaN(parseFloat(height)) && isFinite(height);
        mainElement.style.height = isNumber ? height + "px" : height;
    };
    FullScreenHelper.prototype.requestFullScreen = function (element) {
        if (element.requestFullscreen)
            element.requestFullscreen();
        else if (element.mozRequestFullScreen)
            element.mozRequestFullScreen();
        else if (element.webkitRequestFullscreen)
            element.webkitRequestFullscreen();
        else if (element.msRequestFullscreen)
            element.msRequestFullscreen();
    };
    FullScreenHelper.prototype.cancelFullScreen = function (document) {
        if (document.webkitExitFullscreen)
            document.webkitExitFullscreen();
        else if (document.mozCancelFullScreen)
            document.mozCancelFullScreen();
        else if (document.msExitFullscreen)
            document.msExitFullscreen();
        else if (document.exitFullscreen)
            document.exitFullscreen();
    };
    return FullScreenHelper;
}());
exports.FullScreenHelper = FullScreenHelper;
