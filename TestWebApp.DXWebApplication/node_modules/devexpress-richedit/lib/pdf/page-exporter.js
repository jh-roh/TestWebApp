"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PdfLayoutPageExporter = void 0;
var layout_anchored_picture_box_1 = require("../core/layout/main-structures/layout-boxes/layout-anchored-picture-box");
var layout_box_1 = require("../core/layout/main-structures/layout-boxes/layout-box");
var color_1 = require("../core/model/color/color");
var unit_converter_1 = require("@devexpress/utils/lib/class/unit-converter");
var point_1 = require("@devexpress/utils/lib/geometry/point");
var color_2 = require("@devexpress/utils/lib/utils/color");
var number_1 = require("@devexpress/utils/lib/utils/map/number");
var page_area_exporter_1 = require("./page-area-exporter");
var PdfLayoutPageExporter = (function () {
    function PdfLayoutPageExporter(doc, textFontMapCache, measurer) {
        this.doc = doc;
        this.pageAreaExporter = new page_area_exporter_1.PdfLayoutPageAreaExporter(doc, textFontMapCache, measurer);
    }
    PdfLayoutPageExporter.prototype.export = function (page, anchorObjectsPositionInfo, pageColor) {
        this.doc.addPage(this.getPageOptions(page));
        var pos = new point_1.Point(page.x, page.y).applyConverter(unit_converter_1.UnitConverter.pixelsToPointsF);
        var size = page.createSize().applyConverter(unit_converter_1.UnitConverter.pixelsToPointsF);
        this.drawRect(pos, size, pageColor);
        var anchoredObjects = page.anchoredObjectHolder.getObjectsForRenderer(anchorObjectsPositionInfo, page.anchoredObjectHolder.objects);
        this.exportFloatingObjects(page, anchoredObjects, 0, page.renderLevelCalculator.headerFooterPageAreasLevel);
        this.exportHeaderFooter(page);
        this.exportFloatingObjects(page, anchoredObjects, page.renderLevelCalculator.headerFooterPageAreasLevel, page.renderLevelCalculator.mainPageAreaLevel);
        this.exportMainSubDocument(page);
        this.exportFloatingObjects(page, anchoredObjects, page.renderLevelCalculator.mainPageAreaLevel, anchoredObjects.length);
    };
    PdfLayoutPageExporter.prototype.exportFloatingObjects = function (page, sortedObjects, levelFrom, levelTo) {
        for (var i = levelFrom; i < levelTo && i < sortedObjects.length; i++) {
            var anchorObject = sortedObjects[i];
            this.doc.save();
            this.exportFloatingObject(page, anchorObject);
            this.doc.restore();
        }
    };
    PdfLayoutPageExporter.prototype.exportFloatingObject = function (page, anchorObject) {
        var pos = new point_1.Point(anchorObject.x, anchorObject.y).applyConverter(unit_converter_1.UnitConverter.pixelsToPointsF);
        var size = anchorObject.createSize().applyConverter(unit_converter_1.UnitConverter.pixelsToPointsF);
        var rotation = unit_converter_1.UnitConverter.radiansToDegrees(anchorObject.rotationInRadians);
        if (rotation)
            this.doc.rotate(rotation, { origin: [pos.x + size.width / 2, pos.y + size.height / 2] });
        if (anchorObject instanceof layout_anchored_picture_box_1.LayoutAnchoredPictureBox) {
            if (anchorObject.cacheInfo.isPdfCompatible())
                this.doc.image(anchorObject.cacheInfo.pdfCompatibleBase64, pos.x, pos.y, { fit: [size.width, size.height] });
        }
        else if (anchorObject.getType() == layout_box_1.LayoutBoxType.AnchorTextBox) {
            var textBox_1 = anchorObject;
            var pageArea = number_1.NumberMapUtils.elementBy(page.otherPageAreas, function (pageArea) { return pageArea.subDocument.id == textBox_1.internalSubDocId; });
            if (!pageArea)
                return;
            var shape = textBox_1.shape;
            this.drawRect(pos, size, shape.fillColor, shape.outlineColor, shape.outlineWidth);
            this.pageAreaExporter.export(pageArea, page.bottom, true);
        }
    };
    PdfLayoutPageExporter.prototype.drawRect = function (pos, size, fillColor, outlineColor, outlineWidth) {
        if (outlineColor === void 0) { outlineColor = color_1.ColorHelper.AUTOMATIC_COLOR; }
        if (outlineWidth === void 0) { outlineWidth = 0; }
        this.doc.save();
        if (fillColor != color_1.ColorHelper.AUTOMATIC_COLOR && color_1.ColorHelper.getCssStringInternal(fillColor) != 'transparent') {
            this.doc.rect(pos.x, pos.y, size.width, size.height);
            this.doc.fillOpacity(color_1.ColorHelper.getOpacity(fillColor));
            this.doc.fill(color_2.ColorUtils.colorToHash(fillColor));
        }
        if (outlineColor != color_1.ColorHelper.AUTOMATIC_COLOR && outlineWidth > 0)
            this.drawOutlineRect(pos, size, outlineWidth, outlineColor);
        this.doc.fillColor(color_2.ColorUtils.colorToHash(color_1.ColorHelper.AUTOMATIC_COLOR));
        this.doc.restore();
    };
    PdfLayoutPageExporter.prototype.drawOutlineRect = function (pos, size, outlineWidth, outlineColor) {
        this.doc.polygon([pos.x, pos.y], [pos.x + size.width, pos.y], [pos.x + size.width, pos.y + size.height], [pos.x, pos.y + size.height]);
        this.doc.lineWidth(unit_converter_1.UnitConverter.pixelsToPointsF(outlineWidth));
        this.doc.strokeOpacity(color_1.ColorHelper.getOpacity(outlineColor));
        this.doc.strokeColor(color_2.ColorUtils.colorToHash(outlineColor));
        this.doc.stroke();
    };
    PdfLayoutPageExporter.prototype.exportMainSubDocument = function (page) {
        var _this = this;
        page.mainSubDocumentPageAreas.forEach(function (pageArea) {
            return _this.pageAreaExporter.export(pageArea, page.bottom, false);
        });
    };
    PdfLayoutPageExporter.prototype.exportHeaderFooter = function (page) {
        var _this = this;
        number_1.NumberMapUtils.forEach(page.otherPageAreas, function (pageArea) {
            if (!pageArea.subDocument.isTextBox())
                _this.pageAreaExporter.export(pageArea, page.bottom, false);
        });
    };
    PdfLayoutPageExporter.prototype.getPageOptions = function (page) {
        var pageOptions = {};
        pageOptions.size = [unit_converter_1.UnitConverter.pixelsToPointsF(page.width) + 1, unit_converter_1.UnitConverter.pixelsToPointsF(page.height) + 1];
        pageOptions.margins = {
            top: 0,
            left: 0,
            bottom: 0,
            right: 0,
        };
        return pageOptions;
    };
    return PdfLayoutPageExporter;
}());
exports.PdfLayoutPageExporter = PdfLayoutPageExporter;
