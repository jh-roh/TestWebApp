"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RtfFieldImporter = void 0;
var tslib_1 = require("tslib");
var field_1 = require("../../../core/model/fields/field");
var rich_utils_1 = require("../../../core/model/rich-utils");
var simple_runs_1 = require("../../../core/model/runs/simple-runs");
var rtf_field_info_1 = require("../model/fields/rtf-field-info");
var importer_base_1 = require("./importer-base");
var RtfFieldImporter = (function (_super) {
    tslib_1.__extends(RtfFieldImporter, _super);
    function RtfFieldImporter(data) {
        var _this = _super.call(this, data) || this;
        _this.updateFieldsOnPaste = true;
        return _this;
    }
    Object.defineProperty(RtfFieldImporter.prototype, "fields", {
        get: function () { return this.data.positionStates.last.fields; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RtfFieldImporter.prototype, "currentField", {
        get: function () { return this.fields.last; },
        enumerable: false,
        configurable: true
    });
    RtfFieldImporter.prototype.startField = function () {
        this.fields.push(new rtf_field_info_1.RtfFieldInfo());
    };
    RtfFieldImporter.prototype.ensureStartMarkAdded = function () {
        if (this.currentField.startPos != -1)
            return;
        this.currentField.startPos = this.data.importers.character.logPosition;
        this.currentField.startRun = this.addMarkRun(simple_runs_1.FieldCodeStartRun, rich_utils_1.RichUtils.specialCharacters.FieldCodeStartRun);
    };
    RtfFieldImporter.prototype.ensureSeparatorMarkAdded = function () {
        if (this.currentField.separatorPos != -1)
            return;
        this.currentField.separatorPos = this.data.importers.character.logPosition;
        this.currentField.separatorRun = this.addMarkRun(simple_runs_1.FieldCodeEndRun, rich_utils_1.RichUtils.specialCharacters.SeparatorMark);
    };
    RtfFieldImporter.prototype.ensureEndMarkAdded = function () {
        if (this.currentField.endPos != -1)
            return;
        this.currentField.endRun = this.addMarkRun(simple_runs_1.FieldResultEndRun, rich_utils_1.RichUtils.specialCharacters.FieldResultEndRun);
        this.currentField.endPos = this.data.importers.character.logPosition;
    };
    RtfFieldImporter.prototype.addMarkRun = function (runConstr, text) {
        var charImporter = this.data.importers.character;
        var startRun = this.currentField.startRun;
        if (!startRun)
            return charImporter.addSimpleRun(runConstr, text, false);
        var run = new runConstr(charImporter.logPosition, this.data.importers.paragraph.paragraph, startRun.getCharPropsBundle(this.documentModel));
        return charImporter.addRun(run, text);
    };
    RtfFieldImporter.prototype.endField = function () {
        var fieldInfo = this.fields.last;
        if (fieldInfo.isShapeField) {
        }
        this.ensureStartMarkAdded();
        this.ensureSeparatorMarkAdded();
        this.ensureEndMarkAdded();
        this.createFieldWithResult(fieldInfo);
        this.fields.pop();
    };
    RtfFieldImporter.prototype.getFormattingSourceRun = function (_field) {
        return null;
    };
    RtfFieldImporter.prototype.setFieldRunFormatting = function (_fieldCodeStart, _sourceRun) {
    };
    RtfFieldImporter.prototype.calculateFieldIndex = function (fields, newFieldStartPosition) {
        for (var fieldIndex = fields.length - 1; fieldIndex >= 0; fieldIndex--) {
            if (fields[fieldIndex].getFieldStartPosition() < newFieldStartPosition) {
                return fieldIndex + 1;
            }
        }
        return 0;
    };
    RtfFieldImporter.prototype.createFieldWithResult = function (fieldInfo) {
        var sd = this.data.subDocument;
        var fieldIndex = this.calculateFieldIndex(sd.fields, fieldInfo.startPos);
        var field = new field_1.Field(sd.positionManager, fieldIndex, fieldInfo.startPos, fieldInfo.separatorPos, fieldInfo.endPos, fieldInfo.isCodeView, null);
        field_1.Field.addField(sd.fields, field);
    };
    RtfFieldImporter.prototype.processShapeFieldContentCore = function (drawingObjectRun, inlinePicture, _inlinePictureRunIndex) {
        if (drawingObjectRun == null || inlinePicture == null || !drawingObjectRun.Inline)
            return;
    };
    RtfFieldImporter.prototype.processMixedShapeFieldContent = function () {
        if (this.subDocument.chunks[0].textRuns.length < 4)
            return;
    };
    RtfFieldImporter.prototype.processShapeFieldContent = function () {
        if (this.subDocument.chunks[0].textRuns.length < 3)
            return;
    };
    RtfFieldImporter.prototype.pushState = function () {
    };
    RtfFieldImporter.prototype.popState = function () {
    };
    RtfFieldImporter.prototype.startImportSubDocument = function () {
    };
    RtfFieldImporter.prototype.finalizeSubDocument = function () {
    };
    return RtfFieldImporter;
}(importer_base_1.RtfBaseImporter));
exports.RtfFieldImporter = RtfFieldImporter;
