"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HangulDecoderHelper = void 0;
var list_1 = require("@devexpress/utils/lib/utils/list");
var number_1 = require("@devexpress/utils/lib/utils/map/number");
var specified_symbols_949_1 = require("./specified-symbols-949");
var HangulDecoderHelper = (function () {
    function HangulDecoderHelper() {
    }
    Object.defineProperty(HangulDecoderHelper, "cptable", {
        get: function () {
            if (!HangulDecoderHelper._cptable) {
                var data_1 = {};
                number_1.NumberMapUtils.forEach(specified_symbols_949_1.specified_949, function (value, key) {
                    list_1.ListUtils.forEach(value.split(''), function (char, index) {
                        data_1[key + index] = char;
                    });
                });
                HangulDecoderHelper._cptable = data_1;
            }
            return HangulDecoderHelper._cptable;
        },
        enumerable: false,
        configurable: true
    });
    HangulDecoderHelper.getChars = function (data) {
        var cpTable = HangulDecoderHelper.cptable;
        var result = [];
        var prefixToIndex = 33089;
        var step = 0;
        var length = data.length;
        for (var i = 0; i < length; i += step) {
            step = 2;
            var currentChar = void 0;
            if (i + 1 < length)
                currentChar = cpTable[(data[i].charCodeAt(0) << 8) + data[i + 1].charCodeAt(0) - prefixToIndex];
            if (!currentChar) {
                step = 1;
                currentChar = cpTable[data[i].charCodeAt(0) - prefixToIndex];
            }
            result.push(currentChar !== null && currentChar !== void 0 ? currentChar : data[i]);
        }
        return result;
    };
    return HangulDecoderHelper;
}());
exports.HangulDecoderHelper = HangulDecoderHelper;
