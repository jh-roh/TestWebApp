import { IHashBasedCacheType } from '../caches/hash-based-cache';
import { ColorHSL } from '../color/color-hsl';
import { ColorProvider } from '../color/color-provider';
import { DrawingColorType } from '../color/enums';
import { ScRGBColor } from '../color/sc-rgbcolor';
import { SchemeColorValues, SystemColorValues } from '../themes/enums';
export declare class DrawingColorModelInfo implements IHashBasedCacheType<DrawingColorModelInfo> {
    static empty: DrawingColorModelInfo;
    _colorType: DrawingColorType;
    _rgb: number;
    _systemColor: SystemColorValues;
    _schemeColor: SchemeColorValues;
    _preset: string;
    _scRgb: ScRGBColor;
    _hsl: ColorHSL;
    private hash;
    constructor();
    protected calculateHash(): number;
    getHashCode(): number;
    private setColorType;
    get colorType(): DrawingColorType;
    get rgb(): number;
    set rgb(value: number);
    get systemColor(): SystemColorValues;
    set systemColor(value: SystemColorValues);
    get schemeColor(): SchemeColorValues;
    set schemeColor(value: SchemeColorValues);
    get hsl(): ColorHSL;
    set hsl(value: ColorHSL);
    get preset(): string;
    set preset(value: string);
    get scRgb(): ScRGBColor;
    set scRgb(value: ScRGBColor);
    get isEmpty(): boolean;
    static createRGB(rgb: number): DrawingColorModelInfo;
    static createARGB(argb: number): DrawingColorModelInfo;
    static createSystem(systemColor: SystemColorValues): DrawingColorModelInfo;
    static createScheme(schemeColor: SchemeColorValues): DrawingColorModelInfo;
    static createPreset(preset: string): DrawingColorModelInfo;
    static createScRgb(scColor: ScRGBColor): DrawingColorModelInfo;
    static createHSL(hsl: ColorHSL): DrawingColorModelInfo;
    static sRgbToRgb(hexColor: string): number;
    private static systemColorTable;
    toRgb(colorProvider: ColorProvider, styleColor?: number): number;
    private getRgbFromPreset;
    private getRgbFromSystemColor;
    private getRgbFromSchemeColor;
    protected restoreDefaultValues(): void;
    clone(): DrawingColorModelInfo;
    copyFrom(value: DrawingColorModelInfo): void;
    equals(obj: DrawingColorModelInfo): boolean;
}
//# sourceMappingURL=drawing-color-model-info.d.ts.map