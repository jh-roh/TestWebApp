"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrdinalSwedishNumberConverter = exports.OrdinalRussianNumberConverter = exports.OrdinalUkrainianNumberConverter = exports.OrdinalPortugueseNumberConverter = exports.OrdinalSpanishNumberConverter = exports.OrdinalGreekNumberConverter = exports.OrdinalTurkishNumberConverter = exports.OrdinalItalianNumberConverter = exports.OrdinalGermanNumberConverter = exports.OrdinalFrenchNumberConverter = exports.OrdinalEnglishNumberConverter = exports.OrdinalLocalBasedNumberConverter = exports.OrdinalBasedNumberConverter = void 0;
var tslib_1 = require("tslib");
var constants_1 = require("@devexpress/utils/lib/constants");
var list_level_properties_1 = require("../numbering-lists/list-level-properties");
var OrdinalBasedNumberConverter = (function () {
    function OrdinalBasedNumberConverter() {
        this.maxValue = constants_1.Constants.MAX_SAFE_INTEGER;
        this.minValue = constants_1.Constants.MIN_SAFE_INTEGER;
    }
    OrdinalBasedNumberConverter.prototype.convertNumber = function (value) {
        if (value >= this.minValue && value <= this.maxValue) {
            return this.convertNumberCore(value);
        }
        throw new Error("InvalidNumberConverterValue");
    };
    return OrdinalBasedNumberConverter;
}());
exports.OrdinalBasedNumberConverter = OrdinalBasedNumberConverter;
var OrdinalLocalBasedNumberConverter = (function (_super) {
    tslib_1.__extends(OrdinalLocalBasedNumberConverter, _super);
    function OrdinalLocalBasedNumberConverter(simpleFormattersManager) {
        var _this = _super.call(this) || this;
        _this.simpleFormattersManager = simpleFormattersManager;
        _this.type = list_level_properties_1.NumberingFormat.Ordinal;
        return _this;
    }
    return OrdinalLocalBasedNumberConverter;
}(OrdinalBasedNumberConverter));
exports.OrdinalLocalBasedNumberConverter = OrdinalLocalBasedNumberConverter;
var OrdinalEnglishNumberConverter = (function (_super) {
    tslib_1.__extends(OrdinalEnglishNumberConverter, _super);
    function OrdinalEnglishNumberConverter(simpleFormattersManager) {
        var _this = _super.call(this, simpleFormattersManager) || this;
        _this.ending = ["st", "nd", "rd", "th"];
        return _this;
    }
    OrdinalEnglishNumberConverter.prototype.convertNumberCore = function (value) {
        var temp = value % 100;
        if (temp < 21) {
            switch (temp) {
                case 1:
                    return this.simpleFormattersManager.formatString("{0}{1}", value, this.ending[0]);
                case 2:
                    return this.simpleFormattersManager.formatString("{0}{1}", value, this.ending[1]);
                case 3:
                    return this.simpleFormattersManager.formatString("{0}{1}", value, this.ending[2]);
                default:
                    return this.simpleFormattersManager.formatString("{0}{1}", value, this.ending[3]);
            }
        }
        value--;
        temp = value % 10;
        if (temp < 3)
            return this.simpleFormattersManager.formatString("{0}{1}", value + 1, this.ending[temp % 3]);
        return this.simpleFormattersManager.formatString("{0}{1}", value + 1, this.ending[3]);
    };
    return OrdinalEnglishNumberConverter;
}(OrdinalLocalBasedNumberConverter));
exports.OrdinalEnglishNumberConverter = OrdinalEnglishNumberConverter;
var OrdinalFrenchNumberConverter = (function (_super) {
    tslib_1.__extends(OrdinalFrenchNumberConverter, _super);
    function OrdinalFrenchNumberConverter(simpleFormattersManager) {
        return _super.call(this, simpleFormattersManager) || this;
    }
    OrdinalFrenchNumberConverter.prototype.convertNumberCore = function (value) {
        if (value == 1)
            return this.simpleFormattersManager.formatString("{0}er", value);
        else
            return this.simpleFormattersManager.formatString("{0}e", value);
    };
    return OrdinalFrenchNumberConverter;
}(OrdinalLocalBasedNumberConverter));
exports.OrdinalFrenchNumberConverter = OrdinalFrenchNumberConverter;
var OrdinalGermanNumberConverter = (function (_super) {
    tslib_1.__extends(OrdinalGermanNumberConverter, _super);
    function OrdinalGermanNumberConverter(simpleFormattersManager) {
        return _super.call(this, simpleFormattersManager) || this;
    }
    OrdinalGermanNumberConverter.prototype.convertNumberCore = function (value) {
        return this.simpleFormattersManager.formatString("{0}.", value);
    };
    return OrdinalGermanNumberConverter;
}(OrdinalLocalBasedNumberConverter));
exports.OrdinalGermanNumberConverter = OrdinalGermanNumberConverter;
var OrdinalItalianNumberConverter = (function (_super) {
    tslib_1.__extends(OrdinalItalianNumberConverter, _super);
    function OrdinalItalianNumberConverter(simpleFormattersManager) {
        return _super.call(this, simpleFormattersManager) || this;
    }
    OrdinalItalianNumberConverter.prototype.convertNumberCore = function (value) {
        return this.simpleFormattersManager.formatString("{0}°", value);
    };
    return OrdinalItalianNumberConverter;
}(OrdinalLocalBasedNumberConverter));
exports.OrdinalItalianNumberConverter = OrdinalItalianNumberConverter;
var OrdinalTurkishNumberConverter = (function (_super) {
    tslib_1.__extends(OrdinalTurkishNumberConverter, _super);
    function OrdinalTurkishNumberConverter(simpleFormattersManager) {
        return _super.call(this, simpleFormattersManager) || this;
    }
    OrdinalTurkishNumberConverter.prototype.convertNumberCore = function (value) {
        return this.simpleFormattersManager.formatString("{0}.", value);
    };
    return OrdinalTurkishNumberConverter;
}(OrdinalLocalBasedNumberConverter));
exports.OrdinalTurkishNumberConverter = OrdinalTurkishNumberConverter;
var OrdinalGreekNumberConverter = (function (_super) {
    tslib_1.__extends(OrdinalGreekNumberConverter, _super);
    function OrdinalGreekNumberConverter(simpleFormattersManager) {
        return _super.call(this, simpleFormattersManager) || this;
    }
    OrdinalGreekNumberConverter.prototype.convertNumberCore = function (value) {
        return this.simpleFormattersManager.formatString("{0}ο", value);
    };
    return OrdinalGreekNumberConverter;
}(OrdinalLocalBasedNumberConverter));
exports.OrdinalGreekNumberConverter = OrdinalGreekNumberConverter;
var OrdinalSpanishNumberConverter = (function (_super) {
    tslib_1.__extends(OrdinalSpanishNumberConverter, _super);
    function OrdinalSpanishNumberConverter(simpleFormattersManager) {
        return _super.call(this, simpleFormattersManager) || this;
    }
    OrdinalSpanishNumberConverter.prototype.convertNumberCore = function (value) {
        return this.simpleFormattersManager.formatString("{0}°", value);
    };
    return OrdinalSpanishNumberConverter;
}(OrdinalLocalBasedNumberConverter));
exports.OrdinalSpanishNumberConverter = OrdinalSpanishNumberConverter;
var OrdinalPortugueseNumberConverter = (function (_super) {
    tslib_1.__extends(OrdinalPortugueseNumberConverter, _super);
    function OrdinalPortugueseNumberConverter(simpleFormattersManager) {
        return _super.call(this, simpleFormattersManager) || this;
    }
    OrdinalPortugueseNumberConverter.prototype.convertNumberCore = function (value) {
        return this.simpleFormattersManager.formatString("{0}º", value);
    };
    return OrdinalPortugueseNumberConverter;
}(OrdinalLocalBasedNumberConverter));
exports.OrdinalPortugueseNumberConverter = OrdinalPortugueseNumberConverter;
var OrdinalUkrainianNumberConverter = (function (_super) {
    tslib_1.__extends(OrdinalUkrainianNumberConverter, _super);
    function OrdinalUkrainianNumberConverter(simpleFormattersManager) {
        return _super.call(this, simpleFormattersManager) || this;
    }
    OrdinalUkrainianNumberConverter.prototype.convertNumberCore = function (value) {
        return this.simpleFormattersManager.formatString("{0}-й", value);
    };
    return OrdinalUkrainianNumberConverter;
}(OrdinalLocalBasedNumberConverter));
exports.OrdinalUkrainianNumberConverter = OrdinalUkrainianNumberConverter;
var OrdinalRussianNumberConverter = (function (_super) {
    tslib_1.__extends(OrdinalRussianNumberConverter, _super);
    function OrdinalRussianNumberConverter(simpleFormattersManager) {
        return _super.call(this, simpleFormattersManager) || this;
    }
    OrdinalRussianNumberConverter.prototype.convertNumberCore = function (value) {
        return this.simpleFormattersManager.formatString("{0}-й", value);
    };
    return OrdinalRussianNumberConverter;
}(OrdinalLocalBasedNumberConverter));
exports.OrdinalRussianNumberConverter = OrdinalRussianNumberConverter;
var OrdinalSwedishNumberConverter = (function (_super) {
    tslib_1.__extends(OrdinalSwedishNumberConverter, _super);
    function OrdinalSwedishNumberConverter(simpleFormattersManager) {
        return _super.call(this, simpleFormattersManager) || this;
    }
    OrdinalSwedishNumberConverter.prototype.convertNumberCore = function (value) {
        if ((value % 10 == 1) || (value % 10 == 2))
            return this.simpleFormattersManager.formatString("{0}:a", value);
        else
            return this.simpleFormattersManager.formatString("{0}:e", value);
    };
    return OrdinalSwedishNumberConverter;
}(OrdinalLocalBasedNumberConverter));
exports.OrdinalSwedishNumberConverter = OrdinalSwedishNumberConverter;
