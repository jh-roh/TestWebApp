"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NumberConverterCreator = void 0;
var list_level_properties_1 = require("../numbering-lists/list-level-properties");
var bullet_number_converter_1 = require("./bullet-number-converter");
var decimal_enclosed_parentheses_number_converter_1 = require("./decimal-enclosed-parentheses-number-converter");
var decimal_number_converter_1 = require("./decimal-number-converter");
var decimal_zero_number_converter_1 = require("./decimal-zero-number-converter");
var descriptive_number_converter_1 = require("./descriptive-number-converter");
var hex_number_converter_1 = require("./hex-number-converter");
var latin_letter_number_converter_1 = require("./latin-letter-number-converter");
var number_in_dash_number_converter_1 = require("./number-in-dash-number-converter");
var ordinal_based_number_converter_1 = require("./ordinal-based-number-converter");
var roman_number_converter_1 = require("./roman-number-converter");
var NumberConverterCreator = (function () {
    function NumberConverterCreator() {
    }
    NumberConverterCreator.createConverter = function (type, simpleFormattersManager, langId) {
        if (langId === void 0) { langId = "en"; }
        switch (type) {
            case list_level_properties_1.NumberingFormat.UpperRoman:
                return new roman_number_converter_1.UpperRomanNumberConverterClassic();
            case list_level_properties_1.NumberingFormat.LowerRoman:
                return new roman_number_converter_1.LowerRomanNumberConverterClassic();
            case list_level_properties_1.NumberingFormat.Ordinal:
                return NumberConverterCreator.getOrdinalBasedNumberConverter(simpleFormattersManager, langId);
            case list_level_properties_1.NumberingFormat.OrdinalText:
                return new descriptive_number_converter_1.DescriptiveOrdinalEnglishNumberConverter();
            case list_level_properties_1.NumberingFormat.CardinalText:
                return new descriptive_number_converter_1.DescriptiveCardinalEnglishNumberConverter();
            case list_level_properties_1.NumberingFormat.UpperLetter:
                return new latin_letter_number_converter_1.UpperLatinLetterNumberConverter();
            case list_level_properties_1.NumberingFormat.LowerLetter:
                return new latin_letter_number_converter_1.LowerLatinLetterNumberConverter();
            case list_level_properties_1.NumberingFormat.NumberInDash:
                return new number_in_dash_number_converter_1.NumberInDashNumberConverter(simpleFormattersManager);
            case list_level_properties_1.NumberingFormat.Bullet:
                return new bullet_number_converter_1.BulletNumberConverter();
            case list_level_properties_1.NumberingFormat.DecimalZero:
                return new decimal_zero_number_converter_1.DecimalZeroNumberConverter(simpleFormattersManager);
            case list_level_properties_1.NumberingFormat.DecimalEnclosedParentheses:
                return new decimal_enclosed_parentheses_number_converter_1.DecimalEnclosedParenthesesNumberConverter(simpleFormattersManager);
            case list_level_properties_1.NumberingFormat.Hex:
                return new hex_number_converter_1.HexNumberConverter();
            case list_level_properties_1.NumberingFormat.Decimal:
                return new decimal_number_converter_1.DecimalNumberConverter();
            default:
                return new decimal_number_converter_1.DecimalNumberConverter();
        }
    };
    NumberConverterCreator.getOrdinalBasedNumberConverter = function (simpleFormattersManager, langId) {
        var twoLetterISOLanguageName = langId.substring(0, 2).toLowerCase();
        switch (twoLetterISOLanguageName) {
            case "en":
                return new ordinal_based_number_converter_1.OrdinalEnglishNumberConverter(simpleFormattersManager);
            case "fr":
                return new ordinal_based_number_converter_1.OrdinalFrenchNumberConverter(simpleFormattersManager);
            case "de":
                return new ordinal_based_number_converter_1.OrdinalGermanNumberConverter(simpleFormattersManager);
            case "it":
                return new ordinal_based_number_converter_1.OrdinalItalianNumberConverter(simpleFormattersManager);
            case "ru":
                return new ordinal_based_number_converter_1.OrdinalRussianNumberConverter(simpleFormattersManager);
            case "sv":
                return new ordinal_based_number_converter_1.OrdinalSwedishNumberConverter(simpleFormattersManager);
            case "tr":
                return new ordinal_based_number_converter_1.OrdinalTurkishNumberConverter(simpleFormattersManager);
            case "el":
                return new ordinal_based_number_converter_1.OrdinalGreekNumberConverter(simpleFormattersManager);
            case "es":
                return new ordinal_based_number_converter_1.OrdinalSpanishNumberConverter(simpleFormattersManager);
            case "pt":
                return new ordinal_based_number_converter_1.OrdinalPortugueseNumberConverter(simpleFormattersManager);
            case "uk":
                return new ordinal_based_number_converter_1.OrdinalUkrainianNumberConverter(simpleFormattersManager);
        }
        return new decimal_number_converter_1.DecimalNumberConverter();
    };
    NumberConverterCreator.createConverterByTypeName = function (typeName, simpleFormattersManager) {
        var uppercaseTypeName = typeName.toUpperCase();
        var firstChar = typeName[0];
        switch (uppercaseTypeName) {
            case "ALPHABETIC":
                return firstChar.toUpperCase() == firstChar ? new latin_letter_number_converter_1.UpperLatinLetterNumberConverter() : new latin_letter_number_converter_1.LowerLatinLetterNumberConverter();
            case "ROMAN":
                return firstChar.toUpperCase() == firstChar ? new roman_number_converter_1.UpperRomanNumberConverterClassic() : new roman_number_converter_1.LowerRomanNumberConverterClassic();
            case "ARABIC":
                return new decimal_number_converter_1.DecimalNumberConverter();
            case "ARABICDASH":
                return new number_in_dash_number_converter_1.NumberInDashNumberConverter(simpleFormattersManager);
            case "CARDTEXT":
                return new descriptive_number_converter_1.DescriptiveCardinalEnglishNumberConverter();
            case "CIRCLENUM":
                return new decimal_enclosed_parentheses_number_converter_1.DecimalEnclosedParenthesesNumberConverter(simpleFormattersManager);
            case "HEX":
                return new hex_number_converter_1.HexNumberConverter();
            case "ORDINAL":
                return new ordinal_based_number_converter_1.OrdinalEnglishNumberConverter(simpleFormattersManager);
            case "ORDTEXT":
                return new descriptive_number_converter_1.DescriptiveOrdinalEnglishNumberConverter();
            default:
                return new decimal_number_converter_1.DecimalNumberConverter();
        }
    };
    return NumberConverterCreator;
}());
exports.NumberConverterCreator = NumberConverterCreator;
