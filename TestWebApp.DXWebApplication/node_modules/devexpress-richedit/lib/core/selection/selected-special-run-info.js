"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SelectedSpecialRunInfo = void 0;
var run_type_1 = require("../model/runs/run-type");
var common_1 = require("@devexpress/utils/lib/utils/common");
var SelectedSpecialRunInfo = (function () {
    function SelectedSpecialRunInfo() {
        this.noSpecRun();
    }
    Object.defineProperty(SelectedSpecialRunInfo.prototype, "picturePos", {
        get: function () {
            return common_1.isDefined(this.picturePosition) ? this.picturePosition.value : -1;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SelectedSpecialRunInfo.prototype, "textBoxPos", {
        get: function () {
            return common_1.isDefined(this.textBoxPosition) ? this.textBoxPosition.value : -1;
        },
        enumerable: false,
        configurable: true
    });
    SelectedSpecialRunInfo.prototype.noSpecRun = function () {
        this.setSpecRunInfo(null, -1, -1, false, -1);
    };
    SelectedSpecialRunInfo.prototype.setSpecRunInfo = function (parentSubDocument, picturePos, textBoxPos, isAnchoredObject, textBoxInnerSubDocumentId) {
        if (common_1.isDefined(this.picturePosition)) {
            this.parentSubDocument.positionManager.unregisterSpecRunPosition();
            this.picturePosition = null;
        }
        if (picturePos > -1)
            this.picturePosition = parentSubDocument.positionManager.registerSpecRunPosition(picturePos);
        if (common_1.isDefined(this.textBoxPosition)) {
            this.parentSubDocument.positionManager.unregisterSpecRunPosition();
            this.textBoxPosition = null;
        }
        if (textBoxPos > -1)
            this.textBoxPosition = parentSubDocument.positionManager.registerSpecRunPosition(textBoxPos);
        this.parentSubDocument = parentSubDocument;
        this.isAnchoredObject = isAnchoredObject;
        this.textBoxInnerSubDocumentId = textBoxInnerSubDocumentId;
    };
    SelectedSpecialRunInfo.prototype.init = function (intervalsInfo) {
        var activeSubDocument = intervalsInfo.subDocument;
        if (this.textBoxInnerSubDocumentId == activeSubDocument.id)
            return;
        if (!intervalsInfo.multiselection && intervalsInfo.interval.length == 1) {
            var pos = intervalsInfo.interval.start;
            var run = activeSubDocument.getRunByPosition(pos);
            switch (run.getType()) {
                case run_type_1.RunType.AnchoredTextBoxRun:
                    this.setSpecRunInfo(activeSubDocument, -1, pos, true, run.subDocId);
                    break;
                case run_type_1.RunType.AnchoredPictureRun:
                    this.setSpecRunInfo(activeSubDocument, pos, -1, true, -1);
                    break;
                case run_type_1.RunType.InlinePictureRun:
                    this.setSpecRunInfo(activeSubDocument, pos, -1, false, -1);
                    break;
                default: this.noSpecRun();
            }
        }
        else
            this.noSpecRun();
    };
    SelectedSpecialRunInfo.prototype.getTextBoxInnerSubDocumentId = function () {
        return this.textBoxInnerSubDocumentId;
    };
    Object.defineProperty(SelectedSpecialRunInfo.prototype, "isSelectedAnchorObject", {
        get: function () {
            return this.isAnchoredObject;
        },
        enumerable: false,
        configurable: true
    });
    SelectedSpecialRunInfo.prototype.getParentSubDocument = function () {
        return this.parentSubDocument;
    };
    SelectedSpecialRunInfo.prototype.getPosition = function () {
        return this.picturePos > -1 ? this.picturePos : this.textBoxPos;
    };
    SelectedSpecialRunInfo.prototype.getPicturePosition = function () {
        return this.picturePos;
    };
    SelectedSpecialRunInfo.prototype.getTextBoxPosition = function () {
        return this.textBoxPos;
    };
    SelectedSpecialRunInfo.prototype.isPictureSelected = function () {
        return this.picturePos > -1;
    };
    SelectedSpecialRunInfo.prototype.isTextBoxSelected = function () {
        return this.textBoxPos > -1;
    };
    SelectedSpecialRunInfo.prototype.isSelected = function () {
        return this.isPictureSelected() || this.isTextBoxSelected();
    };
    SelectedSpecialRunInfo.prototype.clone = function () {
        var obj = new SelectedSpecialRunInfo();
        obj.picturePosition = this.picturePosition;
        obj.textBoxPosition = this.textBoxPosition;
        obj.parentSubDocument = this.parentSubDocument;
        obj.isAnchoredObject = this.isAnchoredObject;
        obj.textBoxInnerSubDocumentId = this.textBoxInnerSubDocumentId;
        return obj;
    };
    return SelectedSpecialRunInfo;
}());
exports.SelectedSpecialRunInfo = SelectedSpecialRunInfo;
