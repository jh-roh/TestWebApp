/**
* DevExpress Analytics (widgets\_utils.js)
* Version:  22.1.5
* Build date: Sep 5, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isNullOrEmptyString = exports.getParentContainer = exports.isList = exports.setCursorInFunctionParameter = exports._setIsDarkTheme = exports.isDarkTheme = exports.floatValueConverter = exports.validateExpression = exports.integerValueConverter = void 0;
var themes_1 = require("devextreme/ui/themes");
var $ = require("jquery");
var localization_utils_1 = require("../property-grid/localization/localization_utils");
var _utils_1 = require("../property-grid/widgets/internal/_utils");
var pathRequest_1 = require("./common/pathRequest");
var parameter_1 = require("./criteria/operators/parameter");
var property_1 = require("./criteria/operators/property");
var criteriaEnumeration_1 = require("./criteria/utils/criteriaEnumeration");
var _valueEditorHelper_1 = require("./internal/_valueEditorHelper");
var criteriaOperatorStateMachine_1 = require("./criteria/utils/criteriaOperatorStateMachine");
function integerValueConverter(val, defaultValue, type) {
    var stringValue = '' + val;
    return _valueEditorHelper_1.ValueEditorHelper.isValid(type, 'integer', stringValue) ? stringValue : defaultValue;
}
exports.integerValueConverter = integerValueConverter;
function validateExpression(options) {
    var deferred = $.Deferred();
    try {
        var requests = [];
        var _pushRequest = function (path, propertyName, isParameter) {
            if (isParameter === void 0) { isParameter = false; }
            var message = _utils_1.formatUnicorn(localization_utils_1.getLocalization('{0} is not found', 'AnalyticsCoreStringId.WarningMessage_FieldNotFound'), isParameter ? ('?' + propertyName) : ('[' + propertyName + ']'));
            var propertyDeferred = $.Deferred();
            options.fieldListProvider.getItemByPath(new pathRequest_1.PathRequest(path))
                .done(function (_) { return propertyDeferred.resolve({ success: true }); })
                .fail(function (_) {
                path === propertyName
                    ? propertyDeferred.resolve({ success: false, message: message })
                    : options.fieldListProvider.getItemByPath(new pathRequest_1.PathRequest([path.split('.')[0], propertyName].join('.')))
                        .done(function (_) { return propertyDeferred.resolve({ success: true }); })
                        .fail(function (_) { return propertyDeferred.resolve({ success: false, message: message }); });
            });
            requests.push(propertyDeferred);
        };
        var expression = criteriaOperatorStateMachine_1.CriteriaOperatorStateMachine.parse(options.expression);
        criteriaEnumeration_1.criteriaForEach(expression, function (operator, innerPath) {
            if (operator instanceof property_1.OperandProperty) {
                var propertyName = operator.propertyName.indexOf('^.') === 0 ? operator.propertyName.substring(2) : operator.propertyName;
                var path = propertyName;
                if ((options.rootItems || []).indexOf(propertyName.split('.')[0]) === -1 && innerPath) {
                    path = propertyName ? [innerPath, propertyName].join('.') : innerPath;
                }
                _pushRequest(path, propertyName);
            }
            else if (operator instanceof parameter_1.OperandParameter) {
                var parameterName = operator.parameterName;
                var parameterPath = 'Parameters.' + parameterName;
                _pushRequest(parameterPath, parameterName, true);
            }
        }, options.path);
        $.when.apply($, requests).done(function () {
            var responses = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                responses[_i] = arguments[_i];
            }
            return deferred.resolve(responses.reduce(function (result, value) {
                if (!value.success)
                    result = result ? [result, value.message].join('\n') : value.message;
                return result;
            }, ''));
        });
    }
    catch (e) {
        deferred.reject();
    }
    return deferred.promise();
}
exports.validateExpression = validateExpression;
function floatValueConverter(val, defaultValue, type) {
    var stringValue = '' + val;
    return _valueEditorHelper_1.ValueEditorHelper.isValid(type, 'float', stringValue) ? stringValue : defaultValue;
}
exports.floatValueConverter = floatValueConverter;
var _lightThemes = ['generic.light', 'generic.carmine', 'generic.greenmist', 'generic.softblue', 'generic.light.compact', 'generic.carmine.compact', 'generic.greenmist.compact', 'generic.softblue.compact'];
var _darkThemes = ['generic.dark', 'generic.contrast', 'generic.dark.compact', 'generic.darkmoon', 'generic.darkviolet', 'generic.contras.compact', 'generic.darkmoon.compact', 'generic.darkviolet.compact'];
function getCurrentTheme() {
    return themes_1.default.current();
}
var isDarkTheme = function (theme) {
    theme = theme || getCurrentTheme();
    if ($.inArray(theme, _darkThemes) !== -1)
        return true;
    if ($.inArray(theme, _lightThemes) !== -1)
        return false;
    return false;
};
exports.isDarkTheme = isDarkTheme;
function _setIsDarkTheme(callback) {
    exports.isDarkTheme = callback;
}
exports._setIsDarkTheme = _setIsDarkTheme;
function setCursorInFunctionParameter(paramCount, editor, insertValue) {
    if (!paramCount || paramCount <= 0)
        return;
    var cursorPosition = editor.getCursorPosition(), lastIndexOpeningBracket = insertValue.lastIndexOf('(');
    if (insertValue.charAt(lastIndexOpeningBracket + 1) === "'")
        lastIndexOpeningBracket++;
    editor.gotoLine(cursorPosition.row + 1, cursorPosition.column - (insertValue.length - 1 - lastIndexOpeningBracket));
}
exports.setCursorInFunctionParameter = setCursorInFunctionParameter;
function isList(data) {
    return data.isList === true || data.specifics === 'List' || data.specifics === 'ListSource';
}
exports.isList = isList;
function getParentContainer(el, container) {
    if (container === void 0) { container = '.dx-designer-viewport'; }
    return $(el).closest(container);
}
exports.getParentContainer = getParentContainer;
function isNullOrEmptyString(str) {
    return str == null || str === '';
}
exports.isNullOrEmptyString = isNullOrEmptyString;
