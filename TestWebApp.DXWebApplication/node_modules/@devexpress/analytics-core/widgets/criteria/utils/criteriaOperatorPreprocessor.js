/**
* DevExpress Analytics (widgets\criteria\utils\criteriaOperatorPreprocessor.js)
* Version:  22.1.5
* Build date: Sep 5, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.criteriaCreator = exports.CriteriaOperatorPreprocessor = void 0;
var unary_1 = require("../operators/options/unary");
var CriteriaOperatorPreprocessor = (function () {
    function CriteriaOperatorPreprocessor() {
        this._func = [];
        this._factory = {};
        this._changeTypeFactory = {};
    }
    CriteriaOperatorPreprocessor.prototype.addListener = function (func) {
        var index = this._func.indexOf(func);
        if (index === -1) {
            this._func.push(func);
        }
    };
    CriteriaOperatorPreprocessor.prototype.removeListener = function (func) {
        var index = this._func.indexOf(func);
        if (index !== -1) {
            this._func.splice(index, 1);
        }
    };
    CriteriaOperatorPreprocessor.prototype.register = function (operatorType, create, changeType) {
        var _this = this;
        this._factory[operatorType] = create;
        if (changeType)
            this._changeTypeFactory[operatorType] = function (changeOperator) {
                var operand = changeType(changeOperator);
                if (changeOperator.reverse) {
                    operand = _this.process('unary', {
                        operator: operand,
                        operatorType: unary_1.UnaryOperatorType.Not
                    });
                }
                return operand;
            };
    };
    CriteriaOperatorPreprocessor.prototype.process = function (operatorType, options) {
        if (options === void 0) { options = {}; }
        var operand = operatorType in this._factory ? this._factory[operatorType](options) : this._factory['default']();
        this._func.forEach(function (func) { operand = func(operand, { operatorType: operatorType, options: options || {} }); });
        return operand;
    };
    CriteriaOperatorPreprocessor.prototype.changeByType = function (value) {
        if (this._changeTypeFactory[value._type]) {
            return this._changeTypeFactory[value._type](value);
        }
        return null;
    };
    return CriteriaOperatorPreprocessor;
}());
exports.CriteriaOperatorPreprocessor = CriteriaOperatorPreprocessor;
exports.criteriaCreator = new CriteriaOperatorPreprocessor();
