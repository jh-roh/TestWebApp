/**
* DevExpress Analytics (widgets\criteria\utils\criteriaOperatorStateMachine.js)
* Version:  22.1.5
* Build date: Sep 5, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CriteriaOperatorStateMachine = exports.MachineState = void 0;
var _utils_1 = require("../../../property-grid/widgets/internal/_utils");
var criteriaparser_1 = require("../parser/criteriaparser");
var MachineState = (function () {
    function MachineState(tokenName, alphabet, startTerm, endTerm) {
        this.tokenName = tokenName;
        this.alphabet = alphabet;
        this.startTerm = startTerm;
        this.endTerm = endTerm;
        this.tokenLength = 0;
        this.isActiveState = false;
        this.tokens = [];
    }
    MachineState.prototype._isSubline = function (pos, term) {
        var result = (pos + term.length - 1 < this.alphabet.length);
        for (var i = pos; i < (pos + term.length) && result; i++)
            result = this.alphabet[i] == term[i - pos];
        return result;
    };
    MachineState.prototype._getToken = function (pos) {
        var token = {
            type: this.tokenName, start: pos - this.tokenLength + 1, end: pos + this.endTerm.length
        };
        token.val = this.alphabet.substring(token.start, token.end);
        return token;
    };
    MachineState.prototype.processTransitionFunction = function (pos) {
        if (this.isActiveState) {
            this.tokenLength++;
        }
        if (this._isSubline(pos, this.startTerm) && !this.isActiveState) {
            this.isActiveState = true;
            this.tokenLength += this.startTerm.length;
            return this.startTerm.length - 1;
        }
        else if (this.isActiveState && this._isSubline(pos, this.endTerm)) {
            this.isActiveState = false;
            this.tokens.push(this._getToken(pos));
            this.tokenLength = 0;
            return this.endTerm.length - 1;
        }
        return 0;
    };
    return MachineState;
}());
exports.MachineState = MachineState;
var CriteriaOperatorStateMachine = (function () {
    function CriteriaOperatorStateMachine(stringCriteria) {
        this.stringCriteria = stringCriteria;
        this.machineStates = [];
        this.machineStates.push(new MachineState('field', stringCriteria, '[', ']'));
        this.machineStates.push(new MachineState('value', stringCriteria, "'", "'"));
        this.machineStates.push(new MachineState('comment', stringCriteria, '/*', '*/'));
        this._inputStringCriteria = stringCriteria;
    }
    CriteriaOperatorStateMachine.parse = function (stringCriteria, saveOriginalStringLength) {
        if (saveOriginalStringLength === void 0) { saveOriginalStringLength = false; }
        if (stringCriteria && stringCriteria !== '') {
            if (saveOriginalStringLength)
                return new CriteriaOperatorStateMachine(stringCriteria).replaceCommentsToChar(' ').getCriteria();
            return new CriteriaOperatorStateMachine(stringCriteria).replaceCommentsToChar().getCriteria();
        }
        return null;
    };
    CriteriaOperatorStateMachine.prototype._tokenize = function () {
        var _this = this;
        for (var i = 0; i < this.stringCriteria.length; i++) {
            var step = 0;
            this.machineStates.forEach(function (state) {
                if (step)
                    return;
                var anotherMachines = _this.machineStates.filter(function (a) { return a != state && a.isActiveState; });
                if (!anotherMachines.length)
                    step = state.processTransitionFunction(i);
            });
            i += step;
        }
        var resultTokens = [];
        this.machineStates.forEach(function (state) {
            resultTokens = resultTokens.concat(state.tokens);
            state.tokens = [];
        });
        return resultTokens;
    };
    CriteriaOperatorStateMachine.prototype._replaceTokenToAnotherToken = function (tokens, newTokenChar, tokenName) {
        var tempCriteria = this.stringCriteria;
        tokens = tokens.filter(function (a) { return a.type == tokenName; }).sort(function (a) { return a.start; }).reverse();
        tokens.forEach(function (token) {
            var lines = token.val.split('\n');
            var start = token.start;
            var end = token.end;
            lines.forEach(function (line) {
                if (line.length + start !== token.end) {
                    end = start + line.length;
                }
                else {
                    end = token.end;
                }
                tempCriteria = _utils_1.stringReplace(tempCriteria, start, end - start, newTokenChar);
                start = (line.length * newTokenChar.length) + 1;
            });
        });
        return tempCriteria;
    };
    CriteriaOperatorStateMachine.prototype.replaceCommentsToChar = function (char) {
        if (char === void 0) { char = ''; }
        this._inputStringCriteria = this._replaceTokenToAnotherToken(this._tokenize(), char, 'comment');
        return this;
    };
    CriteriaOperatorStateMachine.prototype.getCriteria = function () {
        return criteriaparser_1.parse(this._inputStringCriteria);
    };
    return CriteriaOperatorStateMachine;
}());
exports.CriteriaOperatorStateMachine = CriteriaOperatorStateMachine;
