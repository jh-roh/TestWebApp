/**
* DevExpress Analytics (widgets\criteria\operators\function.js)
* Version:  22.1.5
* Build date: Sep 5, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.FunctionOperator = void 0;
var criteriaOperator_1 = require("./criteriaOperator");
var operatorTokens_1 = require("../utils/operatorTokens");
var function_1 = require("./options/function");
var criteriaOperatorPreprocessor_1 = require("../utils/criteriaOperatorPreprocessor");
var FunctionOperator = (function (_super) {
    __extends(FunctionOperator, _super);
    function FunctionOperator(operatorType, operands) {
        var _this = _super.call(this) || this;
        _this.toString = function (reverse) {
            var result = (operatorTokens_1.operatorTokens[_this.displayType] || _this.displayType) + '(' + _this.operands.map(function (operand) {
                return operand.toString();
            }).join(', ') + ')';
            return reverse ? 'Not ' + result : result;
        };
        _this.assignLeftPart = function (criteriaOperator) {
            _this.operands = [criteriaOperator.leftPart];
        };
        _this.assignRightPart = function (criteriaOperator) {
            if (Array.isArray(criteriaOperator.rightPart)) {
                if (criteriaOperator.rightPart.length) {
                    _this.operands.push(criteriaOperator.rightPart[0]);
                }
                else {
                    _this.operands.push(criteriaOperatorPreprocessor_1.criteriaCreator.process('value'));
                }
            }
            else {
                _this.operands.push(criteriaOperator.rightPart);
            }
        };
        _this.operands = [];
        _this.type = 'function';
        _this.operatorType = operatorType;
        operands = operands || [criteriaOperatorPreprocessor_1.criteriaCreator.process('default')];
        operands.forEach(function (operand) { return _this.operands.push(operand); });
        return _this;
    }
    Object.defineProperty(FunctionOperator.prototype, "leftPart", {
        get: function () {
            return this.operands[0];
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunctionOperator.prototype, "rightPart", {
        get: function () {
            return this.operands.filter(function (_, index) { return index !== 0; });
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunctionOperator.prototype, "displayType", {
        get: function () {
            return function_1.FunctionOperatorType[this.operatorType] || this.operatorType.toString();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunctionOperator.prototype, "enumType", {
        get: function () {
            return function_1.FunctionOperatorType;
        },
        enumerable: false,
        configurable: true
    });
    FunctionOperator.prototype.accept = function (visitor) {
        return visitor.visitFunctionOperator
            ? visitor.visitFunctionOperator(this)
            : new FunctionOperator(this.operatorType, this.operands && this.operands.map(function (op) { return op.accept(visitor); }));
    };
    return FunctionOperator;
}(criteriaOperator_1.CriteriaOperator));
exports.FunctionOperator = FunctionOperator;
criteriaOperatorPreprocessor_1.criteriaCreator.register('function', function (options) {
    return new FunctionOperator(options.operatorType, options.operands);
}, function (operatorType) { return new FunctionOperator(operatorType.value, [criteriaOperatorPreprocessor_1.criteriaCreator.process('property')]); });
