/**
* DevExpress Analytics (widgets\criteria\operators\criteriaOperator.js)
* Version:  22.1.5
* Build date: Sep 5, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CriteriaOperator = void 0;
var criteriaOperatorPreprocessor_1 = require("../utils/criteriaOperatorPreprocessor");
var unary_1 = require("./options/unary");
var CriteriaOperator = (function () {
    function CriteriaOperator() {
        var _this = this;
        this.type = 'default';
        this.operands = null;
        this.changeValue = function (operand, reverse, location) {
            var result = reverse ? criteriaOperatorPreprocessor_1.criteriaCreator.process('unary', { operatorType: unary_1.UnaryOperatorType.Minus, operator: operand }) : operand;
            if (location.index !== null) {
                _this[location.name][location.index] = result;
            }
            else {
                _this[location.name] = result;
            }
            return result;
        };
        this.changeValueType = function (type, location) {
            var result = new type();
            if (location.index !== null) {
                _this[location.name][location.index] = result;
            }
            else {
                _this[location.name] = result;
            }
            return result;
        };
        this.assignLeftPart = function (operator) { return void 0; };
        this.assignRightPart = function (operator) { return void 0; };
        this.assignType = function (type) {
            _this.operatorType = type;
        };
    }
    Object.defineProperty(CriteriaOperator.prototype, "displayType", {
        get: function () {
            return this.operatorType;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CriteriaOperator.prototype, "enumType", {
        get: function () {
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CriteriaOperator.prototype, "leftPart", {
        get: function () { return null; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CriteriaOperator.prototype, "rightPart", {
        get: function () { return null; },
        enumerable: false,
        configurable: true
    });
    CriteriaOperator.prototype.assignFrom = function (criteriaOperator, incorrectSpecificsForAggregate, needAssignRightPart) {
        if (incorrectSpecificsForAggregate === void 0) { incorrectSpecificsForAggregate = false; }
        if (needAssignRightPart === void 0) { needAssignRightPart = true; }
        var operator = criteriaOperator;
        if (criteriaOperator.type === 'unary' && !Array.isArray(criteriaOperator.leftPart) && criteriaOperator.leftPart.type != 'property') {
            operator = criteriaOperator.leftPart;
        }
        if (incorrectSpecificsForAggregate) {
            this.assignLeftPart(operator.leftPart);
        }
        else {
            this.assignLeftPart(operator);
        }
        if (operator.rightPart) {
            needAssignRightPart && this.assignRightPart(operator);
        }
    };
    CriteriaOperator.prototype.children = function () {
        var operands = [];
        if (this.leftPart)
            operands.push.apply(operands, Array.isArray(this.leftPart) ? this.leftPart : [this.leftPart]);
        if (this.rightPart)
            operands.push.apply(operands, Array.isArray(this.rightPart) ? this.rightPart : [this.rightPart]);
        return operands;
    };
    CriteriaOperator.prototype.accept = function (visitor) { throw 'Not implemented'; };
    return CriteriaOperator;
}());
exports.CriteriaOperator = CriteriaOperator;
criteriaOperatorPreprocessor_1.criteriaCreator.register('default', function (options) { return new CriteriaOperator(); });
