/**
* DevExpress Analytics (widgets\criteria\operators\unary.js)
* Version:  22.1.5
* Build date: Sep 5, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.UnaryOperator = void 0;
var criteriaOperator_1 = require("./criteriaOperator");
var unary_1 = require("./options/unary");
var criteriaOperatorPreprocessor_1 = require("../utils/criteriaOperatorPreprocessor");
var UnaryOperator = (function (_super) {
    __extends(UnaryOperator, _super);
    function UnaryOperator(operatorType, operand) {
        var _this = _super.call(this) || this;
        _this.type = 'unary';
        _this.operand = operand || criteriaOperatorPreprocessor_1.criteriaCreator.process('default');
        _this.operatorType = operatorType;
        return _this;
    }
    Object.defineProperty(UnaryOperator.prototype, "leftPart", {
        get: function () {
            return this.operand;
        },
        enumerable: false,
        configurable: true
    });
    UnaryOperator.prototype.assignFrom = function (criteriaOperator) {
        if (this.operatorType === unary_1.UnaryOperatorType.Not) {
            if (criteriaOperator instanceof UnaryOperator) {
                this.operand.assignFrom(criteriaOperator.operand);
            }
            else {
                this.operand.assignFrom(criteriaOperator);
            }
        }
        else {
            if (criteriaOperator instanceof UnaryOperator) {
                this.operand = criteriaOperator.operand.leftPart;
            }
            else {
                this.operand = (criteriaOperator.leftPart || criteriaOperator);
            }
        }
    };
    Object.defineProperty(UnaryOperator.prototype, "displayType", {
        get: function () {
            return unary_1.UnaryOperatorType[this.operatorType];
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UnaryOperator.prototype, "enumType", {
        get: function () {
            return unary_1.UnaryOperatorType;
        },
        enumerable: false,
        configurable: true
    });
    UnaryOperator.prototype.accept = function (visitor) {
        return visitor.visitUnaryOperator
            ? visitor.visitUnaryOperator(this)
            : new UnaryOperator(this.operatorType, this.operand && this.operand.accept(visitor));
    };
    return UnaryOperator;
}(criteriaOperator_1.CriteriaOperator));
exports.UnaryOperator = UnaryOperator;
criteriaOperatorPreprocessor_1.criteriaCreator.register('unary', function (options) {
    return new UnaryOperator(options.operatorType, options.operator);
}, function (operatorType) { return criteriaOperatorPreprocessor_1.criteriaCreator.process('unary', {
    operatorType: operatorType.value,
    operator: criteriaOperatorPreprocessor_1.criteriaCreator.process('property')
}); });
