/**
* DevExpress Analytics (widgets\criteria\operators\parameter.js)
* Version:  22.1.5
* Build date: Sep 5, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.OperandParameter = void 0;
var value_1 = require("./value");
var criteriaOperatorPreprocessor_1 = require("../utils/criteriaOperatorPreprocessor");
var OperandParameter = (function (_super) {
    __extends(OperandParameter, _super);
    function OperandParameter(parameterName, value) {
        var _this = _super.call(this, value) || this;
        _this.type = 'parameter';
        _this.parameterName = parameterName || '';
        return _this;
    }
    Object.defineProperty(OperandParameter.prototype, "displayType", {
        get: function () {
            return '?' + this.parameterName;
        },
        enumerable: false,
        configurable: true
    });
    OperandParameter.prototype.accept = function (visitor) {
        return visitor.visitOperandParameter
            ? visitor.visitOperandParameter(this)
            : new OperandParameter(this.parameterName, this.value);
    };
    return OperandParameter;
}(value_1.OperandValue));
exports.OperandParameter = OperandParameter;
criteriaOperatorPreprocessor_1.criteriaCreator.register('parameter', function (options) {
    return new OperandParameter(options.parameterName, options.value);
});
