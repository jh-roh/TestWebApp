/**
* DevExpress Analytics (widgets\criteria\operators\between.js)
* Version:  22.1.5
* Build date: Sep 5, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.BetweenOperator = void 0;
var criteriaOperator_1 = require("./criteriaOperator");
var criteriaOperatorPreprocessor_1 = require("../utils/criteriaOperatorPreprocessor");
var BetweenOperator = (function (_super) {
    __extends(BetweenOperator, _super);
    function BetweenOperator(property, begin, end) {
        var _this = _super.call(this) || this;
        _this.assignLeftPart = function (criteriaOperator) {
            _this.property = criteriaOperator.leftPart;
        };
        _this.assignRightPart = function (criteriaOperator) {
            if (Array.isArray(criteriaOperator.rightPart)) {
                if (criteriaOperator.rightPart.length) {
                    _this.begin = criteriaOperator.rightPart[0];
                    _this.end = criteriaOperator.rightPart.length > 1 ? criteriaOperator.rightPart[1] : criteriaOperatorPreprocessor_1.criteriaCreator.process('value');
                }
                else {
                    _this.begin = criteriaOperatorPreprocessor_1.criteriaCreator.process('value');
                    _this.end = criteriaOperatorPreprocessor_1.criteriaCreator.process('value');
                }
            }
            else {
                _this.begin = criteriaOperator.rightPart;
                _this.end = criteriaOperatorPreprocessor_1.criteriaCreator.process('value');
            }
        };
        _this.operatorType = 'Between';
        _this.type = 'between';
        _this.property = property;
        _this.begin = begin || criteriaOperatorPreprocessor_1.criteriaCreator.process('value');
        _this.end = end || criteriaOperatorPreprocessor_1.criteriaCreator.process('value');
        return _this;
    }
    Object.defineProperty(BetweenOperator.prototype, "leftPart", {
        get: function () {
            return this.property;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BetweenOperator.prototype, "rightPart", {
        get: function () {
            return [this.begin, this.end];
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BetweenOperator.prototype, "displayType", {
        get: function () {
            return 'Between';
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BetweenOperator.prototype, "enumType", {
        get: function () {
            return BetweenOperator;
        },
        enumerable: false,
        configurable: true
    });
    BetweenOperator.prototype.accept = function (visitor) {
        return visitor.visitBetweenOperator
            ? visitor.visitBetweenOperator(this)
            : new BetweenOperator(this.property && this.property.accept(visitor), this.begin && this.begin.accept(visitor), this.end && this.end.accept(visitor));
    };
    return BetweenOperator;
}(criteriaOperator_1.CriteriaOperator));
exports.BetweenOperator = BetweenOperator;
criteriaOperatorPreprocessor_1.criteriaCreator.register('between', function (options) {
    return new BetweenOperator(options.property, options.begin, options.end);
}, function (operatorType) { return (criteriaOperatorPreprocessor_1.criteriaCreator.process('between', {
    property: criteriaOperatorPreprocessor_1.criteriaCreator.process('property'),
    begin: criteriaOperatorPreprocessor_1.criteriaCreator.process('value'),
    end: criteriaOperatorPreprocessor_1.criteriaCreator.process('value')
})); });
