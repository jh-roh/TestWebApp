/**
* DevExpress Analytics (widgets\criteria\operators\in.js)
* Version:  22.1.5
* Build date: Sep 5, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.InOperator = void 0;
var criteriaOperator_1 = require("./criteriaOperator");
var criteriaOperatorPreprocessor_1 = require("../utils/criteriaOperatorPreprocessor");
var InOperator = (function (_super) {
    __extends(InOperator, _super);
    function InOperator(criteriaOperator, operands) {
        var _this = _super.call(this) || this;
        _this.assignLeftPart = function (criteriaOperator) {
            _this.criteriaOperator = criteriaOperator.leftPart;
        };
        _this.assignRightPart = function (criteriaOperator) {
            _this.operands = [].concat(criteriaOperator.rightPart);
        };
        _this.operatorType = 'In';
        _this.type = 'in';
        _this.operands = [];
        _this.criteriaOperator = criteriaOperator || criteriaOperatorPreprocessor_1.criteriaCreator.process('default');
        (operands || []).forEach(function (operand) { return _this.operands.push(operand); });
        return _this;
    }
    Object.defineProperty(InOperator.prototype, "leftPart", {
        get: function () {
            return this.criteriaOperator;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(InOperator.prototype, "rightPart", {
        get: function () {
            return this.operands;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(InOperator.prototype, "displayType", {
        get: function () {
            return 'In';
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(InOperator.prototype, "enumType", {
        get: function () {
            return InOperator;
        },
        enumerable: false,
        configurable: true
    });
    InOperator.prototype.accept = function (visitor) {
        return visitor.visitInOperator
            ? visitor.visitInOperator(this)
            : new InOperator(this.criteriaOperator && this.criteriaOperator.accept(visitor), this.operands && this.operands.map(function (op) { return op.accept(visitor); }));
    };
    return InOperator;
}(criteriaOperator_1.CriteriaOperator));
exports.InOperator = InOperator;
criteriaOperatorPreprocessor_1.criteriaCreator.register('in', function (options) {
    return new InOperator(options.criteriaOperator, options.operands);
}, function (operatorType) { return criteriaOperatorPreprocessor_1.criteriaCreator.process('in', {
    criteriaOperator: criteriaOperatorPreprocessor_1.criteriaCreator.process('property'),
    operands: [criteriaOperatorPreprocessor_1.criteriaCreator.process('value')]
}); });
