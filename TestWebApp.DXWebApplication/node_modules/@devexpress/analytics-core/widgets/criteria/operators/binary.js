/**
* DevExpress Analytics (widgets\criteria\operators\binary.js)
* Version:  22.1.5
* Build date: Sep 5, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.BinaryOperator = void 0;
var criteriaOperator_1 = require("./criteriaOperator");
var operatorTokens_1 = require("../utils/operatorTokens");
var binary_1 = require("./options/binary");
var criteriaOperatorPreprocessor_1 = require("../utils/criteriaOperatorPreprocessor");
var BinaryOperator = (function (_super) {
    __extends(BinaryOperator, _super);
    function BinaryOperator(left, right, operatorType) {
        var _this = _super.call(this) || this;
        _this.assignLeftPart = function (criteriaOperator) {
            _this.leftOperand = criteriaOperator.leftPart;
        };
        _this.assignRightPart = function (criteriaOperator) {
            if (Array.isArray(criteriaOperator.rightPart)) {
                if (criteriaOperator.rightPart.length) {
                    _this.rightOperand = criteriaOperator.rightPart[0];
                }
            }
            else {
                _this.rightOperand = criteriaOperator.rightPart;
            }
        };
        _this.type = 'binary';
        _this.leftOperand = left || criteriaOperatorPreprocessor_1.criteriaCreator.process('default');
        _this.rightOperand = right || criteriaOperatorPreprocessor_1.criteriaCreator.process('default');
        _this.operatorType = operatorType;
        return _this;
    }
    Object.defineProperty(BinaryOperator.prototype, "leftPart", {
        get: function () {
            return this.leftOperand;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BinaryOperator.prototype, "rightPart", {
        get: function () {
            return this.rightOperand;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BinaryOperator.prototype, "displayType", {
        get: function () {
            return operatorTokens_1.operatorTokens[binary_1.BinaryOperatorType[this.operatorType]] || binary_1.BinaryOperatorType[this.operatorType];
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BinaryOperator.prototype, "enumType", {
        get: function () {
            return binary_1.BinaryOperatorType;
        },
        enumerable: false,
        configurable: true
    });
    BinaryOperator.prototype.accept = function (visitor) {
        return visitor.visitBinaryOperator
            ? visitor.visitBinaryOperator(this)
            : new BinaryOperator(this.leftOperand && this.leftOperand.accept(visitor), this.rightOperand && this.rightOperand.accept(visitor), this.operatorType);
    };
    return BinaryOperator;
}(criteriaOperator_1.CriteriaOperator));
exports.BinaryOperator = BinaryOperator;
criteriaOperatorPreprocessor_1.criteriaCreator.register('binary', function (options) {
    return new BinaryOperator(options.left, options.right, options.operatorType);
}, function (operatorType) { return criteriaOperatorPreprocessor_1.criteriaCreator.process('binary', {
    left: criteriaOperatorPreprocessor_1.criteriaCreator.process('property'),
    right: criteriaOperatorPreprocessor_1.criteriaCreator.process('value'),
    operatorType: operatorType.value
}); });
