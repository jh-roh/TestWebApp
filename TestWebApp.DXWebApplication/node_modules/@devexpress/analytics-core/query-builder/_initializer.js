/**
* DevExpress Analytics (query-builder\_initializer.js)
* Version:  22.1.5
* Build date: Sep 5, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createQueryBuilderSurface = exports.createQueryBuilder = exports.createIsLoadingFlag = exports.updateQueryBuilderSurfaceContentSize = void 0;
var ko = require("knockout");
var $ = require("jquery");
var queryModel_1 = require("./elements/queryModel");
var _arrayutils_1 = require("../core/utils/_arrayutils");
var initializer_1 = require("./initializer");
var localization_utils_1 = require("../property-grid/localization/localization_utils");
var querySurface_1 = require("./elements/querySurface");
var dbSchemaProvider_1 = require("./dataSource/dbSchemaProvider");
var requestwrapper_1 = require("./utils/requestwrapper");
var _utils_1 = require("../core/utils/_utils");
var _designerInitializer_1 = require("../core/utils/_designerInitializer");
var _processError_1 = require("../core/internal/_processError");
var parameterModelMeta_1 = require("./elements/parameterModelMeta");
var _selection_1 = require("../core/selection/_selection");
var controlsFactory_1 = require("./utils/controlsFactory");
var _utils_2 = require("../widgets/_utils");
var _options_1 = require("./widgets/ace/_options");
var _columnDragHandler_1 = require("./dragDrop/_columnDragHandler");
var _queryBuilderTreeListController_1 = require("./utils/_queryBuilderTreeListController");
var propertygrid_1 = require("../property-grid/propertygrid");
var _localization_1 = require("../property-grid/localization/_localization");
var _accordionTabInfo_1 = require("./_accordionTabInfo");
var _dbObjectDragDropHandler_1 = require("./dragDrop/_dbObjectDragDropHandler");
var _queryBuilderObjectsProvider_1 = require("./widgets/filterEditor/_queryBuilderObjectsProvider");
var _actionList_1 = require("../core/tools/_actionList");
var _infoMessageHelpers_1 = require("../core/utils/_infoMessageHelpers");
var _controlsFactory_1 = require("./utils/_controlsFactory");
var config_1 = require("devextreme/core/config");
var sqlDataSource_1 = require("./dataSource/sql/sqlDataSource");
var _ace_available_1 = require("../widgets/ace/_ace-available");
var _internal_1 = require("../serializer/_internal");
var _rightPanelSwitcher_1 = require("./widgets/_rightPanelSwitcher");
var _internal_2 = require("../accessibility/_internal");
var _dataConnection_1 = require("./utils/_dataConnection");
var QueryBuilderElements = {
    Surface: 'dxrd-surface-template-base',
    Toolbar: 'dxqb-toolbar',
    RightPanel: 'dx-right-panel-lightweight',
    RightPanelSwitcher: 'dx-right-panel-switcher',
    DataPreview: 'dxqb-popup#data',
    SqlPreview: 'dxqb-popup#sql'
};
function customizeDesignerActions(designerModel, nextCustomizer) {
    var query = designerModel.model;
    return (function (actions) {
        var del = _arrayutils_1.findFirstItemMatchesCondition(actions, function (action) { return action.text === 'Delete'; });
        del.imageClassName = 'dx-icon-dxrd-image-recycle-bin';
        del.imageTemplateName = 'dxrd-svg-operations-recycle_bin';
        var undo = _arrayutils_1.findFirstItemMatchesCondition(actions, function (action) { return action.text === 'Undo'; });
        undo.disabled = ko.pureComputed(function () { return designerModel.isLoading() || !designerModel.undoEngine().undoEnabled(); });
        var redo = _arrayutils_1.findFirstItemMatchesCondition(actions, function (action) { return action.text === 'Redo'; });
        actions.splice(0, actions.length, del, undo, redo);
        actions.push({
            id: initializer_1.ActionId.Save,
            text: 'Save',
            displayText: function () { return localization_utils_1.getLocalization('Save', 'AnalyticsCoreStringId.MenuButtons_Save'); },
            imageClassName: 'dxqb-image-save',
            imageTemplateName: 'dxrd-svg-menu-save',
            disabled: designerModel.isLoading,
            visible: true,
            hotKey: { ctrlKey: true, keyCode: 'S'.charCodeAt(0) },
            clickAction: function () {
                query().save();
            },
            hasSeparator: true
        });
        actions.push({
            id: initializer_1.ActionId.DataPreview,
            text: 'Preview Results',
            displayText: function () { return localization_utils_1.getLocalization('Preview Results', 'DataAccessUIStringId.QueryBuilderButtons_PreviewResults'); },
            imageClassName: 'dxrd-image-data-preview',
            imageTemplateName: 'dxrd-svg-queryBuilder-data_preview',
            disabled: designerModel.isLoading,
            visible: true,
            hotKey: { ctrlKey: true, keyCode: 'P'.charCodeAt(0) },
            clickAction: function () {
                if (!query().canSave())
                    return;
                designerModel.showPreview();
            },
            hasSeparator: true
        });
        actions.push({
            id: initializer_1.ActionId.SelectStatementPreview,
            text: 'Preview Select Statement',
            displayText: function () { return localization_utils_1.getLocalization('Preview Select Statement', 'AnalyticsCoreStringId.QueryBuilder_PreviewSelectStatement_Tooltip'); },
            imageClassName: 'dxrd-image-selectstatement-preview',
            imageTemplateName: 'dxrd-svg-queryBuilder-select_statment',
            disabled: designerModel.isLoading,
            visible: true,
            hotKey: { ctrlKey: true, keyCode: 'E'.charCodeAt(0) },
            clickAction: function () {
                if (!query().canSave())
                    return;
                designerModel.showStatement();
            },
            hasSeparator: true
        });
        nextCustomizer && nextCustomizer(actions);
    });
}
function updateQueryBuilderSurfaceContentSize(getRoot, surfaceSize, surface, updateLayoutCallbacks) {
    return function () {
        var $root = getRoot();
        var rightAreaWidth = $root.find('.dxrd-right-panel:visible').outerWidth() || 0;
        var surfaceWidth = $root.width() - (rightAreaWidth + 5);
        $root.find('.dxrd-surface-wrapper').css(surface().rtl() ?
            { 'left': rightAreaWidth, 'right': 0, 'width': surfaceWidth } :
            { 'left': 0, 'right': rightAreaWidth, 'width': surfaceWidth });
        surfaceSize(surfaceWidth);
        surface().pageWidth(surfaceWidth);
    };
}
exports.updateQueryBuilderSurfaceContentSize = updateQueryBuilderSurfaceContentSize;
function createIsLoadingFlag(model, dbSchemaProvider) {
    var isDbSchemaLoaded = ko.observable(false);
    model()._disposables.push(dbSchemaProvider.subscribe(function () { isDbSchemaLoaded(false); }));
    return ko.pureComputed(function () {
        dbSchemaProvider.peek().getDbSchema().done(function () {
            isDbSchemaLoaded(true);
        });
        if (isDbSchemaLoaded()) {
            return model().tables.peek().some(function (table) {
                return !table.isInitialized();
            });
        }
        else {
            return true;
        }
    });
}
exports.createIsLoadingFlag = createIsLoadingFlag;
function _createDesignerModel(query, surface, options) {
    var querySubscription = query.subscribe(function (newValue) {
        surface(new querySurface_1.QuerySurface(newValue));
        surface().rtl(!!options.rtl);
    });
    var selection = new _selection_1.SurfaceSelection(['alias', 'name', 'sortOrder']);
    var designer = _designerInitializer_1.createDesigner(query, surface, controlsFactory_1.controlsFactory, undefined, undefined, undefined, !!options.rtl, selection);
    designer.addDisposables(querySubscription);
    designer.findControl = function (s, e) {
        var $childs = $('.dxqb-main').children('.dxrd-control');
        $childs.each(function (_, child) {
            var $child = $(child);
            if ($child.offset().top <= e.clientY && $child.offset().left <= e.clientX) {
                designer.selection.focused(ko.dataFor($child[0]));
                return;
            }
        });
    };
    designer.addDisposables({ dispose: function () { return designer.findControl = null; } });
    return designer;
}
function _updateSurfaceContentSizeSubscription(element, designerModel, surface, callback) {
    var updateSurfaceContentSize_ = updateQueryBuilderSurfaceContentSize(function () { return $(element).find('.dxqb-designer'); }, designerModel.surfaceSize, surface);
    designerModel.addDisposables(surface.subscribe(function () { updateSurfaceContentSize_(); }));
    var onResize = function () {
        setTimeout(function () { return updateSurfaceContentSize_(); });
    };
    window.addEventListener('resize', onResize);
    _internal_1.addDisposeCallback(element, function () {
        window.removeEventListener('resize', onResize);
        designerModel.disposableContainer.dispose();
    });
    designerModel.addDisposables(designerModel.tabPanel.width.subscribe(function () {
        updateSurfaceContentSize_();
    }));
    designerModel.updateSurfaceSize = function () {
        updateSurfaceContentSize_();
    };
    designerModel.updateSurface = function () {
        updateSurfaceContentSize_();
        callback && callback();
    };
}
function _createQueryBuilder(element, options, callbacks, applyBindings) {
    if (applyBindings === void 0) { applyBindings = true; }
    var disposableCallback = callbacks && callbacks.onServerError && _processError_1.processErrorEvent(callbacks.onServerError);
    var wrapper = options.requestWrapper || new requestwrapper_1.RequestWrapper();
    var parametersMode = options.parametersMode || parameterModelMeta_1.ParametersMode.ReadWrite;
    initializer_1.HandlerUri(options.handlerUri);
    if (options.queryModelJson) {
        var dataSource = new sqlDataSource_1.SqlDataSource(JSON.parse(options.dataSourceJson));
        options.dbSchemaProvider = _utils_1._wrapModelInObservable(options.dbSchemaProvider);
        options.dbSchemaProvider(new dbSchemaProvider_1.DBSchemaProvider(dataSource.connection));
        options.querySource = _utils_1._wrapModelInObservable(options.querySource);
        options.querySource(JSON.parse(options.queryModelJson));
    }
    var dataConnection = options.dbSchemaProvider().connection;
    var query = ko.observable(), surface = ko.observable(), treeListOptions = ko.observable();
    var beforeSaveCallback = function (data) {
        callbacks.saveQueryRequested({
            queryLayout: encodeURIComponent(JSON.stringify(data)),
            connection: encodeURIComponent(_dataConnection_1.serializeDataConnection(dataConnection))
        });
    };
    var initQuery = function (querySource) {
        query(new queryModel_1.QueryViewModel(querySource, options.dbSchemaProvider(), parametersMode, function (data) { return beforeSaveCallback(data); }));
    };
    initQuery(options.querySource());
    var designerModel = _createDesignerModel(query, surface, options);
    disposableCallback && designerModel.addDisposables(disposableCallback);
    designerModel.rootStyle = 'dxqb-designer dxd-back-primary-invariant';
    var previewPopupContainer = _utils_2.getParentContainer;
    designerModel.dataPreview = {
        isLoading: ko.observable(false),
        isVisible: ko.observable(false),
        title: function () { return localization_utils_1.getLocalization('Data Preview (First 100 Rows Displayed)', 'AnalyticsCoreStringId.DataPreview_Title'); },
        template: 'dxqb-data-preview',
        data: {
            value: ko.observable()
        },
        okButtonText: function () { return localization_utils_1.getLocalization('OK', 'DataAccessUIStringId.Button_OK'); },
        okButtonHandler: function (e) {
            e.model.isVisible(false);
        },
        container: previewPopupContainer
    };
    designerModel.selectStatmentPreview = {
        isLoading: ko.observable(false),
        isVisible: ko.observable(false),
        template: 'dxqb-selectstatment-preview',
        title: function () { return localization_utils_1.getLocalization('Select Statement Preview', 'AnalyticsCoreStringId.QueryBuilder_SelectStatementPreview_Title'); },
        data: {
            value: ko.observable(),
            aceOptions: _options_1.createDefaultSQLAceOptions(true),
            aceAvailable: _ace_available_1.aceAvailable(),
            additionalOptions: _options_1.createDefaultSQLAdditionalOptions(function (newVal) { designerModel.selectStatmentPreview.data.value(newVal); }),
            languageHelper: _options_1.createDefaultSQLLanguageHelper()
        },
        okButtonText: function () { return localization_utils_1.getLocalization('OK', 'DataAccessUIStringId.Button_OK'); },
        okButtonHandler: function (e) {
            e.model.isVisible(false);
        },
        container: previewPopupContainer
    };
    designerModel.parts = [
        { id: QueryBuilderElements.Surface, templateName: QueryBuilderElements.Surface, model: designerModel },
        { id: QueryBuilderElements.Toolbar, templateName: QueryBuilderElements.Toolbar, model: designerModel },
        { id: QueryBuilderElements.RightPanel, templateName: QueryBuilderElements.RightPanel, model: designerModel },
        { id: QueryBuilderElements.DataPreview, templateName: QueryBuilderElements.DataPreview.split('#')[0], model: designerModel.dataPreview },
        { id: QueryBuilderElements.SqlPreview, templateName: QueryBuilderElements.SqlPreview.split('#')[0], model: designerModel.selectStatmentPreview }
    ];
    designerModel.columnDragHandler = new _columnDragHandler_1.ColumnDragHandler(surface, designerModel.selection, designerModel.undoEngine, designerModel.snapHelper, designerModel.dragHelperContent);
    designerModel.fieldDragHandler = new _dbObjectDragDropHandler_1.DbObjectDragDropHandler(surface, designerModel.selection, designerModel.undoEngine, designerModel.snapHelper, designerModel.dragHelperContent);
    designerModel.connectionPointDragHandler = designerModel.columnDragHandler;
    designerModel.resizeHandler['handles'] = 'e, w';
    designerModel.columnsLoadingMsg = function () { return localization_utils_1.getLocalization('Loading...', 'DataAccessWebStringId.QueryBuilder_ColumnsLoading'); };
    var init = function (querySource) {
        initQuery(querySource);
        treeListOptions({
            itemsProvider: options.dbSchemaProvider(),
            treeListController: new _queryBuilderTreeListController_1.QueryBuilderTreeListController(designerModel.undoEngine, query, designerModel.fieldDragHandler),
            selectedPath: ko.observable(),
            pageSize: 100,
            templateName: 'dxqb-treelist-item-with-search'
        });
    };
    designerModel.addDisposables(options.querySource.subscribe(function (newValue) {
        init(newValue);
    }));
    init(options.querySource());
    var tablesTop = ko.observable(_internal_2.calculateWithZoomFactor(355)), itemPropertiesTabInfoModel = {
        editableObject: designerModel.editableObject,
        properties: new propertygrid_1.ObjectProperties(designerModel.editableObject, null, 1),
        fieldListModel: { treeListOptions: treeListOptions },
        tablesTop: tablesTop,
        searchPlaceholder: function () { return _localization_1.searchPlaceholder(); }
    };
    var tabPanelItem = new _accordionTabInfo_1.AccordionTabInfo(query, itemPropertiesTabInfoModel, designerModel.undoEngine, designerModel.selection.focused, parametersMode === parameterModelMeta_1.ParametersMode.ReadWrite);
    var tabPanel = designerModel.tabPanel;
    tabPanel.tabs.length = 0;
    tabPanel.tabs.push(tabPanelItem);
    tabPanel.width(_internal_2.calculateWithZoomFactor(375));
    designerModel.fieldDragHandler = new _dbObjectDragDropHandler_1.DbObjectDragDropHandler(surface, designerModel.selection, designerModel.undoEngine, designerModel.snapHelper, designerModel.dragHelperContent);
    designerModel.fieldListProvider = new _queryBuilderObjectsProvider_1.QueryBuilderObjectsProvider(query, _queryBuilderObjectsProvider_1.QueryBuilderObjectsProvider.whereClauseObjectsFilter);
    designerModel.dataBindingsProvider = designerModel.fieldListProvider;
    designerModel.parametersBindingsProvider = options.parametersItemsProvider || designerModel.dataBindingsProvider;
    designerModel.dataBindingsGroupProvider = new _queryBuilderObjectsProvider_1.QueryBuilderObjectsProvider(query, _queryBuilderObjectsProvider_1.QueryBuilderObjectsProvider.groupByObjectsFilter);
    designerModel.isLoading = createIsLoadingFlag(designerModel.model, options.dbSchemaProvider);
    designerModel.actionLists = new _actionList_1.ActionLists(surface, designerModel.selection, designerModel.undoEngine, customizeDesignerActions(designerModel, callbacks && callbacks.customizeActions));
    if (!designerModel.isLoading()) {
        designerModel.undoEngine && designerModel.undoEngine().clearHistory();
    }
    designerModel.addDisposables(designerModel.isLoading.subscribe(function (value) {
        designerModel.undoEngine && designerModel.undoEngine().clearHistory();
    }));
    designerModel.selection.focused(surface());
    var subscribe = surface.subscribe(function (newValue) {
        designerModel.selection.focused(newValue);
    });
    designerModel.addDisposables({ dispose: function () { return subscribe.dispose(); } });
    designerModel.addDisposables(designerModel.editableObject.subscribe(function (newValue) {
        tablesTop.notifySubscribers(null);
    }));
    _utils_1.appendStaticContextToRootViewModel(designerModel);
    if (applyBindings) {
        callbacks && callbacks.beforeRender && callbacks.beforeRender(designerModel);
        $(element).empty();
        ko.cleanNode(element);
        ko.applyBindings(designerModel, element);
    }
    _updateSurfaceContentSizeSubscription(element, designerModel, surface, function () { return tablesTop(355); });
    if (applyBindings) {
        designerModel.updateSurface();
    }
    designerModel.showPreview = function () {
        designerModel.dataPreview.isLoading(true);
        designerModel.dataPreview.isVisible(true);
        wrapper.getDataPreview(dataConnection, JSON.stringify(query().serialize(true)))
            .done(function (data) {
            designerModel.dataPreview.data.value(JSON.parse(data.dataPreviewJSON));
            designerModel.dataPreview.isLoading(false);
        }).fail(function (data) {
            designerModel.dataPreview.isVisible(false);
            _infoMessageHelpers_1.ShowMessage(_infoMessageHelpers_1.getErrorMessage(data));
        });
    };
    designerModel.showStatement = function () {
        designerModel.selectStatmentPreview.isLoading(true);
        designerModel.selectStatmentPreview.isVisible(true);
        wrapper.getSelectStatement(dataConnection, JSON.stringify(query().serialize(true)))
            .done(function (data) {
            if (data.errorMessage)
                _infoMessageHelpers_1.ShowMessage(data.errorMessage);
            designerModel.selectStatmentPreview.data.value(data.sqlSelectStatement);
            designerModel.selectStatmentPreview.isLoading(false);
        }).fail(function (data) {
            designerModel.selectStatmentPreview.isVisible(false);
            _infoMessageHelpers_1.ShowMessage(_infoMessageHelpers_1.getErrorMessage(data));
        });
    };
    return designerModel;
}
function createQueryBuilder(element, options, callbacks, applyBindings) {
    if (applyBindings === void 0) { applyBindings = true; }
    if (options.localization) {
        localization_utils_1.addCultureInfo({
            messages: options.localization
        });
    }
    config_1.default({ rtlEnabled: !!options.rtl });
    _controlsFactory_1.registerControls();
    var promises = [];
    callbacks && callbacks.customizeLocalization && callbacks.customizeLocalization(promises);
    return _localization_1.resolveFromPromises(promises, function () { return _createQueryBuilder(element, options, callbacks, applyBindings); });
}
exports.createQueryBuilder = createQueryBuilder;
function createQueryBuilderSurface(element, options, queryCreator) {
    var query = ko.observable(), surface = ko.observable();
    _controlsFactory_1.registerControls();
    var designerModel = _createDesignerModel(query, surface, options);
    var selectedTabPanel = new _accordionTabInfo_1.SelectedTabInfo(new propertygrid_1.ObjectProperties(designerModel.editableObject, null, 1));
    var tabPanel = designerModel.tabPanel;
    var switcher = new _rightPanelSwitcher_1.RightPanelSwitcher(tabPanel.collapsed, designerModel.editableObject, options.showPropertyGridCondition, _accordionTabInfo_1.AccordionTabInfo._getSelectedItemPropertyName);
    designerModel.addDisposables(selectedTabPanel, tabPanel, switcher);
    tabPanel.tabs.length = 0;
    tabPanel.tabs.push(selectedTabPanel);
    tabPanel.width(_internal_2.calculateWithZoomFactor(325));
    designerModel.parts = [
        { id: QueryBuilderElements.Surface, templateName: QueryBuilderElements.Surface, model: designerModel },
        { id: QueryBuilderElements.RightPanel, templateName: QueryBuilderElements.RightPanel, model: designerModel },
        { id: QueryBuilderElements.RightPanelSwitcher, templateName: QueryBuilderElements.RightPanelSwitcher, model: switcher },
    ];
    designerModel.columnDragHandler = new _columnDragHandler_1.ColumnDragHandler(surface, designerModel.selection, designerModel.undoEngine, designerModel.snapHelper, designerModel.dragHelperContent);
    designerModel.connectionPointDragHandler = designerModel.columnDragHandler;
    designerModel.selection.focused(surface());
    designerModel.addDisposables(surface.subscribe(function (newValue) {
        designerModel.selection.focused(newValue);
    }));
    designerModel.rootStyle = 'dxqb-designer dxd-back-primary-invariant';
    designerModel.resizeHandler['handles'] = 'e, w';
    designerModel.columnsLoadingMsg = function () { return localization_utils_1.getLocalization('Loading...', 'DataAccessWebStringId.QueryBuilder_ColumnsLoading'); };
    _utils_1.appendStaticContextToRootViewModel(designerModel);
    query(queryCreator(options));
    $(element).empty();
    ko.cleanNode(element);
    ko.applyBindings(designerModel, element);
    _updateSurfaceContentSizeSubscription(element, designerModel, surface);
    designerModel.isLoading(false);
    designerModel.updateSurface();
    _internal_1.addDisposeCallback(element, function () {
        query() && query().dispose();
        surface() && surface().dispose();
        queryCreator = null;
        designerModel.disposableContainer.dispose();
        designerModel.dispose();
    });
    return designerModel;
}
exports.createQueryBuilderSurface = createQueryBuilderSurface;
