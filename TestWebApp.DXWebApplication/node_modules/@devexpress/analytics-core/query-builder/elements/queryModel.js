/**
* DevExpress Analytics (query-builder\elements\queryModel.js)
* Version:  22.1.5
* Build date: Sep 5, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryViewModel = exports.QueryViewModelBase = void 0;
var ko = require("knockout");
var margins_1 = require("../../core/elements/margins");
var _getNameHelpers_1 = require("../../core/internal/_getNameHelpers");
var _arrayutils_1 = require("../../core/utils/_arrayutils");
var _infoMessageHelpers_1 = require("../../core/utils/_infoMessageHelpers");
var localization_utils_1 = require("../../property-grid/localization/localization_utils");
var _utils_1 = require("../../property-grid/widgets/internal/_utils");
var serializer_1 = require("../../serializer/serializer");
var utils_1 = require("../../serializer/utils");
var _utils_2 = require("../../serializer/_utils");
var dbColumn_1 = require("../dataSource/dbColumn");
var _groupFilterEditorSerializer_1 = require("../widgets/filterEditor/_groupFilterEditorSerializer");
var _qbFilterStringOptions_1 = require("../widgets/filterEditor/_qbFilterStringOptions");
var _queryBuilderObjectsProvider_1 = require("../widgets/filterEditor/_queryBuilderObjectsProvider");
var columnExpression_1 = require("./columnExpression");
var columnExpressionMeta_1 = require("./columnExpressionMeta");
var columnModelMeta_1 = require("./columnModelMeta");
var parameterModel_1 = require("./parameterModel");
var parameterModelMeta_1 = require("./parameterModelMeta");
var queryElementModel_1 = require("./queryElementModel");
var queryModelMeta_1 = require("./queryModelMeta");
var relationModel_1 = require("./relationModel");
var tableModel_1 = require("./tableModel");
var QueryViewModelBase = (function (_super) {
    __extends(QueryViewModelBase, _super);
    function QueryViewModelBase(querySource, dbSchemaProvider, parametersMode, beforeSaveCallback, serializer) {
        if (parametersMode === void 0) { parametersMode = parameterModelMeta_1.ParametersMode.ReadWrite; }
        var _this = _super.call(this, querySource, null, serializer) || this;
        _this.topOffset = 65;
        _this._findAncestorsRelations = function (table) {
            var result = { inner: 0, outer: 0, relations: [] };
            _this.relations().forEach(function (item) {
                if (item.nestedTable() === table) {
                    result.relations.push(item);
                    item.joinType() === 'LeftOuter' ? result.outer++ : result.inner++;
                    var parentResult = _this._findAncestorsRelations(item.parentTable());
                    result.inner += parentResult.inner;
                    result.outer += parentResult.outer;
                    result.relations.push.apply(result.relations, parentResult.relations);
                }
            });
            return result;
        };
        _this.aggregatedColumnsCount = ko.observable(0);
        _this.defaultPageHeight = 500;
        _this.defaultPageWidth = 500;
        _this.dbSchemaProvider = dbSchemaProvider;
        _this.onSave = beforeSaveCallback;
        _this.editableName = ko.observable(_this.name());
        _this._disposables.push(_this.name = ko.pureComputed({
            read: _this.editableName,
            write: function (val) { }
        }));
        var _pageWidth = ko.observable(0);
        _this._disposables.push(_this.pageWidth = ko.pureComputed({
            read: function () {
                var result = _this.defaultPageWidth;
                _this.tables().forEach(function (table) {
                    var right = table.location.x() + table.size.width();
                    if (right > result) {
                        result = right;
                    }
                });
                return Math.max(_pageWidth(), result);
            },
            write: function (value) {
                _pageWidth(value);
            }
        }));
        _this._disposables.push(_this.pageHeight = ko.pureComputed(function () {
            var result = _this.defaultPageHeight;
            _this.tables().forEach(function (table) {
                var bottom = table.location.y() + table.size.height();
                if (bottom > result) {
                    result = bottom + QueryViewModel.pageMargin;
                }
            });
            return result;
        }));
        _this.margins = margins_1.Margins.fromString();
        _this._disposables.push(_this.isValid = ko.pureComputed(function () { return _this._validate(); }));
        var isAllColumnsAllTablesExpression = function (column) { return !column.table() && column.itemType() === columnExpressionMeta_1.ColumnType.AllColumns; };
        _this._disposables.push(_this.allColumnsInTablesSelected = ko.pureComputed({
            read: function () { return _this.columns().some(isAllColumnsAllTablesExpression); },
            write: function (value) {
                if (value) {
                    _this.columns.push(new columnExpression_1.ColumnExpression({ '@ItemType': 'AllColumns' }, _this, serializer));
                }
                else {
                    _this.columns.remove(isAllColumnsAllTablesExpression);
                }
            }
        }));
        if (!_this.sorting)
            _this.sorting = ko.observableArray([]);
        if (!_this.grouping)
            _this.grouping = ko.observableArray([]);
        return _this;
    }
    QueryViewModelBase.prototype._initializeTable = function (table) {
        this.dbSchemaProvider.getDbTable(table.name())
            .done(function (dbTable) {
            table.createColumns(dbTable);
        });
    };
    QueryViewModelBase.prototype._addColumnsToTable = function (table, columns) {
        table._initColumns(columns.map(function (x) {
            return new dbColumn_1.DBColumn({
                Name: x.column()
            });
        }));
    };
    QueryViewModelBase.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this.onSave = null;
    };
    QueryViewModelBase.prototype.addChild = function (control) {
        if (control instanceof relationModel_1.RelationViewModel) {
            if (this.relations.indexOf(control) > -1)
                return;
            control.parentModel(this);
            this.relations.push(control);
        }
        else if (control instanceof tableModel_1.TableViewModel) {
            if (this.tables.indexOf(control) > -1)
                return;
            control.parentModel(this);
            if (_arrayutils_1.getFirstItemByPropertyValue(this.tables(), 'actualName', control.name()) !== null) {
                control.alias(_getNameHelpers_1.getUniqueName(this.tables().map(function (table) { return table.actualName(); }), control.name() + '_'));
            }
            this.tables.push(control);
        }
        else {
            _infoMessageHelpers_1.NotifyAboutWarning('Attempt to add wrong child control.');
        }
    };
    QueryViewModelBase.prototype.removeChild = function (control) {
        if (control instanceof relationModel_1.RelationViewModel) {
            if (this.relations().length < 1)
                return;
            var relation = control;
            var indexRelation = this.relations().indexOf(relation);
            while (relation.conditions().length > 0)
                relation.conditions.pop();
            this.relations.splice(indexRelation, 1);
        }
        else if (control instanceof tableModel_1.TableViewModel) {
            if (this.tables().length < 1)
                return;
            this.tables.splice(this.tables().indexOf(control), 1);
            var relations = this.relations();
            for (var i = relations.length - 1; i > -1; i--) {
                if (relations[i].parentTable() === control || relations[i].nestedTable() === control) {
                    this.removeChild(relations[i]);
                }
            }
            this.sorting.remove(function (item) { return item.isDepended(control.actualName()); });
            this.grouping.remove(function (item) { return item.isDepended(control.actualName()); });
            this.columns.remove(function (item) { return item.isDepended(control.actualName()); });
        }
        else {
            _infoMessageHelpers_1.NotifyAboutWarning('Attempt to remove wrong child control.');
        }
    };
    QueryViewModelBase.prototype.validateRelations = function () {
        var tables = this.tables().map(function (table) { return table.actualName(); });
        this._validateTable(tables, tables[0]);
        return tables.length < 1;
    };
    QueryViewModelBase.prototype._validate = function () {
        if (this.tables().length === 0)
            return false;
        if (!(this.allColumnsInTablesSelected() || this.columns().length > 0))
            return false;
        return this.validateRelations();
    };
    QueryViewModelBase.prototype._validateTable = function (tables, tableName) {
        var _this = this;
        var index = tables.indexOf(tableName);
        if (index < 0)
            return;
        tables.splice(index, 1);
        var connectedTables = this.relations().map(function (relation) {
            if (relation.parentTableName() === tableName)
                return relation.nestedTableName();
            if (relation.nestedTableName() === tableName)
                return relation.parentTableName();
            return null;
        });
        connectedTables.forEach(function (item) { return _this._validateTable(tables, item); });
    };
    QueryViewModelBase.prototype.createChild = function (info, tableViewModel, path) {
        if (!tableViewModel)
            return _super.prototype.createChild.call(this, info);
        this._initializeTable(tableViewModel);
        this.addChild(tableViewModel);
        return tableViewModel;
    };
    QueryViewModelBase.prototype.init = function () {
        var _this = this;
        this.tables().forEach(function (table) {
            var columns = [];
            var sorting = _this.sorting && _this.sorting() || [];
            var grouping = _this.grouping && _this.grouping() || [];
            [_this.columns(), sorting, grouping].forEach(function (currentColumns) {
                currentColumns.forEach(function (column) {
                    if (table.name() === column.table() && column.itemType() === columnExpressionMeta_1.ColumnType.Column &&
                        columns.every(function (x) { return x.column() !== column.column(); })) {
                        columns.push(column);
                    }
                });
            });
            _this._addColumnsToTable(table, columns);
            _this._initializeTable(table);
        });
        this.tables().reduce(function (posX, tableModel) {
            tableModel.location.x(posX);
            tableModel.location.y(_this.topOffset);
            return posX + tableModel.size.width() + tableModel.size.width() / 2;
        }, 30);
        var inProcess = false;
        this._disposables.push(ko.computed(function () {
            if (!inProcess) {
                inProcess = true;
                var allColumns = _this.getAllColumns();
                var withoutAggregate = allColumns.filter(function (x) { return x.aggregate() === columnModelMeta_1.AggregationType.None; });
                _this.aggregatedColumnsCount(allColumns.length - withoutAggregate.length);
                if (allColumns.length !== withoutAggregate.length) {
                    withoutAggregate.filter(function (x) { return x.selected() && !x.groupBy.peek(); }).forEach(function (x) { return x.groupBy(true); });
                }
                else {
                    if (!allColumns.every(function (x) { return !x.selected.peek() || x.groupBy.peek(); })) {
                        allColumns.forEach(function (x) { if (x.groupBy.peek()) {
                            x.groupBy(false);
                        } });
                    }
                }
                inProcess = false;
            }
        }));
    };
    QueryViewModelBase.prototype.getTable = function (name) {
        return _arrayutils_1.findFirstItemMatchesCondition(this.tables(), function (item) { return item.actualName() === name; });
    };
    QueryViewModelBase.prototype.canSave = function (showMessage) {
        if (showMessage === void 0) { showMessage = true; }
        var message = [];
        this.tables().forEach(function (t) {
            t.getInvalidColumns().forEach(function (column) {
                message.push(_utils_1.formatUnicorn(localization_utils_1.getLocalization('The schema does not contain the following column: "{0}"."{1}".', 'DataAccessStringId.ColumnNotInSchemaValidationException'), t.actualName(), column.actualName()));
            });
        });
        if (message.length > 0) {
            showMessage && _infoMessageHelpers_1.ShowMessage(message.join('\n'), 'error');
            return false;
        }
        return true;
    };
    QueryViewModelBase.prototype.save = function () {
        if (!this.canSave())
            return;
        var data = this.serialize(true);
        if (this.onSave) {
            this.onSave(data);
        }
        return data;
    };
    QueryViewModelBase.prototype.serialize = function (includeRootTag) {
        if (includeRootTag === void 0) { includeRootTag = false; }
        return includeRootTag ? { 'Query': this.serialize() } : (new serializer_1.ModelSerializer()).serialize(this);
    };
    QueryViewModelBase.prototype._findTableInAncestors = function (child, probablyAncestor) {
        var _this = this;
        return this.relations().some(function (relation) {
            return relation.nestedTable() === child && (relation.parentTable() === probablyAncestor || _this._findTableInAncestors(relation.parentTable(), probablyAncestor));
        });
    };
    QueryViewModelBase.prototype._findHead = function (table) {
        var result = null;
        this.relations().some(function (relation) {
            if (relation.nestedTable() === table)
                result = relation;
            return !!result;
        });
        return result ? this._findHead(result.parentTable()) : table;
    };
    QueryViewModelBase.prototype._isHead = function (table) {
        return !this.relations().some(function (relation) { return relation.nestedTable() === table; });
    };
    QueryViewModelBase.prototype._reverseRelations = function (table, relationsToReverse) {
        relationsToReverse.forEach(function (item) {
            var tempTable = item.parentTable();
            item.parentTable(item.nestedTable());
            item.nestedTable(tempTable);
            item.conditions().forEach(function (condition) {
                var tempColumn = condition.parentColumnName();
                condition.parentColumnName(condition.nestedColumnName());
                condition.nestedColumnName(tempColumn);
            });
        });
    };
    QueryViewModelBase.prototype.getAllColumns = function () {
        return [].concat.apply([], this.tables().map(function (x) { return x.columns(); }));
    };
    QueryViewModelBase.prototype.cerateJoinCondition = function (parentColumn, nestedColumn) {
        var parentTable = parentColumn.parentModel();
        var nestedTable = nestedColumn.parentModel();
        if (parentTable === nestedTable)
            return null;
        var isColumnsReplaced = false;
        var relation = _arrayutils_1.findFirstItemMatchesCondition(this.relations(), function (relation) {
            isColumnsReplaced = relation.parentTable() === nestedTable && relation.nestedTable() === parentTable;
            return relation.parentTable() === parentTable && relation.nestedTable() === nestedTable || isColumnsReplaced;
        });
        if (relation) {
        }
        else if (this._findTableInAncestors(parentTable, nestedTable)) {
            isColumnsReplaced = true;
        }
        else if (this._findHead(parentTable) !== this._findHead(nestedTable) && !this._isHead(nestedTable)) {
            var parentRelations = this._findAncestorsRelations(parentTable);
            var nestedRelations = this._findAncestorsRelations(nestedTable);
            if (parentRelations.outer > nestedRelations.outer) {
                this._reverseRelations(nestedTable, nestedRelations.relations);
            }
            else if (parentRelations.outer < nestedRelations.outer) {
                this._reverseRelations(parentTable, parentRelations.relations);
                isColumnsReplaced = true;
            }
            else if (parentRelations.inner >= nestedRelations.inner) {
                this._reverseRelations(nestedTable, nestedRelations.relations);
            }
            else if (parentRelations.inner < nestedRelations.inner) {
                this._reverseRelations(parentTable, parentRelations.relations);
                isColumnsReplaced = true;
            }
        }
        if (isColumnsReplaced) {
            var tempTable = parentTable;
            parentTable = nestedTable;
            nestedTable = tempTable;
            var tempColumn = parentColumn;
            parentColumn = nestedColumn;
            nestedColumn = tempColumn;
        }
        relation = relation || this.createChild({
            '@ControlType': 'Relation',
            '@Parent': parentTable.actualName(),
            '@Nested': nestedTable.actualName(),
            '@Type': 'Inner'
        });
        var joinCondition = _arrayutils_1.findFirstItemMatchesCondition(relation.conditions(), function (condition) {
            return condition.parentColumn() === parentColumn && condition.nestedColumn() === nestedColumn;
        });
        if (!joinCondition) {
            joinCondition = relation.createChild({ '@ControlType': 'JoinCondition', '@Parent': parentColumn.name(), '@Nested': nestedColumn.name() });
        }
        return joinCondition;
    };
    QueryViewModelBase.prototype.tryToCreateRelationsByFK = function (sourceTable) { };
    QueryViewModelBase.pageMargin = 20;
    return QueryViewModelBase;
}(queryElementModel_1.QueryElementBaseViewModel));
exports.QueryViewModelBase = QueryViewModelBase;
var QueryViewModel = (function (_super) {
    __extends(QueryViewModel, _super);
    function QueryViewModel(querySource, dbSchemaProvider, parametersMode, beforeSaveCallback, serializer) {
        if (parametersMode === void 0) { parametersMode = parameterModelMeta_1.ParametersMode.ReadWrite; }
        var _this = _super.call(this, _utils_2.extend(true, querySource, QueryViewModel.emptyModel, querySource), dbSchemaProvider, parametersMode, beforeSaveCallback, serializer) || this;
        _this.controlType = 'Query';
        _this['type']('SelectQuery');
        _this.tables = utils_1.deserializeArray(querySource['Tables']['SelectedTables'], function (item) { return new tableModel_1.TableViewModel(item, _this, serializer); });
        _this.columns = utils_1.deserializeArray(querySource['Columns'], function (item) { return new columnExpression_1.ColumnExpression(item, _this, serializer); });
        _this.sorting = utils_1.deserializeArray(querySource['Sorting'], function (item) { return new columnExpression_1.ColumnExpression(item, _this, serializer); });
        _this.grouping = utils_1.deserializeArray(querySource['Grouping'], function (item) { return new columnExpression_1.ColumnExpression(item, _this, serializer); });
        _this.relations = utils_1.deserializeArray(querySource['Tables']['Relations'], function (item) { return new relationModel_1.RelationViewModel(item, _this, serializer); });
        _this.init();
        _this['_tablesObject']['tables'] = _this.tables;
        _this['_tablesObject']['relations'] = _this.relations;
        var parameters = utils_1.deserializeArray(querySource['Parameters'], function (item) { return new parameterModel_1.ParameterViewModel(item, serializer); });
        if (parametersMode === parameterModelMeta_1.ParametersMode.ReadWrite) {
            _this.parameters = parameters;
            _this._disposables.push(_this.parameters.subscribe(function (changes) {
                changes.forEach(function (change) {
                    if (change.status === 'added' && !change.value.name())
                        change.value.name(_getNameHelpers_1.getUniqueName(_this.parameters().filter(function (x) { return x !== change.value; }).map(function (x) { return x.name(); }), 'parameter'));
                });
            }, null, 'arrayChange'));
        }
        else {
            _this._disposables.push(_this.parameters = ko.computed(function () { return parameters(); }));
        }
        _this.filterString = new _qbFilterStringOptions_1.QBFilterStringOptions(_this._filterString, null, ko.pureComputed(function () { return (_this.tables().length === 0) && (_this.filterString && _this.filterString.value().length === 0); }));
        _this.filterString.initializeFilterStringHelper(_this.parameters, parametersMode);
        _this.groupFilterString = new _qbFilterStringOptions_1.QBFilterStringOptions(_this._groupFilterString, null, ko.pureComputed(function () { return !_this.columns().some(_queryBuilderObjectsProvider_1.isAggregatedExpression) && (_this.groupFilterString && (_this.groupFilterString.value() || '').length === 0); }));
        _this.groupFilterString.initializeFilterStringHelper(_this.parameters, parametersMode, new _groupFilterEditorSerializer_1.GroupFilterEditorSerializer(_this.columns));
        return _this;
    }
    QueryViewModel.prototype.isPropertyDisabled = function (name) {
        if (name === 'skip')
            return this.skip() === 0 && !this.sorting().length;
        return false;
    };
    QueryViewModel.prototype.getInfo = function () {
        return queryModelMeta_1.querySerializationsInfo;
    };
    QueryViewModel.prototype.createChild = function (info) {
        return _super.prototype.createChild.call(this, info, info['@ControlType'] === 'Table' ? new tableModel_1.TableViewModel(info, this) : undefined);
    };
    QueryViewModel.prototype.tryToCreateRelationsByFK = function (sourceTable) {
        var _this = this;
        this.dbSchemaProvider.getDbSchema().done(function (dbSchema) {
            var dbSourceTable = dbSchema.tables.filter(function (item) { return item.name === sourceTable.name(); })[0];
            if (dbSourceTable) {
                dbSourceTable.foreignKeys.forEach(function (fk) {
                    var pkTable = _arrayutils_1.getFirstItemByPropertyValue(_this.tables.peek(), 'name', fk.primaryKeyTable);
                    if (pkTable) {
                        for (var i = 0; i < fk.primaryKeyColumns.length; i++) {
                            var column1 = _arrayutils_1.getFirstItemByPropertyValue(sourceTable.columns(), 'name', fk.columns[i]);
                            var column2 = _arrayutils_1.getFirstItemByPropertyValue(pkTable.columns(), 'name', fk.primaryKeyColumns[i]);
                            if (column1 && column2) {
                                _this.cerateJoinCondition(column1, column2);
                            }
                        }
                    }
                });
            }
            _this.tables.peek().forEach(function (table) {
                var dbTable = dbSchema.tables.filter(function (item) { return item.name === table.name(); })[0];
                if (dbTable) {
                    dbTable.foreignKeys.forEach(function (fk) {
                        if (fk.primaryKeyTable === sourceTable.name()) {
                            for (var i = 0; i < fk.primaryKeyColumns.length; i++) {
                                var column1 = _arrayutils_1.getFirstItemByPropertyValue(sourceTable.columns(), 'name', fk.primaryKeyColumns[i]);
                                var column2 = _arrayutils_1.getFirstItemByPropertyValue(table.columns(), 'name', fk.columns[i]);
                                if (column1 && column2) {
                                    _this.cerateJoinCondition(column2, column1);
                                }
                            }
                        }
                    });
                }
            });
        });
    };
    QueryViewModel.emptyModel = { '@ItemType': 'Query', 'Tables': { 'SelectedTables': {}, 'Relations': {} }, 'Columns': {}, 'Sorting': {}, 'Grouping': {} };
    return QueryViewModel;
}(QueryViewModelBase));
exports.QueryViewModel = QueryViewModel;
