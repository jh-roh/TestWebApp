/**
* DevExpress Analytics (query-builder\elements\tableModel.js)
* Version:  22.1.5
* Build date: Sep 5, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.TableViewModel = void 0;
var ko = require("knockout");
var queryElementModel_1 = require("./queryElementModel");
var columnModel_1 = require("./columnModel");
var allColumnsModel_1 = require("./allColumnsModel");
var size_1 = require("../../core/elements/size");
var point_1 = require("../../core/elements/point");
var tableModelMeta_1 = require("./tableModelMeta");
var _arrayutils_1 = require("../../core/utils/_arrayutils");
var TableViewModel = (function (_super) {
    __extends(TableViewModel, _super);
    function TableViewModel(model, parent, serializer) {
        var _this = _super.call(this, model, parent, serializer) || this;
        _this.serializer = serializer;
        _this._columnsConnectionPointLeftX = ko.pureComputed(function () { return _this.location.x(); });
        _this._columnsConnectionPointRightX = ko.pureComputed(function () { return _this.location.x() + _this.size.width(); });
        _this._columns = ko.observableArray();
        _this._initialized = ko.observable(false);
        _this.tableOffset = ko.observable(0);
        _this.size = new size_1.Size(199, 123);
        _this.location = new point_1.Point(0, 0);
        _this.isReady = ko.observable(false);
        _this.allColumnsSelected = ko.computed({
            read: function () {
                var selectedColumns = _this.columns().filter(function (item) { return item.selected(); });
                if (selectedColumns.length === 0) {
                    return false;
                }
                if (selectedColumns.length === _this._columns.peek().length) {
                    return true;
                }
                return false;
            },
            deferEvaluation: true
        });
        _this.isInitialized = ko.pureComputed(function () { return _this._initialized(); });
        _this.itemType = 'Table';
        _this.controlType = 'Table';
        _this._disposables.push(_this.size.height = ko.pureComputed({
            read: function () {
                if (_this._columns().length === 0) {
                    return TableViewModel.TABLE_DEFAULT_HEIGHT + _this.tableOffset();
                }
                return TableViewModel.COLUMNS_OFFSET + (TableViewModel.COLUMN_HEIGHT + TableViewModel.COLUMN_MARGIN) * (_this._columns().length + 1) + _this.tableOffset();
            },
            write: function () {
            }
        }));
        _this.asterisk = new allColumnsModel_1.AllColumnsViewModel(_this, _this.serializer);
        _this._disposables.push(_this.actualName = ko.pureComputed(function () { return _this.alias() || _this.name(); }));
        return _this;
    }
    TableViewModel.prototype.columns = function () {
        return this._columns();
    };
    TableViewModel.prototype.toggleSelectedColumns = function () {
        var value = !this.allColumnsSelected.peek();
        var query = (this.parentModel());
        this._columns.peek().forEach(function (column) { return column.toggleSelected(value, true); });
        query.columns.valueHasMutated();
    };
    TableViewModel.prototype.getColumnConnectionPoints = function (column) {
        var _this = this;
        var y = ko.pureComputed({
            read: function () {
                var index = _this._columns.indexOf(column) + 1;
                return _this.location.y() + TableViewModel.COLUMNS_OFFSET + TableViewModel.COLUMN_MARGIN * index + TableViewModel.COLUMN_HEIGHT * (index + 0.5) + _this.tableOffset();
            },
            deferEvaluation: true
        });
        this._disposables.push(y);
        return {
            left: { x: this._columnsConnectionPointLeftX, y: y },
            right: { x: this._columnsConnectionPointRightX, y: y }
        };
    };
    TableViewModel.prototype.getInfo = function () {
        return tableModelMeta_1.tableSerializationInfo;
    };
    TableViewModel.prototype.getInvalidColumns = function () {
        return this.columns().filter(function (x) { return x.isNotAvailable() && x.selected(); });
    };
    TableViewModel.prototype.getColumn = function (name) {
        return _arrayutils_1.getFirstItemByPropertyValue(this._columns(), 'name', name);
    };
    TableViewModel.prototype._initColumns = function (columns, update) {
        var _this = this;
        if (update === void 0) { update = false; }
        var result = [];
        columns.forEach(function (item) {
            result.push(_this.createChildColumn(item));
        });
        this._columns(update ? [].concat([], this.columns(), result) : result);
    };
    TableViewModel.prototype.createChildColumn = function (item) {
        return new columnModel_1.ColumnViewModel({ '@Name': item.name }, item, this, this.serializer);
    };
    TableViewModel.prototype.createColumns = function (dbTable) {
        var _this = this;
        var notAvailableColumnsCount = 0;
        this.columns().forEach(function (column) {
            var expectedColumn = dbTable.columns.filter(function (x) { return x.name === column.name(); })[0];
            if (expectedColumn) {
                column._type(expectedColumn.type);
                column._size(expectedColumn.size);
            }
            else {
                column.isNotAvailable(dbTable.columns.every(function (x) { return x.name !== column.name(); }));
                notAvailableColumnsCount++;
            }
        });
        if (this.columns().length - notAvailableColumnsCount < dbTable.columns.length) {
            this._initColumns(dbTable.columns.filter(function (x) { return _this.columns().every(function (c) { return c.name() !== x.name; }); }), true);
        }
        this._initialized(true);
    };
    TableViewModel.COLUMNS_OFFSET = 37;
    TableViewModel.COLUMN_HEIGHT = 32;
    TableViewModel.COLUMN_MARGIN = 1;
    TableViewModel.TABLE_MIN_WIDTH = 80;
    TableViewModel.TABLE_DEFAULT_HEIGHT = 136;
    return TableViewModel;
}(queryElementModel_1.QueryElementBaseViewModel));
exports.TableViewModel = TableViewModel;
