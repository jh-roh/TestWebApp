/**
* DevExpress Analytics (query-builder\elements\allColumnsModel.js)
* Version:  22.1.5
* Build date: Sep 5, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.AllColumnsViewModel = void 0;
var ko = require("knockout");
var queryElementModel_1 = require("./queryElementModel");
var _arrayutils_1 = require("../../core/utils/_arrayutils");
var columnExpressionMeta_1 = require("./columnExpressionMeta");
var localization_utils_1 = require("../../property-grid/localization/localization_utils");
var allColumnsModelMeta_1 = require("./allColumnsModelMeta");
var columnExpression_1 = require("./columnExpression");
var AllColumnsViewModel = (function (_super) {
    __extends(AllColumnsViewModel, _super);
    function AllColumnsViewModel(parent, serializer) {
        var _this = _super.call(this, { '@ControlType': 'Column' }, parent, serializer) || this;
        var query = parent.parentModel();
        var targetColumn = ko.pureComputed(function () {
            return _arrayutils_1.findFirstItemMatchesCondition(query.columns(), function (item) {
                return parent.actualName() === item.table() && columnExpressionMeta_1.ColumnType.AllColumns === item.itemType();
            });
        });
        _this.selected = ko.pureComputed({
            read: function () { return !!targetColumn(); },
            write: function (value) {
                if (!!targetColumn() === value)
                    return;
                if (value) {
                    query.columns.push(new columnExpression_1.ColumnExpression({ '@ItemType': columnExpressionMeta_1.ColumnType.AllColumns, '@Table': parent.actualName() }, query, serializer));
                }
                else {
                    query.columns.remove(function (item) { return parent.actualName() === item.table() && columnExpressionMeta_1.ColumnType.AllColumns === item.itemType(); });
                }
            }
        });
        _this.name = ko.pureComputed(AllColumnsViewModel.DisplayName);
        _this._disposables.push(_this.name);
        return _this;
    }
    AllColumnsViewModel.prototype.getInfo = function () {
        return allColumnsModelMeta_1.allColumnsSerializationInfo;
    };
    AllColumnsViewModel.DisplayName = function () {
        var name = localization_utils_1.getLocalization('(All Columns)', 'DataAccessStringId.QueryBuilder_AllColumns');
        return name.charAt(0) === '*' ? name : '* ' + name;
    };
    return AllColumnsViewModel;
}(queryElementModel_1.QueryElementBaseViewModel));
exports.AllColumnsViewModel = AllColumnsViewModel;
