/**
* DevExpress Analytics (query-builder\elements\_federationQueryModel.js)
* Version:  22.1.5
* Build date: Sep 5, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.FederationTableSurface = exports.FederationTableViewModel = exports.FederationQuerySurface = exports.FederationQueryViewModel = exports.federationQuerySerializationsInfo = void 0;
var ko = require("knockout");
var _arrayutils_1 = require("../../core/utils/_arrayutils");
var serializer_1 = require("../../serializer/serializer");
var utils_1 = require("../../serializer/utils");
var _utils_1 = require("../../serializer/_utils");
var sourceQuery_1 = require("../dataSource/federation/federatedQueries/sourceQuery");
var subNode_1 = require("../dataSource/federation/federatedQueries/subNode");
var federatedQueryExpression_1 = require("../dataSource/federation/federatedQueryExpression");
var utils_2 = require("../dataSource/utils");
var _columnExpressionCollectionHelper_1 = require("../utils/_columnExpressionCollectionHelper");
var columnExpression_1 = require("./columnExpression");
var parameterModelMeta_1 = require("./parameterModelMeta");
var queryModel_1 = require("./queryModel");
var querySurface_1 = require("./querySurface");
var tableModel_1 = require("./tableModel");
var tableSurface_1 = require("./tableSurface");
var _federationColumnModel_1 = require("./_federationColumnModel");
exports.federationQuerySerializationsInfo = [
    { propertyName: 'name', modelName: '@Alias' },
    { propertyName: 'type', modelName: '@Type' },
    { propertyName: 'itemType', modelName: '@ItemType' },
    { propertyName: 'queryType', modelName: '@QueryType' },
    { propertyName: 'rootModel', modelName: 'Root' },
    { propertyName: 'expressions', modelName: 'Expressions', array: true },
    { propertyName: 'subNodes', modelName: 'SubNodes', array: true },
];
var FederationQueryViewModel = (function (_super) {
    __extends(FederationQueryViewModel, _super);
    function FederationQueryViewModel(querySource, dataSource, _dbSchemaProvider, parametersMode, serializer) {
        var _a;
        if (parametersMode === void 0) { parametersMode = parameterModelMeta_1.ParametersMode.ReadWrite; }
        var _this = _super.call(this, _utils_1.extend(true, querySource, FederationQueryViewModel.emptyModel, querySource), _dbSchemaProvider, parametersMode, function (data) { return data; }, serializer) || this;
        _this._dbSchemaProvider = _dbSchemaProvider;
        _this.serializer = serializer;
        _this.expressions = ko.observableArray();
        _this.subNodes = ko.observableArray();
        _this.controlType = 'FQuery';
        _this.defaultPageHeight = 300;
        _this.topOffset = 20;
        _this.dataSource = dataSource;
        var _relations = [];
        _this.tables = ko.observableArray();
        if (querySource['Root']) {
            _this.tables.push(_this._createTableViewModel(querySource['Root']));
        }
        (_a = _this.tables).push.apply(_a, Object.keys(querySource['SubNodes']).map(function (key) { return _this._createTableViewModel(querySource['SubNodes'][key]['Query']); }));
        _relations.push.apply(_relations, Object.keys(querySource['SubNodes']).map(function (key) { return new subNode_1.SubNode(querySource['SubNodes'][key], serializer).createRelationModel(_this); }));
        _this.columns = utils_1.deserializeArray(querySource['Expressions'], function (item) { return new columnExpression_1.ColumnExpression({ '@Name': item['@Name'], '@Alias': item['@Alias'], '@Table': item['@NodeAlias'], '#text': item['@ColumnExpression'], '@ItemType': _columnExpressionCollectionHelper_1.ColumnExpressionCollectionHelper.federatedTypeToColumn(item['@ExpressionType']) }, _this, serializer); });
        _this.relations = ko.observableArray(_relations);
        _this.init();
        return _this;
    }
    FederationQueryViewModel.prototype._initializeTable = function (table) {
        this._dbSchemaProvider.getDbTable(table.name(), table.path)
            .done(function (dbTable) {
            table.createColumns(dbTable);
        });
    };
    FederationQueryViewModel.prototype._createTableViewModel = function (model) {
        var path = this.dataSource.getPathFromQueryName(model['@SourceName']);
        return new FederationTableViewModel(model, this, path, this.serializer);
    };
    FederationQueryViewModel.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this.dataSource = null;
    };
    FederationQueryViewModel.prototype.serialize = function (includeRootTag) {
        var serializer = this.serializer || new serializer_1.ModelSerializer();
        this.expressions(this.columns().map(function (column) {
            var model = {
                '@Alias': column.alias(),
                '@ColumnExpression': column.expression(),
                '@Name': column.column(),
                '@NodeAlias': column.table()
            };
            model['@ExpressionType'] = _columnExpressionCollectionHelper_1.ColumnExpressionCollectionHelper.columnTypeToFederated(column.itemType());
            return new federatedQueryExpression_1.FederatedQueryExpression(model, serializer);
        }));
        this.rootModel(this.tables()[0]);
        var _tables = this.tables();
        _tables.shift();
        var _relations = this.relations();
        this.subNodes(_tables.map(function (table) {
            var relation = _arrayutils_1.findFirstItemMatchesCondition(_relations, function (relation) { return relation.nestedTable() === table; });
            if (!relation)
                relation = _arrayutils_1.findFirstItemMatchesCondition(_relations, function (relation) { return relation.parentTable() === table; });
            _relations.splice(_relations.indexOf(relation), 1);
            return subNode_1.SubNode.deserializeRelationModel(table, relation);
        }));
        return _super.prototype.serialize.call(this, includeRootTag);
    };
    FederationQueryViewModel.prototype.createChild = function (info, model, path) {
        return _super.prototype.createChild.call(this, info, info['@ControlType'] === 'FTable' ? new FederationTableViewModel(info, this, path) : undefined);
    };
    FederationQueryViewModel.prototype.cerateJoinCondition = function (parentColumn, nestedColumn) {
        var parentTable = parentColumn.parentModel();
        var nestedTable = nestedColumn.parentModel();
        if (this.tables().indexOf(parentTable) > this.tables.indexOf(nestedTable))
            return null;
        return _super.prototype.cerateJoinCondition.call(this, parentColumn, nestedColumn);
    };
    FederationQueryViewModel.prototype.getInfo = function () {
        return exports.federationQuerySerializationsInfo;
    };
    FederationQueryViewModel.emptyModel = { '@ItemType': 'Query', 'SubNodes': {}, 'Expressions': {} };
    return FederationQueryViewModel;
}(queryModel_1.QueryViewModelBase));
exports.FederationQueryViewModel = FederationQueryViewModel;
var FederationQuerySurface = (function (_super) {
    __extends(FederationQuerySurface, _super);
    function FederationQuerySurface() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return FederationQuerySurface;
}(querySurface_1.QuerySurface));
exports.FederationQuerySurface = FederationQuerySurface;
var FederationTableViewModel = (function (_super) {
    __extends(FederationTableViewModel, _super);
    function FederationTableViewModel(model, parent, path, serializer) {
        var _this = _super.call(this, model, parent, serializer) || this;
        _this.controlType = 'FTable';
        if (path && !model['@SourceName'])
            _this.sourceName(parent.dataSource.getQueryNameFromPath(path));
        if (!_this.name()) {
            _this.name(_this.sourceName());
        }
        !_this.alias() && _this.alias(_this.name());
        _this._disposables.push(_this.queryType = ko.pureComputed(function () { return utils_2.FederationQueryType[utils_2.FederationQueryType.SourceNode]; }));
        _this.tableOffset(12);
        var pathParts = path.split('.');
        var dataSource = parent.dataSource.dataSources().filter(function (x) {
            return x.id === pathParts[0] || x.ref === pathParts[0] || x.name === pathParts[0];
        })[0];
        _this.path = (dataSource.id || dataSource.ref) + (pathParts.length > 1 ? '.' + pathParts.slice(1).join('.') : '');
        _this.displaySourceName = ko.observable(dataSource.name);
        _this.asterisk = new _federationColumnModel_1.FederationAllColumnsViewModel(_this, _this.serializer);
        return _this;
    }
    FederationTableViewModel.prototype.getInfo = function () {
        return sourceQuery_1.sourceQuerySerializationsInfo;
    };
    FederationTableViewModel.prototype.getPath = function () {
        return this.path;
    };
    FederationTableViewModel.prototype.createChildColumn = function (item) {
        return new _federationColumnModel_1.FederationColumnViewModel({ '@Name': item.name }, item, this, this.serializer);
    };
    return FederationTableViewModel;
}(tableModel_1.TableViewModel));
exports.FederationTableViewModel = FederationTableViewModel;
var FederationTableSurface = (function (_super) {
    __extends(FederationTableSurface, _super);
    function FederationTableSurface() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.titletemplate = 'dxqb-federation-table-title';
        return _this;
    }
    return FederationTableSurface;
}(tableSurface_1.TableSurface));
exports.FederationTableSurface = FederationTableSurface;
