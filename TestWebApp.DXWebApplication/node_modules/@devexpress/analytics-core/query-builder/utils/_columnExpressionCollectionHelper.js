/**
* DevExpress Analytics (query-builder\utils\_columnExpressionCollectionHelper.js)
* Version:  22.1.5
* Build date: Sep 5, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ColumnExpressionCollectionHelper = void 0;
var ko = require("knockout");
var columnExpression_1 = require("../elements/columnExpression");
var _arrayutils_1 = require("../../core/utils/_arrayutils");
var _getNameHelpers_1 = require("../../core/internal/_getNameHelpers");
var columnExpressionMeta_1 = require("../elements/columnExpressionMeta");
var federatedQueryExpression_1 = require("../dataSource/federation/federatedQueryExpression");
var ColumnExpressionCollectionHelper = (function () {
    function ColumnExpressionCollectionHelper() {
    }
    ColumnExpressionCollectionHelper.find = function (collection, tableName, columnName) {
        return _arrayutils_1.findFirstItemMatchesCondition(collection(), function (item) { return item.column() === columnName && item.table() === tableName; });
    };
    ColumnExpressionCollectionHelper.findByName = function (collection, actualName) {
        return _arrayutils_1.findFirstItemMatchesCondition(collection(), function (item) { return item.actualName() === actualName; });
    };
    ColumnExpressionCollectionHelper.removeDependend = function (collection, tableName) {
        collection.remove(function (item) { return item.isDepended(tableName); });
    };
    ColumnExpressionCollectionHelper.toExpresson = function (column, columns, value) {
        column.table = ko.observable(null);
        column.column = ko.observable(null);
        column.expression = column['__expression'];
        column.itemType(columnExpressionMeta_1.ColumnType[columnExpressionMeta_1.ColumnType.Expression]);
        if (!column.alias())
            column.alias(ColumnExpressionCollectionHelper.setUniqueAlias(columns, 'Expr'));
        column.expression(value);
    };
    ColumnExpressionCollectionHelper.setUniqueAlias = function (collection, alias) {
        if (ColumnExpressionCollectionHelper.findByName(collection, alias)) {
            return _getNameHelpers_1.getUniqueName(collection().map(function (item) { return item.actualName(); }), alias + '_');
        }
        return alias;
    };
    ColumnExpressionCollectionHelper.createNew = function (query, collection, table, column) {
        var newItem = new columnExpression_1.ColumnExpression({ '@Table': table, '@Name': column, '@ItemType': 'Column' }, query);
        if (query.columns === collection && !newItem.alias() && ColumnExpressionCollectionHelper.findByName(collection, newItem.actualName())) {
            newItem.alias(this.setUniqueAlias(collection, newItem.table() + '_' + newItem.column()));
        }
        return newItem;
    };
    ColumnExpressionCollectionHelper.addNew = function (query, collection, table, column, lazy) {
        if (lazy === void 0) { lazy = false; }
        var newItem = this.createNew(query, collection, table, column);
        (lazy ? collection() : collection).push(newItem);
        return newItem;
    };
    ColumnExpressionCollectionHelper.remove = function (collection, tableName, columnName, lazy) {
        if (lazy === void 0) { lazy = false; }
        if (!lazy) {
            collection.remove(function (item) { return item.column() === columnName && item.table() === tableName; });
        }
        else
            for (var i = 0; i < collection().length; i++) {
                if (collection()[i].column() === columnName && collection()[i].table() === tableName) {
                    collection().splice(i, 1);
                    return;
                }
            }
    };
    ColumnExpressionCollectionHelper.columnTypeToFederated = function (type) {
        switch (type) {
            case columnExpressionMeta_1.ColumnType[columnExpressionMeta_1.ColumnType.Expression]:
                return federatedQueryExpression_1.FederatedQueryExpressionType[federatedQueryExpression_1.FederatedQueryExpressionType.SelectExpression];
            case columnExpressionMeta_1.ColumnType[columnExpressionMeta_1.ColumnType.AllColumns]:
                return federatedQueryExpression_1.FederatedQueryExpressionType[federatedQueryExpression_1.FederatedQueryExpressionType.SelectAllNodeColumnsExpression];
            case columnExpressionMeta_1.ColumnType[columnExpressionMeta_1.ColumnType.AllColumnsQuery]:
                return federatedQueryExpression_1.FederatedQueryExpressionType[federatedQueryExpression_1.FederatedQueryExpressionType.SelectAllColumnsExpression];
            default:
                return federatedQueryExpression_1.FederatedQueryExpressionType[federatedQueryExpression_1.FederatedQueryExpressionType.SelectColumnExpression];
        }
    };
    ColumnExpressionCollectionHelper.federatedTypeToColumn = function (type) {
        switch (type) {
            case federatedQueryExpression_1.FederatedQueryExpressionType[federatedQueryExpression_1.FederatedQueryExpressionType.SelectExpression]:
                return columnExpressionMeta_1.ColumnType[columnExpressionMeta_1.ColumnType.Expression];
            case federatedQueryExpression_1.FederatedQueryExpressionType[federatedQueryExpression_1.FederatedQueryExpressionType.SelectAllNodeColumnsExpression]:
                return columnExpressionMeta_1.ColumnType[columnExpressionMeta_1.ColumnType.AllColumns];
            case federatedQueryExpression_1.FederatedQueryExpressionType[federatedQueryExpression_1.FederatedQueryExpressionType.SelectAllColumnsExpression]:
                return columnExpressionMeta_1.ColumnType[columnExpressionMeta_1.ColumnType.AllColumnsQuery];
            default:
                return columnExpressionMeta_1.ColumnType[columnExpressionMeta_1.ColumnType.Column];
        }
    };
    return ColumnExpressionCollectionHelper;
}());
exports.ColumnExpressionCollectionHelper = ColumnExpressionCollectionHelper;
