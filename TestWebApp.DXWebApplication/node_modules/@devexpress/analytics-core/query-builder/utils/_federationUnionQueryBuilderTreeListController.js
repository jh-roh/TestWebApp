/**
* DevExpress Analytics (query-builder\utils\_federationUnionQueryBuilderTreeListController.js)
* Version:  22.1.5
* Build date: Sep 5, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.FederatedTransformQueryBuilderTreeListController = exports.FederatedUnionQueryBuilderTreeListController = void 0;
var _treelistController_1 = require("../../widgets/treelist/_treelistController");
var FederatedUnionQueryBuilderTreeListController = (function (_super) {
    __extends(FederatedUnionQueryBuilderTreeListController, _super);
    function FederatedUnionQueryBuilderTreeListController(dragDropHandler, dblClickHandler) {
        var _this = _super.call(this) || this;
        _this.dragDropHandler = dragDropHandler;
        _this.dblClickHandler = dblClickHandler;
        return _this;
    }
    FederatedUnionQueryBuilderTreeListController.prototype.itemsFilter = function (item, path, model) {
        if (item.specifics === 'none')
            return false;
        return true;
    };
    FederatedUnionQueryBuilderTreeListController.prototype.isDraggable = function (item) {
        if (!item.data)
            return false;
        if (item.data.isListType || item.data.isSupportQueries === false) {
            var parent = item.parent;
            while (parent && parent.data) {
                if (parent.data.isListType)
                    return false;
                parent = parent.parent;
            }
            return true;
        }
        return false;
    };
    return FederatedUnionQueryBuilderTreeListController;
}(_treelistController_1.TreeListController));
exports.FederatedUnionQueryBuilderTreeListController = FederatedUnionQueryBuilderTreeListController;
var FederatedTransformQueryBuilderTreeListController = (function (_super) {
    __extends(FederatedTransformQueryBuilderTreeListController, _super);
    function FederatedTransformQueryBuilderTreeListController() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FederatedTransformQueryBuilderTreeListController.prototype.itemsFilter = function (item, path, model) {
        return _super.prototype.itemsFilter.call(this, item, path, model) && item.isList;
    };
    FederatedTransformQueryBuilderTreeListController.prototype.hasItems = function (item) {
        return _super.prototype.hasItems.call(this, item) && (!item.isListType || item.isSupportQueries === false);
    };
    return FederatedTransformQueryBuilderTreeListController;
}(FederatedUnionQueryBuilderTreeListController));
exports.FederatedTransformQueryBuilderTreeListController = FederatedTransformQueryBuilderTreeListController;
