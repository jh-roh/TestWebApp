/**
* DevExpress Analytics (query-builder\wizard\internal\federationDataSource\_federationSelectQueryBuilderPopup.js)
* Version:  22.1.5
* Build date: Sep 5, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.FederationSelectQueryBuilderPopup = void 0;
var $ = require("jquery");
var ko = require("knockout");
var _surfaceHelpers_1 = require("../../../../core/internal/_surfaceHelpers");
var _localization_1 = require("../../../../property-grid/localization/_localization");
var templateUtils_1 = require("../../../../property-grid/widgets/templateUtils");
var serializer_1 = require("../../../../serializer/serializer");
var _internal_1 = require("../../../../serializer/_internal");
var _utils_1 = require("../../../../serializer/_utils");
var _functions_1 = require("../../../../widgets/expressioneditor/tools/_functions");
var _resizeHelper_1 = require("../../../../widgets/internal/_resizeHelper");
var federatedQueryExpression_1 = require("../../../dataSource/federation/federatedQueryExpression");
var allColumnsModel_1 = require("../../../elements/allColumnsModel");
var columnExpression_1 = require("../../../elements/columnExpression");
var columnExpressionMeta_1 = require("../../../elements/columnExpressionMeta");
var _federationQueryModel_1 = require("../../../elements/_federationQueryModel");
var controlsFactory_1 = require("../../../utils/controlsFactory");
var _columnExpressionCollectionHelper_1 = require("../../../utils/_columnExpressionCollectionHelper");
var _federationQueryBuilderPopupBase_1 = require("./_federationQueryBuilderPopupBase");
var _federationTablesExpressionFieldListProvider_1 = require("./_federationTablesExpressionFieldListProvider");
var FederationSelectQueryBuilderPopup = (function (_super) {
    __extends(FederationSelectQueryBuilderPopup, _super);
    function FederationSelectQueryBuilderPopup(onSaveCallback, dataSource, rtl, onCloseCallback) {
        if (rtl === void 0) { rtl = false; }
        var _this = _super.call(this, onSaveCallback, dataSource, rtl, onCloseCallback) || this;
        _this.popupContentTemplate = 'dxrd-querybuilder-select-popup-content';
        _this._querySource = ko.observable(null);
        _this.designer = ko.observable(null);
        _this.joinResultCollapsed = ko.observable(false);
        _this.width = '90%';
        _this.height = '90%';
        _this.cssClass = 'dxrd-querybuilder-federation-popup-wrapper dxrd-querybuilder-select-federation-popup';
        _this._qbOptions = {
            queryBuilderModel: _this.designer,
            dataSource: dataSource,
            dbSchemaProvider: ko.observable(dataSource.dbSchemaProvider),
            showPropertyGridCondition: function (model) { return model.controlType === 'JoinCondition' || model.controlType === 'FTable' || model.controlType === 'Column'; },
            querySource: _this._querySource,
        };
        _this.queryBuilderSurfaceCreator = {
            options: _this._qbOptions,
            creator: function (options) {
                return new _federationQueryModel_1.FederationQueryViewModel(options.querySource(), options.dataSource, options.dbSchemaProvider(), options.parametersMode, new serializer_1.ModelSerializer());
            }
        };
        var rootItems = [{ name: 'DataSource', needPrefix: false, rootPath: 'Root' }];
        _this.allColumns = ko.pureComputed(function () {
            var columns = [];
            if (_this._getQuery()) {
                var tableName = '';
                columns.push({ column: allColumnsModel_1.AllColumnsViewModel.DisplayName(), table: tableName, key: federatedQueryExpression_1.FederatedQueryExpressionType[federatedQueryExpression_1.FederatedQueryExpressionType.SelectAllColumnsExpression] });
                var allColumns = _this._getQuery().getAllColumns().map(function (x) {
                    var tableModel = x.parentModel();
                    return {
                        column: x.name(),
                        table: tableModel.actualName(),
                        key: _this._generateKey(tableModel.actualName(), x.name(), x.actualName(), x.alias())
                    };
                });
                allColumns.forEach(function (column) {
                    if (column.table && tableName !== column.table) {
                        columns.push({ column: allColumnsModel_1.AllColumnsViewModel.DisplayName(), table: column.table, key: column.table + '_' + federatedQueryExpression_1.FederatedQueryExpressionType[federatedQueryExpression_1.FederatedQueryExpressionType.SelectAllNodeColumnsExpression] });
                    }
                    tableName = column.table;
                    columns.push(column);
                });
            }
            return columns;
        });
        _this.columnsExpressions = ko.pureComputed(function () { return _this._getQuery() && _this._getQuery().columns().map(function (x, index) {
            var key;
            var column;
            if (x.actualName()) {
                key = _this._generateKey(x.table(), x.column(), x.actualName(), x.alias());
            }
            if (x.itemType() === columnExpressionMeta_1.ColumnType[columnExpressionMeta_1.ColumnType.Column]) {
                column = x.column();
            }
            else if (x.itemType() === columnExpressionMeta_1.ColumnType[columnExpressionMeta_1.ColumnType.Expression]) {
                column = x.expression();
            }
            else if (x.itemType() === columnExpressionMeta_1.ColumnType[columnExpressionMeta_1.ColumnType.AllColumns]) {
                key = x.table() + '_' + federatedQueryExpression_1.FederatedQueryExpressionType[federatedQueryExpression_1.FederatedQueryExpressionType.SelectAllNodeColumnsExpression];
                column = allColumnsModel_1.AllColumnsViewModel.DisplayName();
            }
            else if (x.itemType() === columnExpressionMeta_1.ColumnType[columnExpressionMeta_1.ColumnType.AllColumnsQuery]) {
                key = federatedQueryExpression_1.FederatedQueryExpressionType[federatedQueryExpression_1.FederatedQueryExpressionType.SelectAllColumnsExpression];
                column = allColumnsModel_1.AllColumnsViewModel.DisplayName();
            }
            return {
                alias: x.alias(),
                key: key,
                index: index,
                column: column,
                table: x.table(),
                isExpression: ko.observable(x.itemType() === columnExpressionMeta_1.ColumnType[columnExpressionMeta_1.ColumnType.Expression] ? true : false),
                expression: x.expression
            };
        }); });
        _this._disposables.push(_this.columnsExpressions, _this.allColumns);
        var cellTemplateMask = function (container, options) {
            if (options.data.key && _this._isSelectAllItemByKey(options.data.key)) {
                return cellTemplate(container, options);
            }
            var templateHtml = templateUtils_1.getTemplate('dxrd-querybuilder-column-combobox-masked'), $element = $(container).append(templateHtml);
            var model = {
                cellInfo: options.data,
                isExpression: options.data.isExpression || ko.observable(false),
                switchEditors: function () { return null; }
            };
            ko.applyBindings(model, $element[0]);
        };
        var cellTemplate = function (container, options) {
            var $container = $(container);
            var childContext = _this._bindingContext.createChildContext({
                allColumns: _this.allColumns,
                itemsProvider: new _federationTablesExpressionFieldListProvider_1.FederationTablesExpressionFieldListProvider(_this._dataSource.dbSchemaProvider, _this._getQuery().tables),
                cellInfo: options.data,
                expression: { value: options.data.expression, onContentReady: _this._onContentReady, path: ko.observable(rootItems[0].name), customizeCategories: function () { }, rootItems: rootItems, functions: _functions_1.functionDisplay().filter(function (cat) { return cat.category != 'Aggregate'; }) },
                isExpression: options.data.isExpression || ko.observable(false),
                changeColumn: function (selectionChangedArgs) {
                    _this._changeColumn(selectionChangedArgs.selectedRowsData[0], selectionChangedArgs.model.cellInfo.index);
                },
                switchEditors: function (e) {
                    _this._switchEditors(e.model.cellInfo);
                }
            });
            var child = document.createElement('div'), $container = $container.append(child);
            ko.renderTemplate('dxrd-querybuilder-column-combobox', childContext, {}, child, 'replaceNode');
            _internal_1.addDisposeCallback(container, function () {
                $container = null;
                child = null;
                childContext = null;
            });
        };
        _this._disposables.push(_this.addRowDisabled = ko.pureComputed(function () {
            return !_this._getQuery() || _this._getQuery().tables().length === 0;
        }));
        _this.columnsGrid = {
            rtlEnabled: rtl,
            dataSource: _this.columnsExpressions,
            disabled: _this.addRowDisabled,
            showRowLines: true,
            height: '100%',
            showBorders: true,
            editing: {
                allowUpdating: function (grid) {
                    return !(grid.row && grid.row.data.key &&
                        _this._isSelectAllItemByKey(grid.row.data.key));
                },
                newRowPosition: 'last',
                mode: 'cell',
                texts: {
                    confirmDeleteMessage: '',
                }
            },
            paging: { enabled: false },
            columns: [{
                    dataField: 'column',
                    get caption() {
                        return _localization_1.getLocalization('Column Name', 'DataAccessUIStringId.QueryBuilderColumns_ColumnName');
                    },
                    cssClass: 'dx-editor-cell',
                    editCellTemplate: cellTemplate,
                    cellTemplate: cellTemplateMask
                }, {
                    dataField: 'table',
                    get caption() {
                        return _localization_1.getLocalization('Table Name', 'DataAccessUIStringId.QueryBuilderColumns_TableName');
                    },
                    allowEditing: false
                }, {
                    dataField: 'alias',
                    get caption() {
                        return _localization_1.getLocalization('Alias', 'DataAccessUIStringId.QueryBuilderColumns_Alias');
                    },
                    disabled: true,
                    validationRules: [_this._aliasValidationRule, {
                            type: 'custom',
                            validationCallback: function (options) {
                                if (options.value === '' && options.data && options.data.key) {
                                    var existedColumn = _columnExpressionCollectionHelper_1.ColumnExpressionCollectionHelper.findByName(_this._getQuery().columns, options.data.key);
                                    if (existedColumn && existedColumn.itemType() === columnExpressionMeta_1.ColumnType[columnExpressionMeta_1.ColumnType.Expression])
                                        return false;
                                }
                                return true;
                            },
                            get message() { return _localization_1.getLocalization('The column name is not specified.', 'DataAccessStringId.UnnamedColumnValidationException'); }
                        }]
                },
                {
                    type: 'buttons',
                    width: 50,
                    buttons: [
                        {
                            icon: 'delete',
                            onClick: function (e) {
                                _this._deleteRow(e.row.data.index != null ? e.row.data.index : _this._getQuery().columns().length);
                            },
                            cssClass: 'dxrd-querybuilder-grid-actions dxd-icon-highlighted dxrd-image-recycle-bin',
                            template: templateUtils_1.getTemplate('dxrd-svg-operations-recycle_bin'),
                        }
                    ]
                }
            ],
            onInitialized: function (e) {
                _this._bindingContext = ko.contextFor($(e.element)[0]);
                _this._gridComponent = e.component;
            },
            onRowUpdating: function (event) {
                _this._onRowUpdating(event.oldData, event.newData);
            }
        };
        _this.gridResizeHelper = new _resizeHelper_1.ResizeHelper(_this.resultGridHeight, _this.joinResultCollapsed);
        return _this;
    }
    FederationSelectQueryBuilderPopup.prototype._onContentReady = function (e) {
        if (!e.component._isFirstLoad) {
            e.component._isFirstLoad = true;
            var element = $(e.component.content())[0];
            var contentEl = element.parentElement;
            contentEl.className += '  dx-dropdowneditor-overlay';
        }
    };
    FederationSelectQueryBuilderPopup.prototype._getQuery = function () {
        return this.designer() && this.designer().model();
    };
    FederationSelectQueryBuilderPopup.prototype._afterChangeColumn = function (colIndex, notifyCallback) {
        var _this = this;
        this._gridComponent.saveEditData().then(function () {
            _this._gridComponent.cancelEditData();
            var event = function () {
                var rows = _this._gridComponent.getVisibleRows();
                var index = colIndex != null ? colIndex : rows.length - 1;
                _this._gridComponent.editCell(index, 0);
                _this._gridComponent.navigateToRow(_this.columnsExpressions()[index]);
                _this._gridComponent.off('contentReady', event);
            };
            _this._gridComponent.on('contentReady', event);
            notifyCallback();
        });
    };
    FederationSelectQueryBuilderPopup.prototype._changeColumn = function (columnData, insertIndex) {
        var _this = this;
        if (columnData) {
            var query = _columnExpressionCollectionHelper_1.ColumnExpressionCollectionHelper.createNew(this._getQuery(), this._getQuery().columns, columnData.table, columnData.column);
            if (this._isSelectAllItemByKey(columnData.key)) {
                query = columnData.table ?
                    new columnExpression_1.ColumnExpression({ '@Table': columnData.table, '@ItemType': columnExpressionMeta_1.ColumnType[columnExpressionMeta_1.ColumnType.AllColumns] }, this._getQuery()) :
                    new columnExpression_1.ColumnExpression({ '@ItemType': columnExpressionMeta_1.ColumnType[columnExpressionMeta_1.ColumnType.AllColumnsQuery] }, this._getQuery());
            }
            var callback = function () { return insertIndex != null ? _this._getQuery().columns.splice(insertIndex, 1, query) : _this._getQuery().columns.push(query); };
            this._afterChangeColumn(insertIndex, callback);
        }
    };
    FederationSelectQueryBuilderPopup.prototype._switchEditors = function (model) {
        var _this = this;
        var column;
        var callback = function () { return _this._getQuery().columns.notifySubscribers(); };
        if (model.index != null) {
            column = this._getQuery().columns()[model.index];
            if (model.isExpression()) {
                column.toTable();
            }
            else if (column.itemType() === columnExpressionMeta_1.ColumnType[columnExpressionMeta_1.ColumnType.AllColumns] || column.itemType() === columnExpressionMeta_1.ColumnType[columnExpressionMeta_1.ColumnType.AllColumnsQuery]) {
                column = new columnExpression_1.ColumnExpression({}, this._getQuery());
                _columnExpressionCollectionHelper_1.ColumnExpressionCollectionHelper.toExpresson(column, this._getQuery().columns, '');
                this._getQuery().columns.splice(model.index, 1, column);
            }
            else {
                var epressionValue = column.column() ? '[' + column.table() + '.' + column.column() + ']' : '';
                _columnExpressionCollectionHelper_1.ColumnExpressionCollectionHelper.toExpresson(column, this._getQuery().columns, epressionValue);
            }
        }
        else {
            column = new columnExpression_1.ColumnExpression({}, this._getQuery());
            _columnExpressionCollectionHelper_1.ColumnExpressionCollectionHelper.toExpresson(column, this._getQuery().columns, '');
            callback = function () { return _this._getQuery().columns.push(column); };
        }
        this._afterChangeColumn(model.index, callback);
    };
    FederationSelectQueryBuilderPopup.prototype._deleteRow = function (deleteIndex) {
        this._gridComponent.deleteRow(deleteIndex);
        this._gridComponent.deselectAll();
        this._getQuery().columns.splice(deleteIndex, 1);
    };
    FederationSelectQueryBuilderPopup.prototype._onRowUpdating = function (oldData, newData) {
        var column = this._getQuery().columns()[oldData.index];
        if (column) {
            column.alias(newData.alias);
        }
        oldData.alias = newData.alias;
        this._gridComponent.saveEditData();
    };
    FederationSelectQueryBuilderPopup.prototype._aliasValidationCallback = function (alias, data) {
        if (alias === data.alias && alias === data.key)
            return true;
        return !_columnExpressionCollectionHelper_1.ColumnExpressionCollectionHelper.findByName(this._getQuery().columns, alias);
    };
    FederationSelectQueryBuilderPopup.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this._bindingContext = null;
        this._gridComponent = null;
        this._qbOptions = null;
        this.queryBuilderSurfaceCreator = null;
        this.columnsGrid = null;
    };
    FederationSelectQueryBuilderPopup.prototype._generateKey = function (tableName, columnName, actualName, alias) {
        return alias === actualName ? actualName : tableName + '_' + columnName;
    };
    FederationSelectQueryBuilderPopup.prototype._isSelectAllItemByKey = function (key) {
        return key === federatedQueryExpression_1.FederatedQueryExpressionType[federatedQueryExpression_1.FederatedQueryExpressionType.SelectAllColumnsExpression] ||
            key.indexOf(federatedQueryExpression_1.FederatedQueryExpressionType[federatedQueryExpression_1.FederatedQueryExpressionType.SelectAllNodeColumnsExpression]) !== -1;
    };
    FederationSelectQueryBuilderPopup.prototype.save = function () {
        this.selectQuery.init(this._getQuery().serialize());
        this.onSaveCallback(this.selectQuery);
        this.close();
    };
    FederationSelectQueryBuilderPopup.prototype.addRow = function () {
        this._gridComponent.addRow();
        this._gridComponent.deselectAll();
    };
    FederationSelectQueryBuilderPopup.prototype.canSave = function () {
        return this._getQuery() && this._getQuery().isValid();
    };
    FederationSelectQueryBuilderPopup.prototype.addDataMember = function (item, position) {
        var query = this._getQuery();
        if (query.tables().length > 1 && !query.validateRelations())
            return;
        var name = item.data.displayName || item.data.name;
        var newControl = query.createChild(_utils_1.extend({
            '@ControlType': 'FTable',
            '@Name': name
        }, controlsFactory_1.controlsFactory.controlsMap['FTable'].defaultVal), undefined, item.path);
        var controlSurface = ko.unwrap(_surfaceHelpers_1.findSurface(newControl));
        if (!position) {
            var posX = Math.max.apply(null, query.tables.peek()
                .filter(function (t) { return t !== newControl; })
                .map(function (t) { return t.location.x.peek() + t.size.width.peek() * 1.25; })
                .concat([30]));
            newControl.location.x(posX);
            newControl.location.y(20);
        }
        else {
            var _querySurface = ko.unwrap(_surfaceHelpers_1.findSurface(this.designer()));
            _querySurface.underCursor().x = position.left - _querySurface['absolutePosition'].x();
            _querySurface.underCursor().y = position.top - _querySurface['absolutePosition'].y();
            controlSurface.rect({ left: _querySurface.underCursor().x, top: _querySurface.underCursor().y, width: 199 });
        }
        this.designer().selection.initialize(controlSurface);
    };
    FederationSelectQueryBuilderPopup.prototype.show = function (query) {
        this.selectQuery = query;
        this._querySource(new serializer_1.ModelSerializer().serialize(query));
        this.popupVisible(true);
    };
    FederationSelectQueryBuilderPopup.prototype.popupTarget = function () {
        return '.dxrd-select-querybuilder-surface .dxqb-main';
    };
    return FederationSelectQueryBuilderPopup;
}(_federationQueryBuilderPopupBase_1.FederationQueryBuilderPopupBase));
exports.FederationSelectQueryBuilderPopup = FederationSelectQueryBuilderPopup;
