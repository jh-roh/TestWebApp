/**
* DevExpress Analytics (query-builder\wizard\internal\federationDataSource\_federatedQueriesTreeNode.js)
* Version:  22.1.5
* Build date: Sep 5, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.FederatedQueriesTreeNode = void 0;
var _localization_1 = require("../../../../property-grid/localization/_localization");
var _treeListNode_1 = require("../_treeListNode");
var FederatedQueriesTreeNode = (function (_super) {
    __extends(FederatedQueriesTreeNode, _super);
    function FederatedQueriesTreeNode(name, displayName, specifics, isChecked, callbacks, afterCheckToggled) {
        var _this = _super.call(this, name, displayName, specifics, isChecked, callbacks, afterCheckToggled) || this;
        _this.callbacks = callbacks;
        _this.addAction = {
            clickAction: function () {
                return _this.showPopover();
            },
            imageClassName: 'dxrd-image-add',
            imageTemplateName: 'dxrd-svg-operations-add',
            templateName: 'dx-treelist-federation-action-with-popover',
            text: _localization_1.getLocalization('Add query', 'AnalyticsCoreStringId.SqlDSWizard_AddQuery')
        };
        _this.className = 'dxrd-federation-addqueries-popover';
        return _this;
    }
    FederatedQueriesTreeNode.prototype.getActions = function (context) {
        var result = [];
        if (context.path.indexOf('queries') === 0) {
            result.push(this.addAction);
        }
        return result;
    };
    FederatedQueriesTreeNode.prototype.popoverListItems = function () {
        var _this = this;
        return [
            {
                name: _localization_1.getLocalization('Join', 'DataAccessUIStringId.FederationDataSourceQueryBuilder_NodeType_Select'),
                addAction: function () { return _this.callbacks().showQbCallBacks.joinCallBack(); },
                className: this.className
            },
            {
                name: _localization_1.getLocalization('Union', 'DataAccessUIStringId.FederationDataSourceQueryBuilder_NodeType_Union'),
                addAction: function () { return _this.callbacks().showQbCallBacks.unionCallBack(); },
                className: this.className
            },
            {
                name: _localization_1.getLocalization('Transform', 'DataAccessUIStringId.FederationDataSourceQueryBuilder_NodeType_Transform'),
                addAction: function () { return _this.callbacks().showQbCallBacks.transformCallBack(); },
                className: this.className
            }
        ];
    };
    return FederatedQueriesTreeNode;
}(_treeListNode_1.QueriesTreeNode));
exports.FederatedQueriesTreeNode = FederatedQueriesTreeNode;
