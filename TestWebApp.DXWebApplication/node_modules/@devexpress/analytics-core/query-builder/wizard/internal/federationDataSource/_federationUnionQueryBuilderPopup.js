/**
* DevExpress Analytics (query-builder\wizard\internal\federationDataSource\_federationUnionQueryBuilderPopup.js)
* Version:  22.1.5
* Build date: Sep 5, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.FederationUnionQueryBuilderPopup = void 0;
var ko = require("knockout");
var _arrayutils_1 = require("../../../../core/utils/_arrayutils");
var _localization_1 = require("../../../../property-grid/localization/_localization");
var templateUtils_1 = require("../../../../property-grid/widgets/templateUtils");
var pathRequest_1 = require("../../../../widgets/common/pathRequest");
var unionQuery_1 = require("../../../dataSource/federation/federatedQueries/unionQuery");
var _federationQueryBuilderPopupBase_1 = require("./_federationQueryBuilderPopupBase");
var FederationUnionQueryBuilderPopup = (function (_super) {
    __extends(FederationUnionQueryBuilderPopup, _super);
    function FederationUnionQueryBuilderPopup(onSaveCallback, dataSource, rtl, onCloseCallback) {
        if (rtl === void 0) { rtl = false; }
        var _this = _super.call(this, onSaveCallback, dataSource, rtl, onCloseCallback) || this;
        _this.unionQuery = ko.observable();
        _this.unionAll = ko.observable(false);
        _this.columns = ko.observableArray();
        _this.popupContentTemplate = 'dxrd-querybuilder-union-popup-content';
        _this.buttonItems.push({
            toolbar: 'bottom', location: 'before', widget: 'dxCheckBox', options: { text: _localization_1.getLocalization('Union All', 'DataAccessUIStringId.FederationDataSourceQueryBuilder_NodeType_UnionAll'), value: _this.unionAll }
        });
        var sources = ko.pureComputed(function () { return _this.unionQuery() && _this.unionQuery().queries().map(function (x) {
            var alias = x.alias.peek();
            return {
                source: alias.split('_').join(' - '),
                name: alias
            };
        }); });
        _this._disposables.push(sources);
        _this.sourcesGrid = {
            rtlEnabled: rtl,
            noDataText: function () { return _localization_1.getLocalization('Drop a table or view here to create a query.', 'AnalyticsCoreStringId.QueryBuilder_SurfacePlaceholder'); },
            dataSource: sources,
            showRowLines: true,
            paging: { enabled: false },
            scrolling: { mode: 'infinite' },
            columns: [{
                    dataField: 'source',
                    get caption() {
                        return _localization_1.getLocalization('Source', 'DataAccessUIStringId.QueryBuilderColumns_Source');
                    },
                }, {
                    type: 'buttons',
                    width: 30,
                    buttons: [{
                            icon: 'delete',
                            onClick: function (e) {
                                _this.unionQuery().removeQuery(e.row.data.name);
                                _this.unionQuery.valueHasMutated();
                            },
                            cssClass: 'dxrd-image-recycle-bin',
                            template: templateUtils_1.getTemplate('dxrd-svg-operations-recycle_bin'),
                        }]
                }
            ]
        };
        _this._disposables.push(_this.unionQuery.subscribe(function (unionQuery) {
            var expressionArrays = [];
            var resultExpressions = [];
            _this.columns([]);
            if (!unionQuery || unionQuery.queries().length === 0) {
                return;
            }
            unionQuery.queries().forEach(function (query) { return expressionArrays.push(query.expressions()); });
            expressionArrays[0] && expressionArrays[0].forEach(function (expression) {
                if (expressionArrays.every(function (array) { return !!array.filter(function (x) { return x.name() === expression.name(); })[0]; })) {
                    resultExpressions.push({
                        name: expression.name(),
                        alias: expression.alias(),
                        key: expression.table() + '.' + expression.name()
                    });
                }
            });
            _this.columns(resultExpressions);
        }));
        _this._disposables.push(_this.unionAll.subscribe(function (value) {
            if (!_this.unionQuery())
                return;
            if (value) {
                _this.unionQuery().unionType(unionQuery_1.UnionTypes[unionQuery_1.UnionTypes.UnionAll]);
            }
            else {
                _this.unionQuery().unionType(unionQuery_1.UnionTypes[unionQuery_1.UnionTypes.Union]);
            }
        }));
        _this.aliasGrid = {
            rtlEnabled: rtl,
            dataSource: _this.columns,
            showRowLines: true,
            editing: {
                allowUpdating: true,
                mode: 'cell',
            },
            paging: { enabled: false },
            scrolling: { mode: 'infinite' },
            height: '100%',
            columns: [{
                    dataField: 'name',
                    caption: 'Column Name',
                    allowEditing: false
                }, {
                    dataField: 'alias',
                    get caption() {
                        return _localization_1.getLocalization('Alias', 'DataAccessUIStringId.QueryBuilderColumns_Alias');
                    },
                    validationRules: [_this._aliasValidationRule]
                }],
            onRowUpdating: function (event) {
                event.oldData.alias = event.newData.alias;
            }
        };
        return _this;
    }
    FederationUnionQueryBuilderPopup.prototype._aliasValidationCallback = function (alias, data) {
        var existedColumn = _arrayutils_1.findFirstItemMatchesCondition(this.columns(), function (source) { return source.alias === alias; });
        if (existedColumn && existedColumn.key === data.key)
            return true;
        return !existedColumn;
    };
    FederationUnionQueryBuilderPopup.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this.sourcesGrid = null;
        this.aliasGrid = null;
    };
    FederationUnionQueryBuilderPopup.prototype.addDataMember = function (item) {
        var _this = this;
        this._dataSource.fielListProvider.getItems(new pathRequest_1.PathRequest(item.path)).done(function (result) {
            result.forEach(function (x) { return _this.unionQuery().addSelectQuery(item.path, x.name); });
            _this.unionQuery.valueHasMutated();
        });
    };
    FederationUnionQueryBuilderPopup.prototype.canSave = function () {
        return this.unionQuery() && this.unionQuery().queries().length > 0;
    };
    FederationUnionQueryBuilderPopup.prototype.save = function () {
        var _this = this;
        this.unionQuery().queries().forEach(function (query) {
            query.expressions(query.expressions().filter(function (expression) {
                var column = _this.columns().filter(function (column) { return column.name === expression.name(); })[0];
                if (column) {
                    expression.alias(column.alias);
                    return true;
                }
                return false;
            }));
        });
        this.onSaveCallback(this.unionQuery());
        this.close();
    };
    FederationUnionQueryBuilderPopup.prototype.onHiding = function () {
        this.unionQuery(null);
        this.unionAll(false);
    };
    FederationUnionQueryBuilderPopup.prototype.show = function (query) {
        this.unionQuery(query);
        this.popupVisible(true);
        this.unionAll(query.unionType() === unionQuery_1.UnionTypes[unionQuery_1.UnionTypes.UnionAll]);
    };
    return FederationUnionQueryBuilderPopup;
}(_federationQueryBuilderPopupBase_1.FederationQueryBuilderPopupBase));
exports.FederationUnionQueryBuilderPopup = FederationUnionQueryBuilderPopup;
