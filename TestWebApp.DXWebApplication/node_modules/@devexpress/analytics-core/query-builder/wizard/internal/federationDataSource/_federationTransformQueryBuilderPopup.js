/**
* DevExpress Analytics (query-builder\wizard\internal\federationDataSource\_federationTransformQueryBuilderPopup.js)
* Version:  22.1.5
* Build date: Sep 5, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.FederationTransformQueryBuilderPopup = void 0;
var ko = require("knockout");
var _arrayutils_1 = require("../../../../core/utils/_arrayutils");
var _localization_1 = require("../../../../property-grid/localization/_localization");
var _utils_1 = require("../../../../property-grid/widgets/internal/_utils");
var serializer_1 = require("../../../../serializer/serializer");
var pathRequest_1 = require("../../../../widgets/common/pathRequest");
var sourceQuery_1 = require("../../../dataSource/federation/federatedQueries/sourceQuery");
var transformQuery_1 = require("../../../dataSource/federation/federatedQueries/transformQuery");
var _federationUnionQueryBuilderTreeListController_1 = require("../../../utils/_federationUnionQueryBuilderTreeListController");
var _federationQueryBuilderPopupBase_1 = require("./_federationQueryBuilderPopupBase");
var _federationTransformResultSchemaProvider_1 = require("./_federationTransformResultSchemaProvider");
var FederationTransformQueryBuilderPopup = (function (_super) {
    __extends(FederationTransformQueryBuilderPopup, _super);
    function FederationTransformQueryBuilderPopup(onSaveCallback, dataSource, rtl, onCloseCallback) {
        if (rtl === void 0) { rtl = false; }
        var _this = _super.call(this, onSaveCallback, dataSource, rtl, onCloseCallback) || this;
        _this.transformGridTitle = ko.observable();
        _this.transformResultGridTitle = ko.observable();
        _this.transformResultCollapsed = ko.observable(false);
        _this.transformSources = ko.observable([]);
        _this.currentPath = ko.observable();
        _this.transformQuery = ko.observable();
        _this.popupContentTemplate = 'dxrd-querybuilder-transform-popup-content';
        _this.transformGrid = {
            rtlEnabled: rtl,
            noDataText: function () { return ''; },
            dataSource: _this.transformSources,
            showRowLines: true,
            paging: { enabled: false },
            scrolling: { mode: 'infinite' },
            editing: {
                allowUpdating: true,
                mode: 'cell',
            },
            height: '100%',
            columns: [{
                    dataField: 'column',
                    get caption() {
                        return _localization_1.getLocalization('Column Name', 'DataAccessUIStringId.QueryBuilderColumns_ColumnName');
                    },
                    allowEditing: false
                }, {
                    dataField: 'alias',
                    get caption() {
                        return _localization_1.getLocalization('Alias', 'DataAccessUIStringId.QueryBuilderColumns_Alias');
                    },
                    validationRules: [_this._aliasValidationRule]
                }, {
                    type: 'buttons',
                    get caption() {
                        return _localization_1.getLocalization('Transform', 'DataAccessUIStringId.FederationDataSourceQueryBuilder_NodeType_Transform');
                    },
                    buttons: [{
                            template: function (element, object) {
                                var child = document.createElement('div');
                                element.append(child);
                                ko.renderTemplate('dxrd-querybuilder-transform-checkbox', object.data, {}, child, 'replaceNode');
                            },
                        }]
                }
            ],
            onRowUpdating: function (event) {
                event.oldData.alias = event.newData.alias;
                _this.resultFieldListModel.valueHasMutated();
                _this.transformSources.valueHasMutated();
            }
        };
        var transformResultSchemaProvider = new _federationTransformResultSchemaProvider_1.TransformResultSchemaProvider(_this._dataSource.dbSchemaProvider, _this.transformSources, _this.currentPath);
        _this.resultFieldListModel = ko.observable({
            itemsProvider: transformResultSchemaProvider,
            path: _this.currentPath,
            selectedPath: ko.observable(),
            treeListController: null
        });
        var treeListController = new _federationUnionQueryBuilderTreeListController_1.FederatedTransformQueryBuilderTreeListController(_this.dragDropHandler, function (item) { return treeListController.isDraggable(item) && _this.addDataMember(item); });
        _this.fieldListModel = {
            itemsProvider: _this._dataSource.dbSchemaProvider,
            treeListController: treeListController,
            selectedPath: _this.selectedPath,
            pageSize: 100,
            expandRootItems: true
        };
        _this._disposables.push(_this.currentPath.subscribe(function (path) {
            _this.selectedPath(path);
            _this.transformGridTitle(_utils_1.formatUnicorn(_localization_1.getLocalization('Transformation node root: {0}', 'DataAccessUIStringId.FederationDataSourceQueryBuilder_TransformationNodeRoot'), _this._dataSource.getQueryNameFromPath(path)));
        }), treeListController, transformResultSchemaProvider, treeListController);
        _this.transformResultGridTitle(_localization_1.getLocalization('Transformation result', 'DataAccessUIStringId.FederationDataSourceQueryBuilder_TransformationResult'));
        return _this;
    }
    FederationTransformQueryBuilderPopup.prototype._updateColumns = function (columns, path) {
        var _this = this;
        this.transformSources(columns.map(function (x) {
            var disabled = !x.isList;
            return {
                columns: columns,
                column: x.displayName,
                name: x.name,
                key: path + '.' + x.name,
                alias: undefined,
                transform: {
                    value: ko.observable(disabled ? undefined : false),
                    disabled: disabled,
                    onValueChanged: function () { _this.resultFieldListModel.valueHasMutated(); }
                }
            };
        }));
    };
    FederationTransformQueryBuilderPopup.prototype._aliasValidationCallback = function (alias, data) {
        var existedColumn = _arrayutils_1.findFirstItemMatchesCondition(this.transformSources(), function (source) { return source.alias === alias; });
        if (existedColumn && existedColumn.key === data.key)
            return true;
        return !existedColumn;
    };
    FederationTransformQueryBuilderPopup.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this.resultFieldListModel = null;
        this.transformGrid = null;
    };
    FederationTransformQueryBuilderPopup.prototype.addDataMember = function (item) {
        this.currentPath(item.path);
        this.updateColumns();
        this.transformSources.valueHasMutated();
    };
    FederationTransformQueryBuilderPopup.prototype.updateColumns = function () {
        var _this = this;
        var path = this.currentPath();
        this._dataSource.fielListProvider.getItems(new pathRequest_1.PathRequest(this.currentPath())).done(function (result) {
            _this._updateColumns(result, path);
        });
    };
    FederationTransformQueryBuilderPopup.prototype.canSave = function () {
        return this.transformSources().some(function (source) { return source.transform.value() || source.alias; });
    };
    FederationTransformQueryBuilderPopup.prototype.save = function () {
        var query = this.transformQuery();
        query.root(new sourceQuery_1.SourceQuery({}, new serializer_1.ModelSerializer(), this._dataSource.getQueryNameFromPath(this.currentPath()), this.currentPath()));
        query.transformationRules([]);
        this.transformSources().forEach(function (source) {
            if (source.transform.value() || source.alias) {
                query.transformationRules.push(new transformQuery_1.FederationTransformationRule({
                    '@Name': source.name,
                    '@Alias': source.alias,
                    '@Unfold': source.transform.value(),
                    '@Flatten': source.transform.value()
                }));
            }
        });
        this.onSaveCallback(this.transformQuery());
        this.close();
    };
    FederationTransformQueryBuilderPopup.prototype.onHiding = function () {
        this.transformQuery(null);
        this.transformResultCollapsed(false);
        this.currentPath('');
        this.transformSources([]);
    };
    FederationTransformQueryBuilderPopup.prototype.show = function (query) {
        var _this = this;
        this.transformQuery(query);
        if (query.root && query.root()) {
            var path = this._dataSource.getPathFromQueryName(query.root().sourceName());
            this.currentPath(path);
            this._dataSource.fielListProvider.getItems(new pathRequest_1.PathRequest(path)).done(function (result) {
                _this._updateColumns(result, path);
                query.transformationRules().forEach(function (rule) {
                    var column = _this.transformSources().filter(function (x) { return x.name === rule.name(); })[0];
                    column.alias = rule.alias();
                    column.transform.value(rule.unfold());
                });
            });
        }
        if (!this.currentPath()) {
            var firstDataSource = this._dataSource.dataSources()[0];
            var firstDataSourceName = firstDataSource.ref || firstDataSource.id;
            if (firstDataSource.isListType) {
                this.currentPath(firstDataSourceName);
                this.updateColumns();
            }
            else {
                this._dataSource.fielListProvider.getItems(new pathRequest_1.PathRequest(firstDataSourceName)).done(function (items) {
                    _this.currentPath(items[0] && items[0].isListType ? firstDataSourceName + '.' + items[0].name : firstDataSourceName);
                    _this.updateColumns();
                });
            }
        }
        this.popupVisible(true);
    };
    return FederationTransformQueryBuilderPopup;
}(_federationQueryBuilderPopupBase_1.FederationQueryBuilderPopupBase));
exports.FederationTransformQueryBuilderPopup = FederationTransformQueryBuilderPopup;
