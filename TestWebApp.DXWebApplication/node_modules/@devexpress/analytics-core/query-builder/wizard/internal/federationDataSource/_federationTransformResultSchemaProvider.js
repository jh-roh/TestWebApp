/**
* DevExpress Analytics (query-builder\wizard\internal\federationDataSource\_federationTransformResultSchemaProvider.js)
* Version:  22.1.5
* Build date: Sep 5, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransformResultSchemaProvider = void 0;
var $ = require("jquery");
var pathRequest_1 = require("../../../../widgets/common/pathRequest");
var _utils_1 = require("../../../../widgets/_utils");
var TransformResultSchemaProvider = (function () {
    function TransformResultSchemaProvider(itemsProvider, transformData, currentPath) {
        var _this = this;
        this.getItems = function (path) {
            var result = $.Deferred();
            if (!currentPath() || path.fullPath.split('.').length > currentPath().split('.').length) {
                return result.resolve([]).promise();
            }
            itemsProvider.getItems(path).done(function (resultItems) {
                var itemsArray = [];
                var listPath = [];
                resultItems.forEach(function (item) {
                    var column = transformData().filter(function (x) { return x.name == item.name; })[0];
                    if (_utils_1.isList(item) && column && column.transform.value()) {
                        listPath.push(column);
                    }
                    else {
                        item.displayName = (column && column.alias) || item.displayName;
                        itemsArray.push(item);
                    }
                });
                if (listPath.length === 0) {
                    result.resolve(itemsArray);
                }
                else {
                    $.when.apply($, listPath.map(function (x) { return itemsProvider.getItems(new pathRequest_1.PathRequest(path.fullPath + '.' + x.name)).always(function (subNodes) {
                        subNodes.forEach(function (element) {
                            var name = (x.alias || x.column) + '_' + element.displayName;
                            element.displayName = name;
                            element.name = name;
                        });
                        result.resolve(subNodes.concat(itemsArray));
                    }); }));
                }
            });
            return result.promise();
        };
        this.dispose = function () {
            _this.getItems = null;
            itemsProvider = null;
        };
    }
    return TransformResultSchemaProvider;
}());
exports.TransformResultSchemaProvider = TransformResultSchemaProvider;
