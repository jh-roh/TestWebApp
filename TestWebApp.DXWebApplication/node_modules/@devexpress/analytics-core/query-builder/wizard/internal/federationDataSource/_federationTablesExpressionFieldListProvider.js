/**
* DevExpress Analytics (query-builder\wizard\internal\federationDataSource\_federationTablesExpressionFieldListProvider.js)
* Version:  22.1.5
* Build date: Sep 5, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FederationTablesExpressionFieldListProvider = void 0;
var $ = require("jquery");
var _arrayutils_1 = require("../../../../core/utils/_arrayutils");
var pathRequest_1 = require("../../../../widgets/common/pathRequest");
var FederationTablesExpressionFieldListProvider = (function () {
    function FederationTablesExpressionFieldListProvider(provider, tables) {
        this.provider = provider;
        this.tables = tables;
    }
    FederationTablesExpressionFieldListProvider.prototype.getItems = function (pathRequest) {
        var result = $.Deferred();
        if (pathRequest.path === '') {
            result.resolve(this.tables().map(function (table) {
                return { name: table.actualName(), displayName: table.actualName(), isList: true, specifics: 'List', dragData: { noDragable: false } };
            }));
        }
        else {
            var paths = pathRequest.fullPath.split('.');
            paths.shift();
            var table = _arrayutils_1.findFirstItemMatchesCondition(this.tables(), function (table) { return table.actualName() === paths.join('.'); });
            if (table) {
                this.provider.getItems(new pathRequest_1.PathRequest(table.path)).done(function (items) { return result.resolve(items); });
            }
        }
        return result.promise();
    };
    return FederationTablesExpressionFieldListProvider;
}());
exports.FederationTablesExpressionFieldListProvider = FederationTablesExpressionFieldListProvider;
