/**
* DevExpress Analytics (query-builder\wizard\internal\federationDataSource\_federationTreeNodeProvider.js)
* Version:  22.1.5
* Build date: Sep 5, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.FederationTreeNodeProvider = void 0;
var $ = require("jquery");
var ko = require("knockout");
var _treeListNode_1 = require("../_treeListNode");
var _treeNodeItemsProvider_1 = require("../_treeNodeItemsProvider");
var _arrayutils_1 = require("../../../../core/utils/_arrayutils");
var _federatedQueriesTreeNode_1 = require("./_federatedQueriesTreeNode");
var unionQuery_1 = require("../../../dataSource/federation/federatedQueries/unionQuery");
var _utils_1 = require("../../../../serializer/_utils");
var transformQuery_1 = require("../../../dataSource/federation/federatedQueries/transformQuery");
var localization_utils_1 = require("../../../../property-grid/localization/localization_utils");
var FederationTreeNodeProvider = (function (_super) {
    __extends(FederationTreeNodeProvider, _super);
    function FederationTreeNodeProvider(fieldListProvider, rootItems, callBacks, customQueries, afterCheckToggled) {
        var _this = _super.call(this, fieldListProvider, rootItems, function (item, isChecked, path) { return new FederationDataMemberTreeNode(item.name, item.displayName, item.specifics, item.isListType, isChecked, path, afterCheckToggled); }, function (item, isChecked, path) { return new _treeListNode_1.FieldTreeNode(item.name, item.displayName, item.specifics, isChecked, path, afterCheckToggled); }) || this;
        _this._callBack = ko.observable({
            deleteAction: function (name) {
                _this._customQueries
                    .remove(_arrayutils_1.findFirstItemMatchesCondition(_this._customQueries(), function (item) { return (item.alias() || item.generateName()) === name; }));
            },
            disableCustomSql: false,
            showQbCallBack: null,
            showQbCallBacks: null
        });
        var getCurrentItems = _this.getItems;
        _this._customQueries = customQueries;
        _this.getItems = function (pathRequest) {
            var result = $.Deferred();
            if (pathRequest.fullPath && pathRequest.fullPath.split('.').length > 2) {
                result.resolve([]);
            }
            if (pathRequest.fullPath === 'queries') {
                var queries = customQueries().map(function (query) {
                    var name = query.alias() || query.generateName();
                    var currentQuery = _this._queries.children().filter(function (q) { return q['query'] === query; })[0];
                    if (currentQuery)
                        return currentQuery;
                    if (query instanceof unionQuery_1.UnionQuery) {
                        var callback = ko.observable(_utils_1.extend(_this._callBack(), { showQbCallBack: callBacks.unionCallBack }));
                    }
                    else if (query instanceof transformQuery_1.TransformQuery) {
                        var callback = ko.observable(_utils_1.extend(_this._callBack(), { showQbCallBack: callBacks.transformCallBack }));
                    }
                    else {
                        var callback = ko.observable(_utils_1.extend(_this._callBack(), { showQbCallBack: callBacks.joinCallBack }));
                    }
                    var queryNode = new _treeListNode_1.TreeQueryNode(name, name, 'query', !!currentQuery && currentQuery.checked(), ko.observableArray([]), callback, afterCheckToggled, query);
                    queryNode.path = 'queries.' + queryNode.name;
                    _this._disposables.push(queryNode);
                    return queryNode;
                });
                _this._queries.initializeChildren(queries);
                result.resolve(queries);
            }
            else {
                getCurrentItems(pathRequest, true).done(function (value) { return result.resolve(value); });
            }
            return result.promise();
        };
        _this._callBack().showQbCallBacks = callBacks;
        _this._disposables.push(_this._queries = new _federatedQueriesTreeNode_1.FederatedQueriesTreeNode('queries', localization_utils_1.getLocalization('Federated Queries', 'DataAccessUIStringId.FederatedQueryCollectionList_Title'), 'list', false, _this._callBack, afterCheckToggled));
        rootItems.valueHasMutated();
        _this._rootItems.push(_this._queries);
        _this.dispose = function () {
            _super.prototype.dispose.call(_this);
            _this.removeProperties();
        };
        return _this;
    }
    FederationTreeNodeProvider.prototype.isList = function (dataMember, parentNode) {
        return !parentNode.isListType && _super.prototype.isList.call(this, dataMember, parentNode);
    };
    return FederationTreeNodeProvider;
}(_treeNodeItemsProvider_1.TreeNodeItemsProvider));
exports.FederationTreeNodeProvider = FederationTreeNodeProvider;
var FederationDataMemberTreeNode = (function (_super) {
    __extends(FederationDataMemberTreeNode, _super);
    function FederationDataMemberTreeNode(name, displayName, specifics, isListType, isChecked, path, afterCheckToggled) {
        var _this = _super.call(this, name, displayName, specifics, isChecked, path, afterCheckToggled) || this;
        _this.isListType = isListType;
        return _this;
    }
    return FederationDataMemberTreeNode;
}(_treeListNode_1.DataMemberTreeNode));
