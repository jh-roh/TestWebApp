/**
* DevExpress Analytics (query-builder\wizard\internal\federationDataSource\_federationQueryBuilderPopupBase.js)
* Version:  22.1.5
* Build date: Sep 5, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.FederationQueryBuilderPopupBase = void 0;
var ko = require("knockout");
var _dragHelperContent_1 = require("../../../../core/dragDrop/_dragHelperContent");
var _wizardDragDropHandler_1 = require("../../../../core/dragDrop/_wizardDragDropHandler");
var _popupEditorBase_1 = require("../../../../core/widgets/_popupEditorBase");
var _localization_1 = require("../../../../property-grid/localization/_localization");
var _resizeHelper_1 = require("../../../../widgets/internal/_resizeHelper");
var _utils_1 = require("../../../../widgets/_utils");
var querySurface_1 = require("../../../elements/querySurface");
var _federationUnionQueryBuilderTreeListController_1 = require("../../../utils/_federationUnionQueryBuilderTreeListController");
var FederationQueryBuilderPopupBase = (function (_super) {
    __extends(FederationQueryBuilderPopupBase, _super);
    function FederationQueryBuilderPopupBase(onSaveCallback, _dataSource, rtl, onCloseCallback) {
        if (rtl === void 0) { rtl = false; }
        var _this = _super.call(this) || this;
        _this.onSaveCallback = onSaveCallback;
        _this._dataSource = _dataSource;
        _this.rtl = rtl;
        _this.onCloseCallback = onCloseCallback;
        _this.selectedPath = ko.observable();
        _this.title = function () { return _localization_1.getLocalization('Query Builder', 'DataAccessUIStringId.QueryBuilder'); };
        _this.getPopupContainer = _utils_1.getParentContainer;
        _this.loaded = ko.observable(false);
        _this.maxHeight = '90%';
        _this.width = '900px';
        _this.height = '710px';
        _this.cssClass = 'dxrd-querybuilder-federation-popup-wrapper';
        _this.resultGridHeight = ko.observable(250);
        _this.dragDropHandler = new _wizardDragDropHandler_1.WizardDragDropHandler({
            dragHelperContent: new _dragHelperContent_1.DragHelperContent(null),
            parent: '.dx-designer-viewport .dxrd-querybuilder-federation-popup-wrapper > .dx-popup-normal',
            containment: '.dxrd-querybuilder-federation-popup',
            target: _this.popupTarget(),
            addHandler: function (dropTarget, item, position) {
                if (dropTarget && dropTarget instanceof FederationQueryBuilderPopupBase || dropTarget instanceof querySurface_1.QuerySurface)
                    _this.addDataMember(item, position);
            }
        });
        var treeListController = new _federationUnionQueryBuilderTreeListController_1.FederatedUnionQueryBuilderTreeListController(_this.dragDropHandler, function (item) { return treeListController.isDraggable(item) && _this.addDataMember(item); });
        _this.fieldListModel = {
            itemsProvider: _this._dataSource.dbSchemaProvider,
            treeListController: treeListController,
            selectedPath: _this.selectedPath,
            pageSize: 100,
            expandRootItems: true,
            onItemsChanged: function (items) {
                items.forEach(function (item) {
                    if (item.parent && treeListController.isDraggable(item.parent) && item.parent.data.isListType)
                        item.parent.collapsed(true);
                });
            },
            rtl: rtl
        };
        _this._disposables.push(_this.dragDropHandler, treeListController);
        _this._aliasValidationRule = {
            type: 'custom',
            validationCallback: function (options) {
                if (!options.value)
                    return true;
                return _this._aliasValidationCallback(options.value, options.data);
            },
            get message() { return _localization_1.getLocalization('Alias is not unique', 'DataAccessUIStringId.FederationDataSourceQueryBuilder_AliasUniqueMessage'); }
        };
        _this.resizeHelper = new _resizeHelper_1.ResizeHelper();
        return _this;
    }
    FederationQueryBuilderPopupBase.prototype._aliasValidationCallback = function (alias, data) {
        return true;
    };
    FederationQueryBuilderPopupBase.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this.fieldListModel = null;
        this.onSaveCallback = null;
        this._dataSource = null;
    };
    FederationQueryBuilderPopupBase.prototype.addDataMember = function (item, position) { };
    FederationQueryBuilderPopupBase.prototype.save = function () {
        this.close();
    };
    FederationQueryBuilderPopupBase.prototype.close = function () {
        this.onCloseCallback && this.onCloseCallback();
        this.popupVisible(false);
    };
    FederationQueryBuilderPopupBase.prototype.popupTarget = function () {
        return '.dxrd-result-source-grid';
    };
    FederationQueryBuilderPopupBase.prototype.onHiding = function () { };
    return FederationQueryBuilderPopupBase;
}(_popupEditorBase_1.PopupEditorBase));
exports.FederationQueryBuilderPopupBase = FederationQueryBuilderPopupBase;
