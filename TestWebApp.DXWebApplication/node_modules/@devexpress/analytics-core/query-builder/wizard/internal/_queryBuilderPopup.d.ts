/**
* DevExpress Analytics (query-builder\wizard\internal\_queryBuilderPopup.d.ts)
* Version:  22.1.5
* Build date: Sep 5, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
/// <reference types="jquery" />
/// <reference types="jqueryui" />
import * as ko from 'knockout';
import { IDBSchemaProvider } from '../../dataSource/dbSchemaProvider';
import { IDataSourceBase, IDataSourceDBSchema, SqlDataSource } from '../../dataSource/sql/sqlDataSource';
import { QueryViewModel } from '../../elements/queryModel';
import { IAction } from '../../../widgets/utils';
import { TableQuery } from '../../dataSource/sql/tableQuery';
import { ILocalizationInfo } from '../../../property-grid/widgets/internal/_utils';
import { IQueryBuilderOptions } from '../../binding/jsQueryBuilderBindingOptions';
import { Disposable } from '../../../serializer/utils';
import { UndoEngine } from '../../../undo-engine/undoengine';
import { IRetrieveQuerySqlCallback } from '../dataSourceWizard';
import { ISerializableModel } from '../../../serializer/serializationInfo';
import { DbObjectDragDropHandler } from '../../dragDrop/_dbObjectDragDropHandler';
export declare abstract class QueryBuilderPopupBase extends Disposable {
    customizeQBInitializationData: (options: IQueryBuilderOptions) => IQueryBuilderOptions;
    protected _rtl: boolean;
    protected _querySource: ko.Observable | ko.Computed;
    protected _dbSchemaProvider: ko.Observable<IDBSchemaProvider> | ko.Computed<IDBSchemaProvider>;
    protected _dataSource: IDataSourceDBSchema;
    protected _applyQuery: any;
    constructor(applyNewQuery: any, rtl?: boolean, customizeQBInitializationData?: (options: IQueryBuilderOptions) => IQueryBuilderOptions);
    designer: ko.Observable<{
        model: ko.Observable<QueryViewModel> | ko.Computed<QueryViewModel>;
        updateSurface: () => void;
        showPreview: () => void;
        dataPreview: any;
        fieldDragHandler: DbObjectDragDropHandler;
        undoEngine: ko.Observable<UndoEngine> | ko.Computed<UndoEngine>;
    }>;
    qbOptions: ko.Observable<IQueryBuilderOptions>;
    okButtonDisabled: ko.PureComputed<boolean>;
    isVisible: ko.Observable<boolean>;
    showLoadIndicator: ko.Observable<boolean>;
    static customizeQueryBuilderActions: (actions: IAction[]) => void;
    show(query: any, dataSource: IDataSourceDBSchema): void;
    cancelHandler(): void;
    previewHandler(): void;
    okHandler(): void;
    abstract createQuery(): ISerializableModel;
    abstract getDataSource(): IDataSourceBase;
    onHiddingHandler(): void;
    popupViewModel(element: HTMLElement): {
        visible: ko.Observable<boolean>;
        title: any;
        showTitle: boolean;
        shading: boolean;
        fullScreen: boolean;
        width: string;
        height: string;
        container: JQuery<HTMLElement>;
        wrapperAttr: {
            class: string;
        };
        position: {
            of: JQuery<HTMLElement>;
        };
        onHidding: () => void;
    };
    getDisplayText(key: any): any;
    localizationIdMap: {
        [key: string]: ILocalizationInfo;
    };
}
export declare class QueryBuilderPopup extends QueryBuilderPopupBase {
    customizeQBInitializationData: (options: IQueryBuilderOptions) => IQueryBuilderOptions;
    protected _applyQuery: IRetrieveQuerySqlCallback;
    constructor(applyNewQuery: IRetrieveQuerySqlCallback, rtl?: boolean, customizeQBInitializationData?: (options: IQueryBuilderOptions) => IQueryBuilderOptions);
    getDataSource(): SqlDataSource;
    createQuery(): TableQuery;
}
