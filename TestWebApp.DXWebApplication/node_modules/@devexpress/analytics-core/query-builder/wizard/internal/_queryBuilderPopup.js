/**
* DevExpress Analytics (query-builder\wizard\internal\_queryBuilderPopup.js)
* Version:  22.1.5
* Build date: Sep 5, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryBuilderPopup = exports.QueryBuilderPopupBase = void 0;
var ko = require("knockout");
var _arrayutils_1 = require("../../../core/utils/_arrayutils");
var tableQuery_1 = require("../../dataSource/sql/tableQuery");
var serializer_1 = require("../../../serializer/serializer");
var _utils_1 = require("../../../widgets/_utils");
var localization_utils_1 = require("../../../property-grid/localization/localization_utils");
var utils_1 = require("../../../serializer/utils");
var QueryBuilderPopupBase = (function (_super) {
    __extends(QueryBuilderPopupBase, _super);
    function QueryBuilderPopupBase(applyNewQuery, rtl, customizeQBInitializationData) {
        if (rtl === void 0) { rtl = false; }
        if (customizeQBInitializationData === void 0) { customizeQBInitializationData = function (options) { return options; }; }
        var _this = _super.call(this) || this;
        _this.customizeQBInitializationData = customizeQBInitializationData;
        _this._querySource = ko.observable(null);
        _this._dbSchemaProvider = ko.observable(null);
        _this.designer = ko.observable();
        _this.qbOptions = ko.observable(null);
        _this.okButtonDisabled = ko.pureComputed(function () { return _this.designer() && !_this.designer().model().isValid(); });
        _this.isVisible = ko.observable(false);
        _this.showLoadIndicator = ko.observable(false);
        _this.localizationIdMap = {
            'title': { text: 'Query Builder', localizationId: 'DataAccessUIStringId.QueryBuilder' },
            'loading': { text: 'Loading...', localizationId: 'AnalyticsCoreStringId.Loading' },
            'previewResults': { text: 'Preview Results...', localizationId: 'DataAccessUIStringId.QueryBuilderButtons_PreviewResults' },
            'cancel': { text: 'Cancel', localizationId: 'AnalyticsCoreStringId.SearchDialog_Cancel' },
            'ok': { text: 'OK', localizationId: 'DataAccessUIStringId.Button_OK' }
        };
        _this._rtl = rtl;
        _this._applyQuery = applyNewQuery;
        _this.qbOptions(_this.qbOptions() || _this.customizeQBInitializationData({
            queryBuilderModel: _this.designer,
            dbSchemaProvider: _this._dbSchemaProvider,
            querySource: _this._querySource,
            callbacks: { customizeActions: QueryBuilderPopup.customizeQueryBuilderActions },
            rtl: _this._rtl
        }));
        return _this;
    }
    QueryBuilderPopupBase.prototype.show = function (query, dataSource) {
        this._dataSource = dataSource;
        this._dbSchemaProvider(dataSource.dbSchemaProvider);
        this._querySource(new serializer_1.ModelSerializer().serialize(query));
        this.isVisible(true);
        this.designer().updateSurface();
    };
    QueryBuilderPopupBase.prototype.cancelHandler = function () {
        this.isVisible(false);
    };
    QueryBuilderPopupBase.prototype.previewHandler = function () {
        this.designer().showPreview();
    };
    QueryBuilderPopupBase.prototype.okHandler = function () {
        var _this = this;
        if (this.designer().model().canSave()) {
            this._applyQuery(this.createQuery(), this.showLoadIndicator)
                .done(function () {
                _this.isVisible(false);
            });
        }
    };
    QueryBuilderPopupBase.prototype.onHiddingHandler = function () {
        this.designer().dataPreview.isVisible(false);
    };
    QueryBuilderPopupBase.prototype.popupViewModel = function (element) {
        var $container = _utils_1.getParentContainer(element);
        return {
            visible: this.isVisible,
            title: this.getDisplayText('title'),
            showTitle: true,
            shading: true,
            fullScreen: false,
            width: '95%',
            height: '95%',
            container: $container,
            wrapperAttr: { class: 'dxrd-querybuilder-popup' },
            position: { of: $container },
            onHidding: this.onHiddingHandler
        };
    };
    QueryBuilderPopupBase.prototype.getDisplayText = function (key) {
        return localization_utils_1.getLocalization(this.localizationIdMap[key].text, this.localizationIdMap[key].localizationId);
    };
    QueryBuilderPopupBase.customizeQueryBuilderActions = function (actions) {
        var del = _arrayutils_1.findFirstItemMatchesCondition(actions, function (action) { return action.text === 'Delete'; }), undo = _arrayutils_1.findFirstItemMatchesCondition(actions, function (action) { return action.text === 'Undo'; }), redo = _arrayutils_1.findFirstItemMatchesCondition(actions, function (action) { return action.text === 'Redo'; });
        actions.splice(0, actions.length, del, undo, redo);
    };
    return QueryBuilderPopupBase;
}(utils_1.Disposable));
exports.QueryBuilderPopupBase = QueryBuilderPopupBase;
var QueryBuilderPopup = (function (_super) {
    __extends(QueryBuilderPopup, _super);
    function QueryBuilderPopup(applyNewQuery, rtl, customizeQBInitializationData) {
        if (rtl === void 0) { rtl = false; }
        if (customizeQBInitializationData === void 0) { customizeQBInitializationData = function (options) { return options; }; }
        var _this = _super.call(this, applyNewQuery, rtl, customizeQBInitializationData) || this;
        _this.customizeQBInitializationData = customizeQBInitializationData;
        return _this;
    }
    QueryBuilderPopup.prototype.getDataSource = function () {
        return this._dataSource;
    };
    QueryBuilderPopup.prototype.createQuery = function () {
        return new tableQuery_1.TableQuery(this.designer().model().serialize(), this.getDataSource());
    };
    return QueryBuilderPopup;
}(QueryBuilderPopupBase));
exports.QueryBuilderPopup = QueryBuilderPopup;
