/**
* DevExpress Analytics (query-builder\wizard\pages\federationDataSourceWizard\federatedQueryConfigurePage.js)
* Version:  22.1.5
* Build date: Sep 5, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports._registerFederatedQueryConfigurePage = exports.FederatedQueryConfigurePage = void 0;
var $ = require("jquery");
var ko = require("knockout");
var _arrayutils_1 = require("../../../../core/utils/_arrayutils");
var _fieldListProvider_1 = require("../../../../core/utils/_fieldListProvider");
var localization_utils_1 = require("../../../../property-grid/localization/localization_utils");
var serializer_1 = require("../../../../serializer/serializer");
var federationDataSource_1 = require("../../../dataSource/federation/federationDataSource");
var _federatedQueriesHelper_1 = require("../../../widgets/_federatedQueriesHelper");
var _federationDataSourceItemsExtender_1 = require("../../internal/federationDataSource/_federationDataSourceItemsExtender");
var _federationTreeNodeProvider_1 = require("../../internal/federationDataSource/_federationTreeNodeProvider");
var _constants_1 = require("../../internal/_constants");
var _dbSchemaTreeListController_1 = require("../../internal/_dbSchemaTreeListController");
var _utils_1 = require("../../internal/_utils");
var pageId_1 = require("../../pageId");
var popupWizard_1 = require("../../popupWizard");
var wizardPageBase_1 = require("../wizardPageBase");
var FederatedQueryConfigurePage = (function (_super) {
    __extends(FederatedQueryConfigurePage, _super);
    function FederatedQueryConfigurePage(_options) {
        var _this = _super.call(this) || this;
        _this._options = _options;
        _this._selectedPath = ko.observable(null);
        _this._itemsProvider = ko.observable();
        _this._customQueries = ko.observableArray([]);
        _this._setQueryChecked = function (query) {
            var rootItems = _this._itemsProvider().getRootItems();
            _this._selectedPath('queries.' + query.alias());
            var queries = _arrayutils_1.findFirstItemMatchesCondition(rootItems, function (data) { return data.name === 'queries'; });
            var children = queries.children();
            var child = children[children.length - 1];
            child.setChecked(true);
            child['_afterCheckToggled'] && child['_afterCheckToggled'](child);
        };
        _this._dataSources = ko.observableArray();
        _this._scrollViewHeight = 'calc(100% - 37px)';
        _this._isDataLoadingInProcess = ko.observable(false);
        _this._customizeDBSchemaTreeListActions = null;
        _this._dataSources(_this._options.dataSources());
        _this._disposables.push(_this._fieldListProvider = new _fieldListProvider_1.FieldListProvider(_this._options.callbacks.fieldListsCallback, _this._dataSources, [
            new _federationDataSourceItemsExtender_1.FederationDataSourceItemsExtender(_this._dataSources)
        ], true));
        _this._disposables.push(_this._dataSource = new federationDataSource_1.FederationDataSource({}, _this._dataSources, _this._fieldListProvider, new serializer_1.ModelSerializer()));
        _this._disposables.push(_this._queriesPopupHelper = new _federatedQueriesHelper_1.FederatedQueriesHelper(_this._dataSource, _this._customQueries, { afterAddQuery: _this._setQueryChecked }, _this._options.rtl));
        _this._fieldListModel = ko.observable(null);
        _this._getItemsAfterCheck = function (node) {
            var pathParts = node.path.split('.');
            if (node.specifics == 'query') {
                var query = node['query'] || _arrayutils_1.findFirstItemMatchesCondition(_this._customQueries(), function (data) { return (data.alias() || query.generateName()) === node.name; });
                query.alias(node.name);
                if (node.checked.peek()) {
                    _this._dataSource.queries.indexOf(query) === -1 && _this._dataSource.queries.push(query);
                }
                else {
                    _this._dataSource.queries.remove(query);
                }
            }
            else if (!node.isList || pathParts.length > 2) {
                var columnName = pathParts.pop();
                var queryName = pathParts.join('.');
                node.checked.peek() ? _this._dataSource.addSelectQuery(queryName, columnName) : _this._dataSource.removeExpression(columnName, queryName);
            }
            else {
                node.children().forEach(function (x) { return _this._getItemsAfterCheck(x); });
            }
            _this._onChange();
            _this[_constants_1.__loadingStateFunctionName] && _this[_constants_1.__loadingStateFunctionName](false);
        };
        return _this;
    }
    FederatedQueryConfigurePage.prototype.canNext = function () {
        return this._dataSource.queries().length > 1;
    };
    FederatedQueryConfigurePage.prototype.canFinish = function () {
        return this._dataSource.queries().length > 0;
    };
    FederatedQueryConfigurePage.prototype._createTreeListFactory = function () {
        return new _utils_1.MultiQueryTreeListItemFactory();
    };
    FederatedQueryConfigurePage.prototype._loadPanelViewModel = function (element) {
        return popupWizard_1.PopupWizard._getLoadPanelViewModel(element, this._isDataLoadingInProcess);
    };
    FederatedQueryConfigurePage.prototype.commit = function () {
        return $.Deferred().resolve({
            federationDataSourceJSON: JSON.stringify(new serializer_1.ModelSerializer().serialize(this._dataSource)),
            federatedQueries: []
        }).promise();
    };
    FederatedQueryConfigurePage.prototype.initialize = function (state) {
        var deferred = $.Deferred();
        var rootItems = ko.observableArray($.map(this._dataSources(), function (item) {
            return {
                name: item.id || item.ref,
                displayName: item.name,
                isList: true,
                specifics: item.specifics || 'ListSource',
                isListType: item.isListType,
                dragData: { noDragable: false }
            };
        }));
        var itemsProvider = new _federationTreeNodeProvider_1.FederationTreeNodeProvider(this._fieldListProvider, rootItems, this._queriesPopupHelper.callBacks, this._customQueries, this._getItemsAfterCheck);
        this._disposables.push(itemsProvider);
        this._itemsProvider(itemsProvider);
        this._fieldListModel({
            factory: this._createTreeListFactory(),
            itemsProvider: this._itemsProvider(),
            selectedPath: this._selectedPath,
            treeListController: new _dbSchemaTreeListController_1.DBSchemaTreeListController(this._customizeDBSchemaTreeListActions),
            templateName: 'dxrd-treelist-with-checkbox'
        });
        return deferred.resolve().promise();
    };
    return FederatedQueryConfigurePage;
}(wizardPageBase_1.WizardPageBase));
exports.FederatedQueryConfigurePage = FederatedQueryConfigurePage;
function _registerFederatedQueryConfigurePage(factory, wizardOptions) {
    factory.registerMetadata(pageId_1.FederationDataSourceWizardPageId.FederatedQueryConfigurePage, {
        create: function () {
            return new FederatedQueryConfigurePage(wizardOptions);
        },
        setState: function (data, state) {
            state.federationDataSourceJSON = data.federationDataSourceJSON;
            state.federatedQueries = data.federatedQueries;
        },
        getState: function (state) {
            return state.federationDataSourceWizard;
        },
        resetState: function (state, defaultState) {
            state.federationDataSourceJSON = defaultState.federationDataSourceJSON;
            state.federatedQueries = defaultState.federatedQueries;
        },
        description: localization_utils_1.getLocalization('Columns selected from specific tables and/or views will be automatically included into a separate query.', 'AnalyticsCoreStringId.SqlDSWizard_PageConfigureMultiQuery'),
        template: 'dxrd-wizard-add-federated-queries-page'
    });
}
exports._registerFederatedQueryConfigurePage = _registerFederatedQueryConfigurePage;
