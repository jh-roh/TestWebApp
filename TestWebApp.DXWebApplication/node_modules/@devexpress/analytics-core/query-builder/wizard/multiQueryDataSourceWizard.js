/**
* DevExpress Analytics (query-builder\wizard\multiQueryDataSourceWizard.js)
* Version:  22.1.5
* Build date: Sep 5, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports._createMultiQueryDataSourceWizard = exports._registerMultiQueryDataSourcePages = exports.MultiQueryDataSourceWizardPageIterator = exports.MultiQueryDataSourceWizard = exports._MultiQueryDataSourceWizardOptions = void 0;
var localization_utils_1 = require("../../property-grid/localization/localization_utils");
var _utils_1 = require("../../serializer/_utils");
var _requestwrapper_1 = require("../utils/_requestwrapper");
var dataSourceWizard_1 = require("./dataSourceWizard");
var dataSourceWizardState_1 = require("./dataSourceWizardState");
var specifyObjectDataSourceSettingsPage_1 = require("./fullscreen/pages/specifyObjectDataSourceSettingsPage");
var pageFactory_1 = require("./pageFactory");
var pageId_1 = require("./pageId");
var pageIterator_1 = require("./pageIterator");
var chooseDataSourceTypePage_1 = require("./pages/chooseDataSourceTypePage");
var chooseSqlConnectionPage_1 = require("./pages/chooseSqlConnectionPage");
var federatedMasterDetailRelationshipsPage_1 = require("./pages/federationDataSourceWizard/federatedMasterDetailRelationshipsPage");
var federatedQueryConfigurePage_1 = require("./pages/federationDataSourceWizard/federatedQueryConfigurePage");
var chooseJsonConnectionPage_1 = require("./pages/jsonDataSourceWizard/chooseJsonConnectionPage");
var chooseJsonSchemaPage_1 = require("./pages/jsonDataSourceWizard/chooseJsonSchemaPage");
var chooseJsonSourcePage_1 = require("./pages/jsonDataSourceWizard/chooseJsonSourcePage");
var configureMasterDetailRelationshipsPage_1 = require("./pages/multiQueryWizard/configureMasterDetailRelationshipsPage");
var multiQueryConfigurePage_1 = require("./pages/multiQueryWizard/multiQueryConfigurePage");
var multiQueryConfigureParametersPage_1 = require("./pages/multiQueryWizard/multiQueryConfigureParametersPage");
var chooseObjectDataSourceDataMembersPage_1 = require("./pages/objectDataSourceWizard/chooseObjectDataSourceDataMembersPage");
var chooseObjectDataSourceTypesPage_1 = require("./pages/objectDataSourceWizard/chooseObjectDataSourceTypesPage");
var configureObjectDataSourceParametersPage_1 = require("./pages/objectDataSourceWizard/configureObjectDataSourceParametersPage");
var popupWizard_1 = require("./popupWizard");
var _MultiQueryDataSourceWizardOptions = (function (_super) {
    __extends(_MultiQueryDataSourceWizardOptions, _super);
    function _MultiQueryDataSourceWizardOptions() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return _MultiQueryDataSourceWizardOptions;
}(dataSourceWizard_1._DataSourceWizardOptionsBase));
exports._MultiQueryDataSourceWizardOptions = _MultiQueryDataSourceWizardOptions;
var MultiQueryDataSourceWizard = (function (_super) {
    __extends(MultiQueryDataSourceWizard, _super);
    function MultiQueryDataSourceWizard(pageFactory, _wizardOptions) {
        var _this = _super.call(this, pageFactory, _wizardOptions.callbacks.finishCallback) || this;
        _this._wizardOptions = _wizardOptions;
        _this.title = localization_utils_1.getLocalization('Data Source Wizard', 'AnalyticsCoreStringId.SqlDSWizard_Title');
        _this._extendCssClass = 'dxrd-multiqueries-sqldatasource-wizard';
        _this.height(443);
        return _this;
    }
    MultiQueryDataSourceWizard.prototype.canRunWizard = function () {
        return this._wizardOptions.jsonDataSourceAvailable || this._wizardOptions.sqlDataSourceAvailable || this._wizardOptions.objectDataSourceAvailable;
    };
    MultiQueryDataSourceWizard.prototype.initialize = function (state, createIterator) {
        var _this = this;
        if (createIterator === void 0) { createIterator = function (pageFactory, stateManager) { return new MultiQueryDataSourceWizardPageIterator(pageFactory, stateManager, _this._wizardOptions); }; }
        if (this._wizardOptions.sqlDataSourceAvailable || !_utils_1.isEmptyObject(state.sqlDataSourceWizard)) {
            state.dataSourceType = chooseDataSourceTypePage_1.DataSourceType.Sql;
        }
        else if (this._wizardOptions.jsonDataSourceAvailable || state.jsonDataSourceWizard.jsonSource) {
            state.dataSourceType = chooseDataSourceTypePage_1.DataSourceType.Json;
        }
        else if (this._wizardOptions.objectDataSourceAvailable) {
            state.dataSourceType = chooseDataSourceTypePage_1.DataSourceType.Object;
        }
        _super.prototype.initialize.call(this, state, createIterator);
    };
    return MultiQueryDataSourceWizard;
}(popupWizard_1.PopupWizard));
exports.MultiQueryDataSourceWizard = MultiQueryDataSourceWizard;
var MultiQueryDataSourceWizardPageIterator = (function (_super) {
    __extends(MultiQueryDataSourceWizardPageIterator, _super);
    function MultiQueryDataSourceWizardPageIterator(pagesFactory, stateManager, _wizardOptions) {
        var _this = _super.call(this, pagesFactory, stateManager) || this;
        _this._wizardOptions = _wizardOptions;
        return _this;
    }
    MultiQueryDataSourceWizardPageIterator.prototype.getNextPageId = function (pageId) {
        if (!pageId && this._isMoreThanOneDataSourceTypeAvailable(this._wizardOptions)) {
            return pageId_1.DataSourceWizardPageId.ChooseDataSourceTypePage;
        }
        else if (!pageId) {
            return this.getNextPageId(pageId_1.DataSourceWizardPageId.ChooseDataSourceTypePage);
        }
        else if (pageId === pageId_1.DataSourceWizardPageId.ChooseDataSourceTypePage && this._getCurrentState().dataSourceType === chooseDataSourceTypePage_1.DataSourceType.Sql) {
            return pageId_1.SqlDataSourceWizardPageId.ChooseConnectionPage;
        }
        else if (pageId === pageId_1.DataSourceWizardPageId.ChooseDataSourceTypePage && this._getCurrentState().dataSourceType === chooseDataSourceTypePage_1.DataSourceType.Federation) {
            return pageId_1.FederationDataSourceWizardPageId.FederatedQueryConfigurePage;
        }
        else if (pageId === pageId_1.DataSourceWizardPageId.ChooseDataSourceTypePage && this._getCurrentState().dataSourceType === chooseDataSourceTypePage_1.DataSourceType.Object) {
            return pageId_1.ObjectDataSourceWizardPageId.ChooseTypesPage;
        }
        else if (pageId === pageId_1.ObjectDataSourceWizardPageId.ChooseTypesPage && this._getCurrentState().objectDataSourceWizard.selectedType) {
            return pageId_1.ObjectDataSourceWizardPageId.ChooseDataMembersPage;
        }
        else if (pageId === pageId_1.ObjectDataSourceWizardPageId.ChooseDataMembersPage) {
            return pageId_1.ObjectDataSourceWizardPageId.ConfigureParametersPage;
        }
        else if (pageId === pageId_1.DataSourceWizardPageId.ChooseDataSourceTypePage && this._getCurrentState().dataSourceType === chooseDataSourceTypePage_1.DataSourceType.Json && this._wizardOptions.connectionStrings.json().length > 0) {
            return pageId_1.JsonDataSourceWizardPageId.ChooseConnectionPage;
        }
        else if (this._wizardOptions.allowCreateNewJsonConnection && pageId === pageId_1.DataSourceWizardPageId.ChooseDataSourceTypePage && this._getCurrentState().dataSourceType === chooseDataSourceTypePage_1.DataSourceType.Json) {
            return pageId_1.JsonDataSourceWizardPageId.ChooseJsonSourcePage;
        }
        else if (pageId === pageId_1.JsonDataSourceWizardPageId.ChooseConnectionPage && this._getCurrentState().jsonDataSourceWizard.connectionName) {
            return pageId_1.JsonDataSourceWizardPageId.ChooseJsonSchemaPage;
        }
        else if (this._wizardOptions.allowCreateNewJsonConnection && pageId === pageId_1.JsonDataSourceWizardPageId.ChooseConnectionPage && !this._getCurrentState().jsonDataSourceWizard.connectionName) {
            return pageId_1.JsonDataSourceWizardPageId.ChooseJsonSourcePage;
        }
        else if (pageId === pageId_1.JsonDataSourceWizardPageId.ChooseJsonSourcePage) {
            return pageId_1.JsonDataSourceWizardPageId.ChooseJsonSchemaPage;
        }
        else if (pageId === pageId_1.SqlDataSourceWizardPageId.ChooseConnectionPage && this._getCurrentState().sqlDataSourceWizard.name) {
            return pageId_1.SqlDataSourceWizardPageId.MultiQueryConfigurePage;
        }
        else if (this._getCurrentState().sqlDataSourceWizard.sqlDataSourceJSON && pageId === pageId_1.SqlDataSourceWizardPageId.MultiQueryConfigurePage && this._getCurrentState().sqlDataSourceWizard.customQueries.length > 0) {
            return pageId_1.SqlDataSourceWizardPageId.MultiQueryConfigureParametersPage;
        }
        else if (pageId === pageId_1.SqlDataSourceWizardPageId.MultiQueryConfigurePage || pageId === pageId_1.SqlDataSourceWizardPageId.MultiQueryConfigureParametersPage) {
            var sqlDataSourceWrapped = dataSourceWizardState_1._restoreSqlDataSourceFromState(this._getCurrentState().sqlDataSourceWizard);
            if (sqlDataSourceWrapped.sqlDataSource.queries().length > 1) {
                return pageId_1.DataSourceWizardPageId.ConfigureMasterDetailRelationshipsPage;
            }
        }
        else if (pageId === pageId_1.FederationDataSourceWizardPageId.FederatedQueryConfigurePage) {
            var federationDataSource = dataSourceWizardState_1._restoreFederationDataSourceFromState(this._getCurrentState().federationDataSourceWizard, this._wizardOptions.dataSources);
            if (federationDataSource.queries().length > 1) {
                return pageId_1.FederationDataSourceWizardPageId.FederatedMasterDetailRelationshipsPage;
            }
        }
    };
    return MultiQueryDataSourceWizardPageIterator;
}(pageIterator_1.PageIterator));
exports.MultiQueryDataSourceWizardPageIterator = MultiQueryDataSourceWizardPageIterator;
function _registerMultiQueryDataSourcePages(factory, dataSourceWizardOptions) {
    if (factory === void 0) { factory = new pageFactory_1.PageFactory(); }
    chooseDataSourceTypePage_1._registerChooseDataSourceTypePage(factory, dataSourceWizardOptions);
    chooseJsonConnectionPage_1._registerChooseJsonConnectionPage(factory, dataSourceWizardOptions);
    chooseJsonSourcePage_1._registerChooseJsonSourcePage(factory, dataSourceWizardOptions.requestWrapper, dataSourceWizardOptions.callbacks.getItemsProviderCallback);
    chooseJsonSchemaPage_1._registerChooseJsonSchemaPage(factory, dataSourceWizardOptions.requestWrapper, dataSourceWizardOptions.callbacks);
    chooseSqlConnectionPage_1._registerChooseSqlConnectionPage(factory, dataSourceWizardOptions.connectionStrings.sql);
    specifyObjectDataSourceSettingsPage_1._registerSpecifyObjectDataSourceSettingsPage(factory, dataSourceWizardOptions);
    federatedQueryConfigurePage_1._registerFederatedQueryConfigurePage(factory, dataSourceWizardOptions);
    federatedMasterDetailRelationshipsPage_1._registerFederatedMasterDetailRelationshipsPage(factory, _requestwrapper_1.wrapGetFederationdResultSchema(dataSourceWizardOptions.callbacks.federationDataSourceResultSchema), dataSourceWizardOptions);
    multiQueryConfigurePage_1._registerMultiQueryConfigurePage(factory, dataSourceWizardOptions);
    multiQueryConfigureParametersPage_1._registerMultiQueryConfigureParametersPage(factory, dataSourceWizardOptions.requestWrapper);
    configureMasterDetailRelationshipsPage_1._registerConfigureMasterDetailRelationshipsPage(factory, _requestwrapper_1.wrapRebuildResultSchema(dataSourceWizardOptions.callbacks.sqlDataSourceResultSchema));
    chooseObjectDataSourceTypesPage_1._registerChooseObjectDataSourceTypesPage(factory, dataSourceWizardOptions);
    chooseObjectDataSourceDataMembersPage_1._registerChooseObjectDataSourceDataMembersPage(factory, dataSourceWizardOptions);
    configureObjectDataSourceParametersPage_1._registerConfigureObjectDataSourceParametersPage(factory, dataSourceWizardOptions.callbacks.getItemsProviderCallback);
    return factory;
}
exports._registerMultiQueryDataSourcePages = _registerMultiQueryDataSourcePages;
function _createMultiQueryDataSourceWizard(factory, dataSourceWizardOptions) {
    if (factory === void 0) { factory = new pageFactory_1.PageFactory(); }
    _registerMultiQueryDataSourcePages(factory, dataSourceWizardOptions);
    return new MultiQueryDataSourceWizard(factory, dataSourceWizardOptions);
}
exports._createMultiQueryDataSourceWizard = _createMultiQueryDataSourceWizard;
