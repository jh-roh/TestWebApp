/**
* DevExpress Analytics (query-builder\dataSource\federation\federationDataSource.js)
* Version:  22.1.5
* Build date: Sep 5, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.FederationDataSource = void 0;
var ko = require("knockout");
var utils_1 = require("../../../serializer/utils");
var _utils_1 = require("../../../serializer/_utils");
var utils_2 = require("../utils");
var transformQuery_1 = require("./federatedQueries/transformQuery");
var unionQuery_1 = require("./federatedQueries/unionQuery");
var federatedQueriesContainer_1 = require("./federatedQueriesContainer");
var federationDataSourceMeta_1 = require("./federationDataSourceMeta");
var federationMasterDetailRelation_1 = require("./federationMasterDetailRelation");
var federationSerializableModel_1 = require("./federationSerializableModel");
var federationSource_1 = require("./federationSource");
var _dbSchemaFederationDataSourceProvider_1 = require("./_dbSchemaFederationDataSourceProvider");
var FederationDataSource = (function (_super) {
    __extends(FederationDataSource, _super);
    function FederationDataSource(model, dataSources, fielListProvider, serializer) {
        var _this = _super.call(this, model, dataSources, serializer) || this;
        _this.dataSources = dataSources;
        _this.fielListProvider = fielListProvider;
        _this.serializableSourceMap = ko.observableArray();
        _this._serializer.deserialize(_this, _utils_1.extend(model, { '@ItemType': 'FederationDataSource' }));
        _this.sources = utils_1.deserializeArray(model['Sources'], function (item) {
            return new federationSource_1.FederationSource(item, serializer);
        });
        _this.queries = utils_1.deserializeArray(model['Queries'], function (item) { return _this.createQuery(item); });
        _this.relations = utils_1.deserializeArray(model['Relations'], function (item) {
            return new federationMasterDetailRelation_1.FederationMasterDetailRelation(item, _this._serializer);
        });
        if (fielListProvider)
            _this._disposables.push(_this.dbSchemaProvider = new _dbSchemaFederationDataSourceProvider_1.DBSchemaFederationDataSourceProvider(_this.fielListProvider));
        _this.updateSerializableModel();
        return _this;
    }
    FederationDataSource.prototype.getInfo = function () {
        return federationDataSourceMeta_1.federationDataSourceSerializationInfo;
    };
    FederationDataSource.prototype.getSerializableModel = function () {
        return this._serializableModel;
    };
    FederationDataSource.prototype.createQuery = function (item) {
        var query = _super.prototype.createQuery.call(this, item);
        if (!query) {
            if (item['@QueryType'] === utils_2.FederationQueryType[utils_2.FederationQueryType.UnionNode]) {
                return new unionQuery_1.UnionQuery(item, this.dataSources, this._serializer);
            }
            else if (item['@QueryType'] === utils_2.FederationQueryType[utils_2.FederationQueryType.TransformationNode]) {
                return new transformQuery_1.TransformQuery(item, this._serializer);
            }
        }
        return query;
    };
    FederationDataSource.prototype.updateSerializableModel = function () {
        var _this = this;
        this.serializableSourceMap = ko.observableArray();
        this.sources().forEach(function (source) {
            var dataSourceName = source.getDataSourceName();
            dataSourceName && _this.serializableSourceMap().push({
                name: ko.observable(source.sourceName()),
                dataSource: ko.observable(_this.dataSources().filter(function (x) { return x.name === dataSourceName; })[0].data)
            });
        });
        this._serializableModel = new federationSerializableModel_1.SerializableDataFederationDataSource(this, this._serializer);
    };
    FederationDataSource.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this.disposeObservableArray(this.relations);
        this._serializableModel.dispose();
    };
    return FederationDataSource;
}(federatedQueriesContainer_1.FederatedQueriesContainer));
exports.FederationDataSource = FederationDataSource;
