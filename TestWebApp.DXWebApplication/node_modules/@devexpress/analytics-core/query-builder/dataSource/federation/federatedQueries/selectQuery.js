/**
* DevExpress Analytics (query-builder\dataSource\federation\federatedQueries\selectQuery.js)
* Version:  22.1.5
* Build date: Sep 5, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SelectQuery = exports.selectQuerySerializationsInfo = void 0;
var ko = require("knockout");
var serializer_1 = require("../../../../serializer/serializer");
var utils_1 = require("../../../../serializer/utils");
var _utils_1 = require("../../../../serializer/_utils");
var utils_2 = require("../../utils");
var federatedQueryExpression_1 = require("../federatedQueryExpression");
var federationSource_1 = require("../federationSource");
var sourceQuery_1 = require("./sourceQuery");
var subNode_1 = require("./subNode");
exports.selectQuerySerializationsInfo = [
    { propertyName: 'queryType', modelName: '@QueryType' },
    { propertyName: 'alias', modelName: '@Alias' },
    { propertyName: 'expressions', modelName: 'Expressions', array: true },
    { propertyName: 'subNodes', modelName: 'SubNodes', array: true },
    { propertyName: 'root', modelName: 'Root' },
    { propertyName: 'itemType', modelName: '@ItemType' }
];
var SelectQuery = (function (_super) {
    __extends(SelectQuery, _super);
    function SelectQuery(model, serializer, _path) {
        var _this = _super.call(this) || this;
        _this._path = _path;
        _this.init(model, serializer, _path);
        return _this;
    }
    Object.defineProperty(SelectQuery.prototype, "sources", {
        get: function () {
            return ko.observableArray([this.root()].concat(this.subNodes().map(function (node) { return node.query(); })).map(function (sourceQuery) { return new federationSource_1.FederationSource({}, new serializer_1.ModelSerializer(), sourceQuery.getPath(), sourceQuery.sourceName()); }));
        },
        enumerable: false,
        configurable: true
    });
    SelectQuery.prototype.getInfo = function () {
        return exports.selectQuerySerializationsInfo;
    };
    SelectQuery.prototype.generateName = function () {
        return this.root() ? this.root().alias() : 'SelectQuery';
    };
    SelectQuery.prototype.init = function (model, serializer, rootPath) {
        (serializer || new serializer_1.ModelSerializer()).deserialize(this, _utils_1.extend(model, { '@ItemType': 'Query' }));
        this._disposables.push(this.queryType = ko.pureComputed(function () { return utils_2.FederationQueryType[utils_2.FederationQueryType.SelectNode]; }));
        this.expressions = utils_1.deserializeArray(model['Expressions'], function (item) {
            return new federatedQueryExpression_1.FederatedQueryExpression(item, serializer);
        });
        this.subNodes = utils_1.deserializeArray(model['SubNodes'], function (item) {
            return new subNode_1.SubNode(item, serializer);
        });
        if (model['Root'])
            this.root = ko.observable(new sourceQuery_1.SourceQuery(model['Root'], serializer, this.alias(), rootPath));
    };
    return SelectQuery;
}(utils_1.Disposable));
exports.SelectQuery = SelectQuery;
