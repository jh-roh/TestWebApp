/**
* DevExpress Analytics (query-builder\dataSource\federation\federatedQueries\transformQuery.js)
* Version:  22.1.5
* Build date: Sep 5, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.FederationTransformationRule = exports.TransformQuery = exports.transformationRuleSerializationsInfo = exports.transformQuerySerializationsInfo = void 0;
var ko = require("knockout");
var utils_1 = require("../../utils");
var serializer_1 = require("../../../../serializer/serializer");
var _utils_1 = require("../../../../serializer/_utils");
var sourceQuery_1 = require("./sourceQuery");
var utils_2 = require("../../../../serializer/utils");
var federationSource_1 = require("../federationSource");
exports.transformQuerySerializationsInfo = [
    { propertyName: 'queryType', modelName: '@QueryType' },
    { propertyName: 'alias', modelName: '@Alias' },
    { propertyName: 'transformationRules', modelName: 'TransformationRules', array: true },
    { propertyName: 'root', modelName: 'Root' },
    { propertyName: 'itemType', modelName: '@ItemType' }
];
exports.transformationRuleSerializationsInfo = [
    { propertyName: 'name', modelName: '@Name' },
    { propertyName: 'alias', modelName: '@Alias' },
    { propertyName: 'unfold', modelName: '@Unfold' },
    { propertyName: 'flatten', modelName: '@Flatten' },
    { propertyName: 'itemType', modelName: '@ItemType' }
];
var TransformQuery = (function (_super) {
    __extends(TransformQuery, _super);
    function TransformQuery(model, serializer) {
        var _this = _super.call(this) || this;
        (serializer || new serializer_1.ModelSerializer()).deserialize(_this, _utils_1.extend(model, { '@ItemType': 'Query' }));
        _this._disposables.push(_this.queryType = ko.pureComputed(function () { return utils_1.FederationQueryType[utils_1.FederationQueryType.TransformationNode]; }));
        _this.transformationRules = utils_2.deserializeArray(model['TransformationRules'], function (item) {
            return new FederationTransformationRule(item, serializer);
        });
        if (model['Root'])
            _this.root = ko.observable(new sourceQuery_1.SourceQuery(model['Root'], serializer));
        return _this;
    }
    Object.defineProperty(TransformQuery.prototype, "sources", {
        get: function () {
            return ko.observableArray([new federationSource_1.FederationSource({}, new serializer_1.ModelSerializer(), this.root().getPath(), this.root().sourceName())]);
        },
        enumerable: false,
        configurable: true
    });
    TransformQuery.prototype.getInfo = function () {
        return exports.transformQuerySerializationsInfo;
    };
    TransformQuery.prototype.generateName = function () {
        return this.root() && this.root().sourceName().split('_').pop();
    };
    return TransformQuery;
}(utils_2.Disposable));
exports.TransformQuery = TransformQuery;
var FederationTransformationRule = (function () {
    function FederationTransformationRule(model, serializer) {
        (serializer || new serializer_1.ModelSerializer()).deserialize(this, _utils_1.extend(model, { '@ItemType': 'TransformationRule' }));
    }
    FederationTransformationRule.prototype.getInfo = function () {
        return exports.transformationRuleSerializationsInfo;
    };
    return FederationTransformationRule;
}());
exports.FederationTransformationRule = FederationTransformationRule;
