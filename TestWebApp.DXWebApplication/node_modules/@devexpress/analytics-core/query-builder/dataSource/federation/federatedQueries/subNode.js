/**
* DevExpress Analytics (query-builder\dataSource\federation\federatedQueries\subNode.js)
* Version:  22.1.5
* Build date: Sep 5, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubNode = exports.subNodeSerializationInfo = void 0;
var ko = require("knockout");
var serializer_1 = require("../../../../serializer/serializer");
var _utils_1 = require("../../../../serializer/_utils");
var binary_1 = require("../../../../widgets/criteria/operators/binary");
var group_1 = require("../../../../widgets/criteria/operators/group");
var binary_2 = require("../../../../widgets/criteria/operators/options/binary");
var criteriaOperatorStateMachine_1 = require("../../../../widgets/criteria/utils/criteriaOperatorStateMachine");
var operatorTokens_1 = require("../../../../widgets/criteria/utils/operatorTokens");
var relationModel_1 = require("../../../elements/relationModel");
var sourceQuery_1 = require("./sourceQuery");
exports.subNodeSerializationInfo = [
    { propertyName: 'condition', modelName: '@Condition', defaultVal: '' },
    {
        propertyName: 'joinType',
        modelName: '@JoinType',
        defaultVal: 'Inner',
    },
    { propertyName: 'query', modelName: 'Query' },
];
var SubNode = (function () {
    function SubNode(model, serializer) {
        serializer = serializer || new serializer_1.ModelSerializer();
        serializer.deserialize(this, _utils_1.extend(model, { '@ItemType': 'JoinElement' }));
        if (model['Query'])
            this.query = ko.observable(new sourceQuery_1.SourceQuery(model['Query']));
    }
    SubNode.deserializeRelationModel = function (subNodeQuery, relation) {
        var parentTableName = relation.parentTableName();
        var nestedTableName = relation.nestedTableName();
        var conditionStrings = [];
        relation.conditions().forEach(function (condition) {
            var firstCondition = '[' + nestedTableName + '.' + condition.nestedColumnName() + ']';
            var secondCondition = '[' + parentTableName + '.' + condition.parentColumnName() + ']';
            var operator = operatorTokens_1.operatorTokens[condition.operator()];
            var conditionString = firstCondition + ' ' + operator + ' ' + secondCondition;
            conditionStrings.push(conditionString);
        });
        var subNode = new SubNode({ '@JoinType': relation.joinType(), '@Condition': conditionStrings.join(' And ') });
        subNode.query(subNodeQuery);
        return subNode;
    };
    SubNode.prototype._parsePath = function (condition) {
        if (condition[0] === '[' && condition[condition.length - 1] === ']')
            return criteriaOperatorStateMachine_1.CriteriaOperatorStateMachine.parse(condition)['propertyName'];
        return condition;
    };
    SubNode.prototype._createCondition = function (parent, nested, operator) {
        return {
            '@ControlType': 'JoinCondition',
            '@ItemType': 'KeyColumn',
            '@Operator': operator,
            '@Nested': nested,
            '@Parent': parent
        };
    };
    SubNode.prototype._conditionBinary = function (operator) {
        var leftPath = this._parsePath(operator.leftPart['propertyName']);
        var rightPath = this._parsePath(operator.rightPart['propertyName']);
        var _operator = binary_2.BinaryOperatorType[operator.operatorType];
        return this._createCondition(rightPath.split('.')[1], leftPath.split('.')[1], _operator);
    };
    SubNode.prototype.createRelationModel = function (query) {
        var result = criteriaOperatorStateMachine_1.CriteriaOperatorStateMachine.parse(this.condition());
        var _operands = [];
        if (result instanceof group_1.GroupOperator) {
            result.operands.forEach(function (operand) {
                if (operand instanceof binary_1.BinaryOperator)
                    _operands.push(operand);
            });
        }
        else if (result instanceof binary_1.BinaryOperator) {
            _operands.push(result);
        }
        var parentTable = this._parsePath(_operands[0].rightPart['propertyName']).split('.')[0];
        var nestedTable = this._parsePath(_operands[0].leftPart['propertyName']).split('.')[0];
        var _keyColumns = {};
        for (var j = 0; j < _operands.length; j++) {
            var operator = _operands[j];
            _keyColumns['Item' + (j + 1)] = this._conditionBinary(operator);
        }
        return new relationModel_1.RelationViewModel({
            '@Parent': parentTable,
            '@Nested': nestedTable,
            '@Type': this.joinType(),
            'KeyColumns': _keyColumns
        }, query, new serializer_1.ModelSerializer());
    };
    SubNode.prototype.getInfo = function () {
        return exports.subNodeSerializationInfo;
    };
    return SubNode;
}());
exports.SubNode = SubNode;
