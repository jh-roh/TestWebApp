/**
* DevExpress Analytics (query-builder\dataSource\federation\federatedQueries\sourceQuery.js)
* Version:  22.1.5
* Build date: Sep 5, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SourceQuery = exports.sourceQuerySerializationsInfo = void 0;
var ko = require("knockout");
var utils_1 = require("../../utils");
var serializer_1 = require("../../../../serializer/serializer");
var metadata_1 = require("../../../metadata");
var utils_2 = require("../../../../serializer/utils");
exports.sourceQuerySerializationsInfo = [
    { propertyName: 'queryType', modelName: '@QueryType' },
    metadata_1.name,
    metadata_1.alias,
    { propertyName: 'sourceName', modelName: '@SourceName' },
];
var SourceQuery = (function (_super) {
    __extends(SourceQuery, _super);
    function SourceQuery(model, serializer, sourceName, _sourcePath) {
        var _this = _super.call(this) || this;
        _this._sourcePath = _sourcePath;
        model['@SourceName'] = model['@SourceName'] || sourceName;
        (serializer || new serializer_1.ModelSerializer()).deserialize(_this, model);
        _this._disposables.push(_this.queryType = ko.pureComputed(function () { return utils_1.FederationQueryType[utils_1.FederationQueryType.SourceNode]; }));
        return _this;
    }
    SourceQuery.prototype.getInfo = function () {
        return exports.sourceQuerySerializationsInfo;
    };
    SourceQuery.prototype.getPath = function () {
        if (this._sourcePath)
            return this._sourcePath;
        if (this.name()) {
            if (this.name() === this.sourceName())
                return this.name();
            var dataSourceName = this.sourceName().slice(0, this.sourceName().indexOf(this.name()) - 1);
            return dataSourceName + '.' + this.name();
        }
    };
    return SourceQuery;
}(utils_2.Disposable));
exports.SourceQuery = SourceQuery;
