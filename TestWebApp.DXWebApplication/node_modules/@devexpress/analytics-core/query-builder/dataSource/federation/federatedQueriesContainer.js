/**
* DevExpress Analytics (query-builder\dataSource\federation\federatedQueriesContainer.js)
* Version:  22.1.5
* Build date: Sep 5, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.FederatedQueriesContainer = void 0;
var ko = require("knockout");
var serializer_1 = require("../../../serializer/serializer");
var utils_1 = require("../utils");
var federationSource_1 = require("./federationSource");
var federatedQueryExpression_1 = require("./federatedQueryExpression");
var utils_2 = require("../../../serializer/utils");
var selectQuery_1 = require("./federatedQueries/selectQuery");
var _arrayutils_1 = require("../../../core/utils/_arrayutils");
var FederatedQueriesContainer = (function (_super) {
    __extends(FederatedQueriesContainer, _super);
    function FederatedQueriesContainer(model, dataSources, _serializer) {
        var _this = _super.call(this) || this;
        _this.dataSources = dataSources;
        _this._serializer = _serializer;
        _this.sources = ko.observableArray();
        _this._serializer = _serializer || new serializer_1.ModelSerializer();
        return _this;
    }
    FederatedQueriesContainer.prototype.getQueryNameFromPath = function (path) {
        var pathParts = path.split('.');
        var dataSource = this.dataSources().filter(function (x) { return x.ref == pathParts[0] || x.id == pathParts[0]; })[0];
        pathParts[0] = dataSource && dataSource.name || pathParts[0];
        return pathParts.join('_');
    };
    FederatedQueriesContainer.prototype.getPathFromQueryName = function (sourceName) {
        for (var _i = 0, _a = this.sources(); _i < _a.length; _i++) {
            var source = _a[_i];
            if (source.sourceName() === sourceName) {
                var path = source.getPath();
                var pathParts = path.split('.');
                var dataSourceName = pathParts.shift();
                var dataSource = this.dataSources().filter(function (x) { return x.name == dataSourceName; })[0];
                dataSourceName = dataSource && (dataSource.ref || dataSource.id) || dataSourceName;
                return dataSourceName + (pathParts.length > 0 ? '.' + pathParts.join('.') : '');
            }
        }
    };
    FederatedQueriesContainer.prototype.createQuery = function (item, dataSource) {
        if (item['@QueryType'] === utils_1.FederationQueryType[utils_1.FederationQueryType.SelectNode]) {
            return new selectQuery_1.SelectQuery(item, this._serializer, (dataSource || this).getPathFromQueryName(item['Root'] && item['Root']['@SourceName']));
        }
        return null;
    };
    FederatedQueriesContainer.prototype.addSource = function (source, queryPath) {
        if (source instanceof federationSource_1.FederationSource) {
            var existedSource = this.sources().filter(function (x) { return x.sourceName() == source.sourceName(); })[0];
            !existedSource && this.sources.push(source);
            return;
        }
        var existedSource = this.sources().filter(function (x) { return x.sourceName() == source; })[0];
        !existedSource && this.sources.push(new federationSource_1.FederationSource({}, this._serializer, queryPath, source));
    };
    FederatedQueriesContainer.prototype.removeSource = function (sourceName) {
        var source = _arrayutils_1.findFirstItemMatchesCondition(this.sources(), function (source) { return source.sourceName() === sourceName; });
        if (!this.queries().some(function (query) { return query.expressions().some(function (exp) { return exp.table() === sourceName; }); }))
            this.sources.remove(source);
    };
    FederatedQueriesContainer.prototype.addSelectQuery = function (queryPath, columnName) {
        var queryName = this.getQueryNameFromPath(queryPath);
        var query = this.queries().filter(function (query) { return query.alias() === queryName; })[0];
        if (!query) {
            query = new selectQuery_1.SelectQuery({
                '@Alias': queryName,
                'Root': {},
            }, this._serializer, queryPath);
            this.queries.push(query);
            this.addSource(queryName, queryPath);
        }
        if (!columnName || query.expressions().filter(function (expression) { return expression.name() == columnName; })[0]) {
            return;
        }
        var expression = new federatedQueryExpression_1.FederatedQueryExpression({
            '@NodeAlias': queryName,
            '@Name': columnName,
            '@ExpressionType': federatedQueryExpression_1.FederatedQueryExpressionType[federatedQueryExpression_1.FederatedQueryExpressionType.SelectColumnExpression]
        }, this._serializer);
        query.expressions.push(expression);
    };
    FederatedQueriesContainer.prototype.removeQuery = function (queryName) {
        var query = this.queries().filter(function (query) { return query.alias() === queryName; })[0];
        this.queries.remove(query);
        var source = this.sources().filter(function (x) { return x.sourceName() == queryName; })[0];
        source && this.sources.remove(source);
    };
    FederatedQueriesContainer.prototype.removeExpression = function (columnName, queryPath) {
        var queryName = this.getQueryNameFromPath(queryPath);
        var query = this.queries().filter(function (query) { return query.alias() === queryName; })[0];
        var expression = query.expressions().filter(function (x) { return x.name() == columnName; })[0];
        query.expressions.remove(expression);
        if (query.expressions().length == 0) {
            this.removeQuery(queryName);
        }
    };
    FederatedQueriesContainer.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this.disposeObservableArray(this.sources);
        this.disposeObservableArray(this.queries);
    };
    return FederatedQueriesContainer;
}(utils_2.Disposable));
exports.FederatedQueriesContainer = FederatedQueriesContainer;
