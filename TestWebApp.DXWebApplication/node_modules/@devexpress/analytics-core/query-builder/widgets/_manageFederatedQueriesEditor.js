/**
* DevExpress Analytics (query-builder\widgets\_manageFederatedQueriesEditor.js)
* Version:  22.1.5
* Build date: Sep 5, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ManageFederatedQueriesEditor = void 0;
var ko = require("knockout");
var _arrayutils_1 = require("../../core/utils/_arrayutils");
var _popupEditorBase_1 = require("../../core/widgets/_popupEditorBase");
var _localization_1 = require("../../property-grid/localization/_localization");
var templateUtils_1 = require("../../property-grid/widgets/templateUtils");
var utils_1 = require("../dataSource/utils");
var _federatedQueriesTreeNode_1 = require("../wizard/internal/federationDataSource/_federatedQueriesTreeNode");
var _federatedQueriesHelper_1 = require("./_federatedQueriesHelper");
var ManageFederatedQueriesEditor = (function (_super) {
    __extends(ManageFederatedQueriesEditor, _super);
    function ManageFederatedQueriesEditor(_dataSource, _callBack, rtl) {
        if (rtl === void 0) { rtl = false; }
        var _this = _super.call(this) || this;
        _this._dataSource = _dataSource;
        _this._callBack = _callBack;
        _this.rtl = rtl;
        _this.className = 'dxrd-federated-manageQueries-editor';
        _this._disposables.push(_this._queriesPopupHelper = new _federatedQueriesHelper_1.FederatedQueriesHelper(_this._dataSource, _this._dataSource.queries, {}, rtl));
        _this._createAddQueryButton();
        _this.queriesStoreData = ko.pureComputed(function () { return _this._dataSource && _this._dataSource.queries().map(function (x) {
            return {
                name: x.alias(),
                id: x.alias(),
                type: utils_1.FederationQueryType[x.queryType()]
            };
        }); });
        _this._disposables.push(_this.queriesStoreData);
        _this.queriesGrid = {
            rtlEnabled: rtl,
            dataSource: _this.queriesStoreData,
            showColumnLines: false,
            hoverStateEnabled: true,
            scrolling: { mode: 'infinite' },
            height: '100%',
            editing: {
                mode: 'cell',
                allowUpdating: true,
            },
            onRowUpdating: function (event) {
                event.oldData.alias = event.newData.name;
            },
            columns: [{
                    dataField: 'name',
                    get caption() {
                        return _localization_1.getLocalization('Name', 'AnalyticsCoreStringId.CollectionEditor_Name_Placeholder');
                    },
                }, {
                    type: 'buttons',
                    width: 100,
                    buttons: [
                        {
                            icon: 'edit',
                            onClick: function (e) {
                                _this._queriesPopupHelper.editQuery(e.row.data.type, e.row.data.id);
                            },
                            cssClass: 'dxrd-manage-queries-actions dxd-icon-highlighted dxrd-image-operations-edit-query',
                            template: templateUtils_1.getTemplate('dxrd-svg-operations-edit'),
                        },
                        {
                            icon: 'delete',
                            onClick: function (e) {
                                _this._dataSource.removeQuery(e.row.data.id);
                            },
                            cssClass: 'dxrd-manage-queries-actions dxd-icon-highlighted dxrd-image-recycle-bin',
                            template: templateUtils_1.getTemplate('dxrd-svg-operations-recycle_bin'),
                        }
                    ]
                }
            ]
        };
        return _this;
    }
    ManageFederatedQueriesEditor.prototype._createAddQueryButton = function () {
        var addQueryTemplate = 'dxrd-managequeries-selectbox';
        var queriesTreeNode = new _federatedQueriesTreeNode_1.FederatedQueriesTreeNode('queries', _localization_1.getLocalization('Federated Queries', 'DataAccessUIStringId.FederatedQueryCollectionList_Title'), 'list', false, ko.observable({ showQbCallBacks: this._queriesPopupHelper.callBacks }));
        var popoverListItems = queriesTreeNode.popoverListItems();
        var addAction = {
            text: _localization_1.getLocalization('Add query', 'AnalyticsCoreStringId.SqlDSWizard_AddQuery'),
            items: popoverListItems.map(function (x) {
                return {
                    text: x.name,
                    onClick: x.addAction
                };
            }),
            dropDownOptions: {
                width: 150,
                container: '.dx-designer-viewport',
            },
            useItemTextAsTitle: false
        };
        this.buttonItems.push({ toolbar: 'bottom', location: 'before', template: function () { return templateUtils_1.getTemplate(addQueryTemplate); }, options: addAction });
    };
    ManageFederatedQueriesEditor.prototype.save = function () {
        var _this = this;
        this.queriesStoreData().forEach(function (data) {
            var query = _arrayutils_1.findFirstItemMatchesCondition(_this._dataSource.queries(), function (query) { return query.alias() === data.id; });
            query.sources().forEach(function (x) { return _this._dataSource.addSource(x); });
            if (query && data.id !== data.name) {
                query.alias(data.name);
            }
        });
        this._callBack();
        _super.prototype.save.call(this);
        this.dispose();
    };
    ManageFederatedQueriesEditor.prototype.canSave = function () {
        return !!this.queriesStoreData().length;
    };
    ManageFederatedQueriesEditor.prototype.close = function () {
        _super.prototype.close.call(this);
        this.dispose();
    };
    ManageFederatedQueriesEditor.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this.queriesGrid = null;
        this._dataSource = null;
        this._callBack = null;
    };
    ManageFederatedQueriesEditor.prototype.title = function () {
        return _localization_1.getLocalization('Manage Queries', 'DataAccessUIStringId.FederatedQueryCollectionEditorForm_Title');
    };
    return ManageFederatedQueriesEditor;
}(_popupEditorBase_1.PopupEditorBase));
exports.ManageFederatedQueriesEditor = ManageFederatedQueriesEditor;
