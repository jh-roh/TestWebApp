/**
* DevExpress Analytics (query-builder\widgets\masterdetaileditor\_masterDetailEditor.js)
* Version:  22.1.5
* Build date: Sep 5, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.MasterDetailEditor = void 0;
var ko = require("knockout");
var $ = require("jquery");
var localization_utils_1 = require("../../../property-grid/localization/localization_utils");
var _localizationStringIds_1 = require("../../../property-grid/localization/_localizationStringIds");
var _popupService_1 = require("../../../property-grid/internal/_popupService");
var _infoMessageHelpers_1 = require("../../../core/utils/_infoMessageHelpers");
var _masterDetailEditorPopupManager_1 = require("./_masterDetailEditorPopupManager");
var _arrayutils_1 = require("../../../core/utils/_arrayutils");
var _masterQuerySurface_1 = require("./_masterQuerySurface");
var _popupEditorBase_1 = require("../../../core/widgets/_popupEditorBase");
var MasterDetailEditor = (function (_super) {
    __extends(MasterDetailEditor, _super);
    function MasterDetailEditor(relations, resultSet, saveCallBack) {
        var _this = _super.call(this) || this;
        _this.isValid = ko.observable(true);
        _this.loadPanelVisible = ko.observable(false);
        _this.masterQueries = ko.observableArray();
        _this.popupService = new _popupService_1.PopupService();
        _this.save = function () {
            var emptyFieldsExist = relations().some(function (relation) {
                return !relation.detailQuery() || !relation.masterQuery() ||
                    relation.keyColumns().some(function (column) { return (!column.detailColumn() || !column.masterColumn()); });
            });
            if (emptyFieldsExist) {
                _infoMessageHelpers_1.ShowMessage(localization_utils_1.getLocalization('Some fields are empty. Please fill all empty fields or remove the corresponding conditions to proceed.', 'DataAccessUIStringId.JoinEditorFillAllFieldsException'));
            }
            else {
                saveCallBack().done(function () { _this.popupVisible(false); });
            }
        };
        _this.createRelation = function (target) {
            var popupItems = resultSet.tables()
                .filter(function (table) { return table.tableName() !== target.queryName; })
                .map(function (table) { return { name: table.tableName() }; });
            return {
                data: new _masterDetailEditorPopupManager_1.MasterDetailEditorPopupManager(target, _this.popupService, 'create', popupItems),
                templateName: 'dx-filtereditor-create'
            };
        };
        _this.setColumn = function (target) {
            var table = _arrayutils_1.getFirstItemByPropertyValue(resultSet.tables(), 'tableName', target.queryName);
            return {
                data: new _masterDetailEditorPopupManager_1.MasterDetailEditorPopupManager(target, _this.popupService, 'setColumn', table ? table.columns() : []),
                templateName: 'dx-masterdetail-editor-setColumn'
            };
        };
        _this._createMainPopupButtons();
        var masterQueries = {};
        resultSet.tables().forEach(function (table) {
            masterQueries[table.tableName()] = new _masterQuerySurface_1.MasterQuerySurface(table.tableName(), relations);
        });
        relations().forEach(function (relation) {
            masterQueries[relation.masterQuery()] = masterQueries[relation.masterQuery()] || new _masterQuerySurface_1.MasterQuerySurface(relation.masterQuery(), relations);
            masterQueries[relation.masterQuery()].add(relation);
        });
        _this.masterQueries($.map(masterQueries, function (value) { return value; }));
        return _this;
    }
    MasterDetailEditor.prototype.title = function () {
        return localization_utils_1.getLocalization('Master-Detail Relation Editor', _localizationStringIds_1.StringId.MasterDetailRelationsEditor);
    };
    return MasterDetailEditor;
}(_popupEditorBase_1.PopupEditorBase));
exports.MasterDetailEditor = MasterDetailEditor;
