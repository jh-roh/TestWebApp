/**
* DevExpress Analytics (query-builder\widgets\_federatedQueriesHelper.js)
* Version:  22.1.5
* Build date: Sep 5, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.FederatedQueriesHelper = void 0;
var _getNameHelpers_1 = require("../../core/internal/_getNameHelpers");
var _arrayutils_1 = require("../../core/utils/_arrayutils");
var utils_1 = require("../../serializer/utils");
var selectQuery_1 = require("../dataSource/federation/federatedQueries/selectQuery");
var transformQuery_1 = require("../dataSource/federation/federatedQueries/transformQuery");
var unionQuery_1 = require("../dataSource/federation/federatedQueries/unionQuery");
var utils_2 = require("../dataSource/utils");
var _federationSelectQueryBuilderPopup_1 = require("../wizard/internal/federationDataSource/_federationSelectQueryBuilderPopup");
var _federationTransformQueryBuilderPopup_1 = require("../wizard/internal/federationDataSource/_federationTransformQueryBuilderPopup");
var _federationUnionQueryBuilderPopup_1 = require("../wizard/internal/federationDataSource/_federationUnionQueryBuilderPopup");
var FederatedQueriesHelper = (function (_super) {
    __extends(FederatedQueriesHelper, _super);
    function FederatedQueriesHelper(_dataSource, queries, callbacks, rtl) {
        if (rtl === void 0) { rtl = false; }
        var _this = _super.call(this) || this;
        _this._dataSource = _dataSource;
        _this.queries = queries;
        _this._showSelectQbCallBack = function (name) {
            if (name === void 0) { name = null; }
            _this._popupSelectQueryBuilder.show(_this._getQuery(function () { return new selectQuery_1.SelectQuery({}); }, name));
        };
        _this._showUnionQbCallBack = function (name) {
            if (name === void 0) { name = null; }
            _this._popupUnionQueryBuilder.show(_this._getQuery(function () { return new unionQuery_1.UnionQuery({}, _this._dataSource.dataSources); }, name));
        };
        _this._showTransformQbCallBack = function (name) {
            if (name === void 0) { name = null; }
            _this._popupTransformQueryBuilder.show(_this._getQuery(function () { return new transformQuery_1.TransformQuery({}); }, name));
        };
        _this.template = 'dx-querybuilder-federation-popup-templates';
        var saveCallback = function (query) {
            _this._setQuery(query);
            queries.valueHasMutated();
            callbacks.onSave && callbacks.onSave();
        };
        _this._afterAddQuery = callbacks.afterAddQuery;
        _this._disposables.push(queries.subscribe(function (queries) { return queries.forEach(function (query) {
            query.sources().forEach(function (x) { return _this._dataSource.addSource(x); });
        }); }));
        _this._disposables.push(_this._popupSelectQueryBuilder = new _federationSelectQueryBuilderPopup_1.FederationSelectQueryBuilderPopup(saveCallback, _this._dataSource, rtl, callbacks.onClose));
        _this._disposables.push(_this._popupUnionQueryBuilder = new _federationUnionQueryBuilderPopup_1.FederationUnionQueryBuilderPopup(saveCallback, _this._dataSource, rtl, callbacks.onClose));
        _this._disposables.push(_this._popupTransformQueryBuilder = new _federationTransformQueryBuilderPopup_1.FederationTransformQueryBuilderPopup(saveCallback, _this._dataSource, rtl, callbacks.onClose));
        _this.callBacks = {
            joinCallBack: _this._showSelectQbCallBack,
            unionCallBack: _this._showUnionQbCallBack,
            transformCallBack: _this._showTransformQbCallBack
        };
        _this.popupItems = [
            { template: 'dxrd-querybuilder-federation-popup', model: _this._popupSelectQueryBuilder },
            { template: 'dxrd-querybuilder-federation-popup', model: _this._popupUnionQueryBuilder },
            { template: 'dxrd-querybuilder-federation-popup', model: _this._popupTransformQueryBuilder }
        ];
        return _this;
    }
    FederatedQueriesHelper.prototype._getQuery = function (creator, name) {
        return name ? _arrayutils_1.findFirstItemMatchesCondition(this.queries(), function (item) { return name === item.alias(); }) : creator();
    };
    FederatedQueriesHelper.prototype._setQuery = function (query) {
        if (!query)
            return;
        if (this.queries.indexOf(query) === -1) {
            query.alias(query.alias() || query.generateName());
            if (this._dataSource.queries().filter(function (x) { return x.alias() === query.alias(); })[0]) {
                query.alias(_getNameHelpers_1.getUniqueName(this._dataSource.queries().map(function (x) { return x.alias(); }), query.alias()));
            }
            this.queries.push(query);
            this._afterAddQuery && this._afterAddQuery(query);
        }
    };
    FederatedQueriesHelper.prototype.editQuery = function (type, name) {
        switch (type) {
            case utils_2.FederationQueryType.SelectNode:
                this.callBacks.joinCallBack(name);
                break;
            case utils_2.FederationQueryType.UnionNode:
                this.callBacks.unionCallBack(name);
                break;
            case utils_2.FederationQueryType.TransformationNode:
                this.callBacks.transformCallBack(name);
                break;
        }
    };
    FederatedQueriesHelper.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this._dataSource = null;
    };
    return FederatedQueriesHelper;
}(utils_1.Disposable));
exports.FederatedQueriesHelper = FederatedQueriesHelper;
