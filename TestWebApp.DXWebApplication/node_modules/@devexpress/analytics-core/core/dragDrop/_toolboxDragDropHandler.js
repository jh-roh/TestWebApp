/**
* DevExpress Analytics (core\dragDrop\_toolboxDragDropHandler.js)
* Version:  22.1.5
* Build date: Sep 5, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ToolboxDragDropHandler = void 0;
var _dragDropHandler_1 = require("./_dragDropHandler");
var size_1 = require("../elements/size");
var rectangle_1 = require("../elements/rectangle");
var _surfaceHelpers_1 = require("../internal/_surfaceHelpers");
var _utils_1 = require("../../serializer/_utils");
var ToolboxDragDropHandler = (function (_super) {
    __extends(ToolboxDragDropHandler, _super);
    function ToolboxDragDropHandler(surface, selection, undoEngine, snapHelper, dragHelperContent, controlsFactory) {
        var _this = _super.call(this, surface, selection, undoEngine, snapHelper, dragHelperContent) || this;
        _this.cursor = 'arrow';
        _this._controlsFactory = controlsFactory;
        _this.containment = '.dxrd-designer';
        _this['cursorAt'] = {
            top: 0,
            left: 0
        };
        return _this;
    }
    ToolboxDragDropHandler.prototype.helper = function (draggable) {
        _super.prototype.helper.call(this, draggable);
        var toolboxItem = draggable;
        var size = size_1.Size.fromString(toolboxItem.info['@SizeF'] || toolboxItem.info['size'] || '100,23');
        this.recalculateSize(size);
        this.dragHelperContent.setContent(new rectangle_1.Rectangle(0, 0, this._size.width(), this._size.height()));
    };
    ToolboxDragDropHandler.prototype.doStopDrag = function (ui, draggable) {
        this.dragHelperContent.reset();
        if (this.dragHelperContent.isLocked())
            return;
        if (this.selection.dropTarget) {
            var toolboxItem = draggable, control = this._controlsFactory.createControl(_utils_1.extend({}, toolboxItem.info), null), parent = control.getNearestParent(this.selection.dropTarget.getControlModel()), dropTargetSurface = _surfaceHelpers_1.findSurface(parent);
            if (!dropTargetSurface || !dropTargetSurface.canDrop()) {
                return;
            }
            var position = this._getAbsoluteSurfacePosition(ui);
            dropTargetSurface.underCursor().x = position.left - (dropTargetSurface['absolutePosition'] && dropTargetSurface['absolutePosition'].x() || 0);
            dropTargetSurface.underCursor().y = position.top - (dropTargetSurface['absolutePosition'] && dropTargetSurface['absolutePosition'].y() || 0);
            if (this.surface().isFit && this.surface().isFit(dropTargetSurface) || dropTargetSurface.underCursor().isOver) {
                this.addControl(control, dropTargetSurface, this._size);
            }
        }
    };
    return ToolboxDragDropHandler;
}(_dragDropHandler_1.DragDropHandler));
exports.ToolboxDragDropHandler = ToolboxDragDropHandler;
