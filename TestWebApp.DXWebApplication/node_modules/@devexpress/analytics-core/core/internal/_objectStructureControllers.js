/**
* DevExpress Analytics (core\internal\_objectStructureControllers.js)
* Version:  22.1.5
* Build date: Sep 5, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObjectStructureTreeListController = void 0;
var $ = require("jquery");
var utils_1 = require("../../serializer/utils");
var ObjectStructureTreeListController = (function (_super) {
    __extends(ObjectStructureTreeListController, _super);
    function ObjectStructureTreeListController(propertyNames, listPropertyNames) {
        var _this = _super.call(this) || this;
        _this.selectedItem = null;
        _this.itemsFilter = function (item, path) {
            var realPropertyName = item.name.split('.')[0];
            return propertyNames ? propertyNames.indexOf(realPropertyName) !== -1 || $.isNumeric(realPropertyName) : true;
        };
        _this.hasItems = function (item) {
            var realPropertyName = item.name.split('.')[0];
            return item.isList || (listPropertyNames ? listPropertyNames.indexOf(realPropertyName) !== -1 : false);
        };
        _this.getActions = function (item) {
            return item.data && item.data['innerActions'] || [];
        };
        _this.select = function (value) {
            _this.selectedItem && _this.selectedItem.isSelected(false);
            _this.selectedItem = value;
            value.isSelected(true);
        };
        _this.showIconsForChildItems = function () { return true; };
        return _this;
    }
    ObjectStructureTreeListController.prototype.dispose = function () {
        this.selectedItem = null;
    };
    ObjectStructureTreeListController.prototype.canSelect = function (value) {
        return true;
    };
    return ObjectStructureTreeListController;
}(utils_1.Disposable));
exports.ObjectStructureTreeListController = ObjectStructureTreeListController;
