/**
* DevExpress Analytics (diagram\dragDrop\connectionPointDragHandler.js)
* Version:  22.1.5
* Build date: Sep 5, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConnectionPointDragHandler = void 0;
var _dragDropHandler_1 = require("../../core/dragDrop/_dragDropHandler");
var connectionPointSurface_1 = require("../elements/connectors/connectionPointSurface");
var connectingPointModel_1 = require("../elements/connectingPointModel");
var diagramElementViewModel_1 = require("../elements/diagramElementViewModel");
var ConnectionPointDragHandler = (function (_super) {
    __extends(ConnectionPointDragHandler, _super);
    function ConnectionPointDragHandler(surface, selection, undoEngine, snapHelper, dragHelperContent) {
        var _this = _super.call(this, surface, selection, undoEngine, snapHelper, dragHelperContent) || this;
        _this.currentConnectionPoint = null;
        _this.cursor = 'arrow';
        _this.containment = '.dxrd-ghost-container';
        _this['helper'] = function (draggable) {
            dragHelperContent.update(draggable);
        };
        return _this;
    }
    ConnectionPointDragHandler.prototype.startDrag = function (control) {
        if (!(control instanceof connectionPointSurface_1.ConnectionPointSurface)) {
            throw new Error('ConnectionPointDragHandler can be applied to the ConnectionPoint only.');
        }
        this.currentConnectionPoint = control;
    };
    ConnectionPointDragHandler.prototype.drag = function (event, ui) {
        ui.position.left += ui['scroll'].left;
        ui.position.top += ui['scroll'].top;
        var position = this._getAbsoluteSurfacePosition(ui);
        this.currentConnectionPoint.rect({ top: position.top, left: position.left });
    };
    ConnectionPointDragHandler.prototype.doStopDrag = function () {
        this.dragHelperContent.reset();
        if (this.selection.dropTarget) {
            var dropTarget = this.selection.dropTarget.getControlModel();
            if (dropTarget instanceof connectingPointModel_1.ConnectingPointViewModel) {
                var connector = this.currentConnectionPoint.parent.getControlModel();
                if (this.currentConnectionPoint.getControlModel() === connector.startPoint()) {
                    connector.startPoint().connectingPoint(dropTarget);
                }
                else {
                    connector.endPoint().connectingPoint(dropTarget);
                }
            }
            else if (dropTarget instanceof diagramElementViewModel_1.DiagramElementViewModel) {
                var connector = this.currentConnectionPoint.parent.getControlModel();
                var connectings = dropTarget.connectingPoints();
                if (this.currentConnectionPoint.getControlModel() === connector.startPoint()) {
                    connector.startPoint().connectingPoint(connectings[0]);
                }
                else {
                    connector.endPoint().connectingPoint(connectings[0]);
                }
            }
        }
    };
    return ConnectionPointDragHandler;
}(_dragDropHandler_1.DragDropHandler));
exports.ConnectionPointDragHandler = ConnectionPointDragHandler;
