/**
* DevExpress Analytics (diagram\elements\diagramSurface.js)
* Version:  22.1.5
* Build date: Sep 5, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.DiagramSurface = void 0;
var ko = require("knockout");
var baseSurface_1 = require("../../core/elements/baseSurface");
var _arrayutils_1 = require("../../core/utils/_arrayutils");
var _hoverInfo_1 = require("../../core/internal/_hoverInfo");
var DiagramSurface = (function (_super) {
    __extends(DiagramSurface, _super);
    function DiagramSurface(diagram, zoom) {
        if (zoom === void 0) { zoom = ko.observable(1); }
        var _this = _super.call(this, diagram, {
            measureUnit: ko.observable('Pixels'),
            zoom: zoom,
            dpi: ko.observable(100)
        }, DiagramSurface._unitProperties) || this;
        _this.measureUnit = ko.observable('Pixels');
        _this.dpi = ko.observable(100);
        _this.controls = ko.observableArray();
        _this.allowMultiselect = false;
        _this.focused = ko.observable(false);
        _this.selected = ko.observable(false);
        _this.underCursor = ko.observable(new _hoverInfo_1.HoverInfo());
        _this.templateName = 'dx-diagram-surface';
        _this.margins = { bottom: _this['_bottom'], left: _this['_left'], right: _this['_right'], top: _this['_top'] };
        _this.zoom = zoom;
        _this._context = _this;
        _arrayutils_1.createObservableArrayMapCollection(diagram.controls, _this.controls, _this._createSurface);
        return _this;
    }
    DiagramSurface.prototype.checkParent = function (surfaceParent) { return false; };
    Object.defineProperty(DiagramSurface.prototype, "parent", {
        get: function () {
            return this._parent;
        },
        set: function (newVal) {
            this._parent = newVal;
        },
        enumerable: false,
        configurable: true
    });
    DiagramSurface.prototype.getChildrenCollection = function () {
        return ko.observableArray([]);
    };
    DiagramSurface._unitProperties = {
        _width: function (o) { return o.pageWidth; },
        _height: function (o) { return o.pageWidth; },
        pageWidth: function (o) { return o.pageWidth; },
        pageHeight: function (o) { return o.pageHeight; },
        _bottom: function (o) { return o.margins.bottom; },
        _left: function (o) { return o.margins.left; },
        _right: function (o) { return o.margins.right; },
        _top: function (o) { return o.margins.top; }
    };
    return DiagramSurface;
}(baseSurface_1.SurfaceElementBase));
exports.DiagramSurface = DiagramSurface;
